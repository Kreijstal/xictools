#######################################################################
LOCATION = xic
#######################################################################

DATE = @DATE@
GFX_VERSION = @GFX_VERSION@

prefix = @prefix@
itopok = @itopok@
CXX = @CXX@
CC = @CC@
LINKCC = @LINKCC@
CFLAGS = @CFLAGSG@ @DYNAMIC_LIBS@ @NEEDINT64@ @UFLAGS@ @WITH_X11@
LFLAGS = @LFLAGS@ @TOOLKITLFLAGS@ @UFLAGS@
LSHFLAG = @LSHFLAG@
LIBS = @LIBS@ @TOOLKITLIBS@ @EXTRALIBS@ $(X_LIB)
LIBDL = @LIBDL@
STDCLIB = @STDCLIB@
OSNAME = @OSNAME@
ARCH = @ARCH@
DIST_SUFFIX = @DIST_SUFFIX@
GRPREF = @GRPREF@
GRPKG = @GRPKG@
DEPEND_PROG = @DEPEND_PROG@ @CFLAGSG@ @DYNAMIC_LIBS@ @NEEDINT64@
INSTALL = @INSTALL@
SOEXT = @SOEXT@
EXESUFFIX = @EXESUFFIX@
FILTER = @FILTER@
MALLOC = @MALLOC@
USESECURE = @USESECURE@
USEMOZY = @USEMOZY@
REGEX = @REGEX@
OA_SUBDIR = @OA_SUBDIR@
TOOLROOT = @TOOLROOT@
WINPTHREADFIX = @WINPTHREADFIX@
WITH_X11 = @WITH_X11@

# Where the binaries go, used to just be bin.
BINDIR = bin/$(GRPKG)

ifdef WITH_X11
X_LIB = -lX11
endif

BUG_ADDR = xic@wrcad.com

INSTALL_BIN    = $(INSTALL) -s -c -m 0755
INSTALL_SCRIPT = $(INSTALL) -c -m 0755
INSTALL_LIB    = $(INSTALL) -c -m 0644
INSTALL_LIB_RO = $(INSTALL) -c -m 0444

ifdef GRPREF
GRPREF_DIR = src/$(GRPREF)xic
GRPREF_LIB = src/$(GRPREF)xic/$(GRPREF)xic.a
GRPREF_BASELIB = $(BASE)/lib/$(GRPREF)interf.a
endif

SUBDIRS = \
  $(GRPREF_DIR) src/cd src/display src/drc src/edit src/extract src/fileio \
  src/geom src/main src/parser src/sced src/wrspif src/sparse src/tech \
  $(OA_SUBDIR)
SUBDIR_LIBS = \
  $(GRPREF_LIB) src/cd/cd.a src/display/display.a \
  src/fileio/fileio.a src/geom/geom.a src/main/main.a src/parser/parser.a \
  src/sparse/sparse.a src/wrspif/wrspif.a src/tech/tech.a src/edit/edit.a \
  src/sced/sced.a src/drc/drc.a src/extract/extract.a

BASE = ../xt_base

ifeq ($(USESECURE), yes)
SECURE = ../secure
SECURELIB = $(SECURE)/secure.a
INCLUDE = -Iinclude -I$(BASE)/include -I$(SECURE)/include
else
INCLUDE = -Iinclude -I$(BASE)/include
endif

ifdef GRPREF
ifeq ($(USEMOZY), yes)
MOZY = ../mozy
MOZYLIBS1 = $(MOZY)/lib/htm.a $(MOZY)/lib/help.a $(MOZY)/lib/$(GRPREF)mozy.a
MOZYLIBS2 = $(MOZY)/lib/htm.a $(MOZY)/lib/help.a $(MOZY)/lib/httpget.a \
  $(MOZY)/lib/imsave.a
endif
endif

LOCAL_LIBS = \
  src/main/main.a \
  src/drc/drc.a \
  src/extract/extract.a \
  src/tech/tech.a \
  src/edit/edit.a \
  src/sced/sced.a \
  $(GRPREF_LIB) \
  src/main/main.a \
  src/drc/drc.a \
  src/extract/extract.a \
  src/tech/tech.a \
  src/edit/edit.a \
  src/sced/sced.a \
  src/display/display.a \
  src/parser/parser.a \
  src/geom/geom.a  \
  src/fileio/fileio.a \
  src/cd/cd.a \
  src/sparse/sparse.a \
  src/wrspif/wrspif.a \
  $(SECURELIB) \
  $(MOZYLIBS1) \
  $(GRPREF_BASELIB) \
  $(BASE)/lib/ginterf.a \
  $(BASE)/lib/miscutil.a \
  $(MOZYLIBS2) \
  $(REGEX)

#######################################################################
####### Executable targets ############################################

TARGETS = $(GRPKG)/xic wrencode wrdecode wrsetpass
all:  cptest $(TARGETS) plugins

cptest:
	$(MAKE) -C help cptest
	$(MAKE) -C src/sparse cptest
	$(MAKE) -C src/wrspif cptest

$(TARGETS)::
	if [ ! -d $(BINDIR) ]; then \
	    mkdir $(BINDIR); \
	fi    
	$(MAKE) bin/$@

ifeq ($(OSNAME), MINGW)

# For Windows, create xic with everything in a DLL, so that we can
# link plugins against the DLL.

$(BINDIR)/xic: bin/main.cc $(BINDIR)/xic.dll
	$(CC) -o $(BINDIR)/xic bin/main.cc src/$(GRPREF)xic/resource.o \
  -L$(BINDIR) -lxic

$(BINDIR)/xic.dll: bin/xic.o $(LOCAL_LIBS) $(MALLOC)
	@echo $@: dynamic link
	@$(LINKCC) $(LSHFLAG) -o $(BINDIR)/xic.dll $(LFLAGS) bin/xic.o \
  $(LOCAL_LIBS) $(LIBS) $(MALLOC) $(STDCLIB)

else

$(BINDIR)/xic: bin/xic.o $(LOCAL_LIBS) $(MALLOC) $(OA_SUBDIR)
	-@echo $@: dynamic link;
	-@$(LINKCC) -o $(BINDIR)/xic $(LFLAGS) bin/xic.o \
  $(LOCAL_LIBS) $(LIBS) $(MALLOC) $(STDCLIB)

endif

plugins::
	$(MAKE) -C plugins

ifeq ($(USEMOZY), yes)
FT_MOZYLIBS = $(MOZY)/lib/httpget.a
endif

FT_LIBS = \
  src/geom/geom.a \
  src/fileio/fileio.a \
  src/cd/cd.a \
  src/parser/parser.a \
  src/geom/geom.a \
  src/fileio/fileio.a \
  src/wrspif/wrspif.a \
  $(BASE)/lib/miscutil.a \
  $(BASE)/lib/malloc.a \
  $(FT_MOZYLIBS)

bin/sa-filetool: bin/sa-filetool.o $(FT_LIBS)
	$(LINKCC) -o bin/sa-filetool bin/sa-filetool.o $(FT_LIBS) \
  -lm -lz $(LIBDL) $(STDCLIB)
	rm -f bin/sa-filetool.o

bin/wrencode: bin/cryptmain.cc src/parser/parser.a $(BASE)/lib/miscutil.a
	$(LINKCC) $(CFLAGS) -o bin/wrencode $(INCLUDE) -DENCODING \
  bin/cryptmain.cc src/parser/parser.a $(BASE)/lib/miscutil.a $(STDCLIB) \
  $(WINPTHREADFIX)

bin/wrdecode: bin/cryptmain.cc src/parser/parser.a $(BASE)/lib/miscutil.a
	$(LINKCC) $(CFLAGS) -o bin/wrdecode $(INCLUDE) bin/cryptmain.cc \
  src/parser/parser.a $(BASE)/lib/miscutil.a  $(STDCLIB) $(WINPTHREADFIX)

bin/wrsetpass: bin/cryptmain.cc src/parser/parser.a $(BASE)/lib/miscutil.a
	$(LINKCC) $(CFLAGS) -o bin/wrsetpass $(INCLUDE) -DENCODING \
  -DSETPASS bin/cryptmain.cc src/parser/parser.a $(BASE)/lib/miscutil.a \
  $(STDCLIB) $(WINPTHREADFIX)

#######################################################################
####### Recursively generate libraries ################################

$(SUBDIR_LIBS) $(OA_SUBDIR)::
	@if [ x$@ = x$(OA_SUBDIR) ]; then \
	    $(MAKE) -C $(OA_SUBDIR) ; \
	else \
	    $(MAKE) -C $(@D) ; \
	fi

ifeq ($(USESECURE), yes)
$(SECURE)/secure.a::
	$(MAKE) -C $(@D)
endif

$(MALLOC)::
	$(MAKE) -C $(@D)/../malloc

$(BASE)/lib/ginterf.a::
	$(MAKE) -C $(BASE)/ginterf

ifdef GRPREF
$(BASE)/lib/$(GRPREF)interf.a::
	$(MAKE) -C $(BASE)/$(GRPREF)interf
endif

$(BASE)/lib/miscutil.a::
	$(MAKE) -C $(BASE)/miscutil

$(BASE)/lib/libregex.a::
	$(MAKE) -C $(BASE)/regex

ifdef GRPREF
ifeq ($(USEMOZY), yes)
$(MOZY)/lib/$(GRPREF)mozy.a::
	if [ -d $(MOZY)/src/$(GRPREF)mozy ]; then \
	    $(MAKE) -C $(MOZY)/src/$(GRPREF)mozy ; \
	fi

$(MOZY)/lib/help.a::
	if [ -d $(MOZY)/src/help ]; then \
	    $(MAKE) -C $(MOZY)/src/help ; \
	fi

$(MOZY)/lib/htm.a::
	if [ -d $(MOZY)/src/htm ]; then \
	    $(MAKE) -C $(MOZY)/src/htm ; \
	fi

$(MOZY)/lib/httpget.a::
	if [ -d $(MOZY)/src/httpget ]; then \
	    $(MAKE) -C $(MOZY)/src/httpget ; \
	fi

$(MOZY)/lib/imsave.a::
	if [ -d $(MOZY)/src/imsave ] ; then \
	    $(MAKE) -C $(MOZY)/src/imsave ; \
	fi
endif
endif

#######################################################################
####### Object file targets ###########################################

ifeq ($(USEMOZY), yes)
MOZYINC = -I$(MOZY)/include
endif

bin/sa-filetool.o: bin/sa-filetool.cc
	$(CXX) $(CFLAGS) $(INCLUDE) $(MOZYINC) \
  -DTIMELIM=`$(BASE)/util/timegen 3` -c $*.cc -o $*.o

DARGS = \
  -DBDCODE="\"`date +%m%d%y-%H%M%S`"\" \
  -DPREFIX="\"$(prefix)\"" \
  -DOSNAME="\"$(OSNAME)\"" \
  -DARCH="\"$(ARCH)\"" \
  -DDIST_SUFFIX="\"$(DIST_SUFFIX)\"" \
  -DTOOLS_ROOT="\"$(TOOLROOT)\"" \
  -DVERSION_STR=\"$(GFX_VERSION)\" \
  -DSPICE_PROG=\"wrspice\" \
  -DBUG_ADDR=\"$(BUG_ADDR)\" \
  -DBUILD_DATE="\"$(DATE)\""

# The MSYS2 thing below prevents munging of the prefix path, which will
# cause serious errors when using MSYS2 (Windows only).  We used to
# require a drive letter in the prefix which also fixes this, but that
# breaks the "package" target.
#
bin/xic.o: bin/xic.cc Makefile ../Makefile
	$(CXX) $(CFLAGS) $(DARGS) $(INCLUDE) $(MOZYINC) -c $*.cc -o $*.o
	MSYS2_ARG_CONV_EXCL="-DPREFIX=" $(CXX) $(CFLAGS) $(DARGS) \
 $(INCLUDE) $(MOZYINC) -c $*.cc -o $*.o

.cc.o:
	$(CXX) $(CFLAGS) $(INCLUDE) -c $*.cc -o $*,o

#######################################################################
####### Dependencies ##################################################

CCFILES = bin/xic.cc bin/sa-filetool.cc bin/cryptmain.cc

depend:
	@for a in include $(SUBDIRS) help startup plugins; do \
	    $(MAKE) -C $$a depend; \
	done
	@echo depending in $(LOCATION)
	@if [ x$(DEPEND_DONE) = x ]; then \
	    echo DEPEND_DONE = 1 >> Makefile; \
	    for a in $(CCFILES); do \
	      $(DEPEND_PROG) $(INCLUDE) $(MOZYINC) $$a -MT bin/`basename $$a .cc`.o \
  $(FILTER) >> Makefile; \
	    done; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	      $(DEPEND_PROG) $(INCLUDE) $(MOZYINC) bin/main.cc -MT bin/main.o \
  $(FILTER) >> Makefile; \
	    fi; \
	fi

#######################################################################
####### Clean up ######################################################

eclean:
	-@for a in $(TARGETS); do \
	    rm -f bin/$$a$(EXESUFFIX); \
	done
	-@rm -f bin/sa-filetool$(EXESUFFIX)
	-@rm -rf $(BINDIR)

clean: eclean
	-@for a in $(SUBDIRS) plugins; do \
	    $(MAKE) -C $$a $@; \
	done
	-@rm -f bin/*.o

distclean: eclean
	-@for a in $(SUBDIRS) src/scrkit include help startup  plugins \
  packages; do \
	    $(MAKE) -C $$a $@; \
	done
	-@rm -f bin/*.o Makefile
	-@rm -rf bin/QT5 bin/QT6 bin/GTK2 bin/GTK3

ifdef GRPREF
grclean:
	$(MAKE) -C src/$(GRPREF)xic clean
	$(MAKE) -C ../mozy/src/$(GRPREF)mozy clean
	$(MAKE) -C ../xt_base/$(GRPREF)interf clean
endif

#######################################################################
####### Install programs into system location #########################

INSTALL_PREFIX ?= $(prefix)
destn = $(INSTALL_PREFIX)/$(TOOLROOT)/xic.current
toolbin = $(INSTALL_PREFIX)/$(TOOLROOT)/bin

install: install_xic_pkg clean_links install_links

install_xic_pkg: install_test install_xic_clean install_xic_bin \
  install_xic_help install_xic_icons install_xic_plugins \
  install_xic_startup install_xic_scripts install_xic_scrkit \
  install_xic_examples install_xic_docs

install_xic_bin:        $(destn)/bin
install_xic_help:       $(destn)/help
install_xic_icons:      $(destn)/icons
install_xic_plugins:    $(destn)/plugins
install_xic_startup:    $(destn)/startup
install_xic_scripts:    $(destn)/scripts
install_xic_scrkit:     $(destn)/scrkit
install_xic_examples:   $(destn)/examples
install_xic_docs:       $(destn)/docs

install_test::
	@if [ $(INSTALL_PREFIX) = $(prefix) ]; then \
	    if [ $(itopok) != yes ]; then \
	        echo "No!  Use pagkage to install!"; \
	        exit 1; \
	    fi; \
	fi

# In order to use the Windows mklink command, user must be running with
# Admin privileges, or Developer Mode must be on.  Set this from
# Settings/Update & Security/For Developers

install_links::
	@if [ -n "$(EXESUFFIX)" ]; then \
	    $(BASE)/util/make_link $(INSTALL_PREFIX)/$(TOOLROOT)/xic $(destn); \
	    $(BASE)/util/make_link $(toolbin)/wrencode$(EXESUFFIX) \
 $(destn)/bin/wrencode$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/wrdecode$(EXESUFFIX) \
 $(destn)/bin/wrdecode$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/wrsetpass$(EXESUFFIX) \
 $(destn)/bin/wrsetpass$(EXESUFFIX); \
 	    cp -f $(destn)/bin/xic.bat $(toolbin); \
	    if [ ! -h $(destn)/startup/xic_tech ]; then \
	        $(BASE)/util/make_link $(destn)/startup/xic_tech \
 $(destn)/startup/xic_tech.scmos; \
	    fi \
	else \
	    ln -s $(destn) $(INSTALL_PREFIX)/$(TOOLROOT)/xic; \
	    ln -s $(destn)/bin/wrencode $(toolbin)/wrencode; \
	    ln -s $(destn)/bin/wrdecode $(toolbin)/wrdecode; \
	    ln -s $(destn)/bin/wrsetpass $(toolbin)/wrsetpass; \
	    if [ ! -h $(destn)/startup/xic_tech ]; then \
	        ln -s $(destn)/startup/xic_tech.scmos \
 $(destn)/startup/xic_tech; \
	    fi; \
	fi
	cp -f $(destn)/bin/xic.sh $(toolbin)/xic
	chmod 755 $(toolbin)/xic

# Under MSYS2, rm deletes Windows links and junctions.

clean_links::
	-@rm -rf $(INSTALL_PREFIX)/$(TOOLROOT)/xic
	-@rm -f $(toolbin)/wrencode$(EXESUFFIX)
	-@rm -f $(toolbin)/wrdecode$(EXESUFFIX)
	-@rm -f $(toolbin)/wrsetpass$(EXESUFFIX)
	-@rm -f $(toolbin)/xic
	-@if [ -n "$(EXESUFFIX)" ]; then \
	    rm -f $(toolbin)/xic.bat; \
	fi    

install_xic_clean::
	-@rm -rf $(destn)

$(destn)/bin::
	@$(BASE)/util/mkdirpth $@
	$(INSTALL_BIN) bin/wrencode$(EXESUFFIX) $@
	$(INSTALL_BIN) bin/wrdecode$(EXESUFFIX) $@
	$(INSTALL_BIN) bin/wrsetpass$(EXESUFFIX) $@
	$(INSTALL_SCRIPT) bin/xic.sh $@
	-@if [ -n "$(EXESUFFIX)" ]; then \
	    cp -f $(BASE)/util/program.bat $@/xic.bat; \
	fi
	@if [ -d bin/GTK2 ]; then \
	    mkdir $@/GTK2; \
	    $(INSTALL_BIN) bin/GTK2/xic$(EXESUFFIX) $@/GTK2; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	        $(INSTALL_BIN) bin/GTK2/xic.dll $@/GTK2; \
	    fi; \
	fi
	@if [ -d bin/QT6 ]; then \
	    mkdir $@/QT6; \
	    $(INSTALL_BIN) bin/QT6/xic$(EXESUFFIX) $@/QT6; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	        $(INSTALL_BIN) bin/QT6/xic.dll $@/QT6; \
	    fi; \
	elif [ -d bin/QT5 ]; then \
	    mkdir $@/QT5; \
	    $(INSTALL_BIN) bin/QT5/xic$(EXESUFFIX) $@/QT5; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	        $(INSTALL_BIN) bin/QT5/xic.dll $@/QT5; \
	    fi; \
	fi

$(destn)/help::
	$(MAKE) -C help
	@$(BASE)/util/mkdirpth $@ $@/screenshots
	help=`packages/util/xic_files help`; \
        for a in $$help; do \
	    $(INSTALL_LIB) help/$$a $@; \
	done
	helpss=`packages/util/xic_files help_screenshots`; \
        for a in $$helpss; do \
	    $(INSTALL_LIB) help/screenshots/$$a $@/screenshots; \
	done

$(destn)/icons::
	@$(BASE)/util/mkdirpth $@
	icons=`packages/util/xic_files icons`; \
        for a in $$icons; do \
	    $(INSTALL_LIB) icons/$$a $@; \
	done

$(destn)/plugins::
	@$(BASE)/util/mkdirpth $@
	@shopt -s nullglob; \
	for a in plugins/*.$(SOEXT); do \
	    $(INSTALL_LIB) $$a $@; \
	done
	@if [ -n "$(OA_SUBDIR)" ]; then \
	    if [ -f $(OA_SUBDIR)/oa.$(SOEXT) ]; then \
	        $(INSTALL_LIB) $(OA_SUBDIR)/oa.$(SOEXT) $@; \
	    fi \
	fi

$(destn)/startup::
	$(MAKE) -C startup
	@$(BASE)/util/mkdirpth $@
	startup=`packages/util/xic_files startup`; \
	for a in $$startup; do \
	    $(INSTALL_LIB) startup/$$a $@; \
	done

$(destn)/scripts::
	@$(BASE)/util/mkdirpth $@
	scripts=`packages/util/xic_files scripts`; \
	for a in $$scripts; do \
	    $(INSTALL_LIB) scripts/$$a $@; \
	done

$(destn)/scrkit::
	@$(BASE)/util/mkdirpth $@
	# update files, in case they're old or not present.
	$(INSTALL_LIB) include/si_args.h src/scrkit
	$(INSTALL_LIB) include/si_if_variable.h src/scrkit
	$(INSTALL_LIB) include/si_scrfunc.h src/scrkit
	$(INSTALL_LIB) $(BASE)/include/miscutil/miscmath.h src/scrkit
	scrkit=`packages/util/xic_files scrkit`; \
	for a in $$scrkit; do \
	    $(INSTALL_LIB) src/scrkit/$$a $@; \
	done

$(destn)/examples::
	@$(BASE)/util/mkdirpth $@
	examples=`packages/util/xic_files examples`; \
	for a in $$examples; do \
	    $(INSTALL_LIB) examples/$$a $@; \
	done
	@$(BASE)/util/mkdirpth $@/PCells
	examples_pcells=`packages/util/xic_files examples_pcells`; \
	for a in $$examples_pcells; do \
	    $(INSTALL_LIB) examples/PCells/$$a $@/PCells; \
	done
	@$(BASE)/util/mkdirpth $@/memchip_example
	examples_memchip_example=`packages/util/xic_files examples_memchip_example`; \
	for a in $$examples_memchip_example; do \
	    $(INSTALL_LIB) examples/memchip_example/$$a $@/memchip_example; \
	done

$(destn)/docs::
	@$(BASE)/util/mkdirpth $@
	docs=`packages/util/xic_files docs`; \
	for a in $$docs; do \
	    cp docs/$$a $@; \
	done
	IFS="."; \
	tmp=$(GFX_VERSION); \
	set -- $$tmp; \
	cp docs/xic$$1.$$2 $@

uninstall: uninstall_test clean_links

uninstall_test::
	@if [ $(INSTALL_PREFIX) = $(prefix) ]; then \
	    if [ $(itopok) != yes ]; then \
	echo "No!  Use operating system or wr_uninstall script to uninstall!"; \
	        exit 1; \
	    fi; \
	fi

package::
	$(MAKE) all
	-rm -rf packages/root
	mkdir packages/root
	$(MAKE) INSTALL_PREFIX=packages/root$(prefix) install_xic_pkg
	$(MAKE) -C packages package

#######################################################################
