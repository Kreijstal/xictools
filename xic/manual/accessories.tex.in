% -----------------------------------------------------------------------------
% Xic Manual
% (C) Copyright 2025, Whiteley Research Inc., Sunnyvale CA
% accessories.tex.in
% -----------------------------------------------------------------------------

% accessories 072014
\chapter{The {\XicTools} Accessories}
\index{accessories}

The {\XicTools} accessories are programs provided in the optional
accessories distribution file.  These are open-source programs, and
the source code distribution can be found in the free software archive
of {\vt wrcad.com}.

The programs in the accessories distributions are the following.

\begin{description}
\item{\vt mozy}\\
A stand-alone help/www browser.  This can be used to browse the {\Xic}
and {\WRspice} help databases, or general HTML and image files.  It
supports HTML-3.2 and a few 4.0 features, so is no longer much good as
a web browser, but it works well as a help system and viewer.

\item{\vt xeditor}\\
A stand-alone text editor window, as descriptd in \ref{textedit}. 
This is one polymorph of a widget that can be configured as a file
browser or email client as well.

\item{\vt httpget}\\
A program for retrieving files served from a remote FTP or HTTP
server.

\item{\vt hlp2html}\\
A program for creating standard HTML files from help database ({\vt
.hlp}) files.

\item{\vt hlpsrv}\\
A bridge program to allow access to a help database through a web
server.

\item{\vt fcpp}\\
A post-processor for {\it FastCap} and {\it FasterCap} (from {\vt
FastFieldSolvers.com}) output, which finds and prints the capacitance
values.

\item{\vt lstpack} and {\vt lstunpack}\\
Utilities to convert {\it FastCap} input files between the packed
(single file) and unpacked (multiple file) formats.  The Whiteley
Research release of {\it FastCap} and {\it FasterCap} from {\vt
FastFieldSolvers.com} understand the packed format, other versions do
not.
\end{description}

These tools and the supporting libraries are provided in the hope that
they may be useful, under the GNU Library General Public License. 
This is open-source software, with no guarantees whatsoever, use at
your own risk.

The graphics support library was originally written as a
toolkit-independent layer between the application and the GUI.  It is
used in all graphical {\XicTools} programs.  Support was available for
GTK-1 and GTK-2, Windows native WIN32, and QT.  At present, the WIN32
and QT support have been discontinued, and GTK-1 is no longer used and
the support is probably broken.  The GTK-2 library is fully portable
to all of the target platforms, so there is no compelling reason to
supoort multiple toolkits at present.  QT support was never finalized
or used in Whiteley Research products, though it is currently in use
in a product sold by another vendor which uses licensed Whiteley
Research code.  Eventually, the library will be updated to use GTK-3,
which is the current toolkit under development by the GTK team.

If the framework looks like it might be useful in your commercial
application, contact Whiteley Research for licensing info and help in
porting/adapting.


% mozy 072014
\section{HTML Viewer and Help Portal:  {\vt mozy}}
\index{mozy utility}

{\it Mozy} is a multi-purpose HTML viewer derived from the help system
used in the {\XicTools} products from Whiteley Research Inc.  These
products are described on the Whiteley Research web site at {\vt
wrcad.com}.  See \ref{helpsys} for a description of the {\Xic} help
system, and \ref{helpview} for a description of the window controls.

There are a few command line options recognized.  {\it Mozy} will take
the first argument that is not an option as a topic to view. 
Recognized options are:

\begin{description}
\item{\vt --xic}\\
This will cause {\it Mozy} to define the {\vt Xic} flag in help text,
i.e., help text enclosed in ``{\vt !!IFDEF Xic}'' blocks will be read. 
The {\Xic} help path will also be included in the default path.  Thus,
the text presented should match that as seen from running help within
the {\Xic} program.  This option should be given if {\it Mozy} is
being used to read the {\Xic} help database.

\item{\vt --wrs} or {\vt --wrspice}\\
Either of these will cause {\vt Mozy} to define the {\vt WRspice} flag
in help text, i.e., help text enclosed in ``{\vt !!IFDEF WRspice}''
blocks will be read.  The {\WRspice} help path will also be included
in the default path.  Thus, the text presented should match that as
seen from running help within the {\WRspice} program.  This option
should be given if {\it Mozy} is being used to read the {\WRspice}
help database.
\end{description}

The graphical interface accepts the following options.  These options
are not processed by {\it Mozy}, but are intercepted by the graphics
subsystem and affect the interface to the X-window system in Linux. 
The multiple forms are equivalent.

\begin{description}
\item\parbox[b]{4in}{
{\et -d} {\it dispname}\\
{\et -display} {\it dispname}\\
{\et \symbol{45}\symbol{45}display} {\it dispname}}\\
This option specifies the name of the X display to use.  The {\it
dispname} is in the form
\begin{quote}
 [{\it host\/}]:{\it server\/}[.{\it screen\/}]\\
\end{quote}
The {\it host\/} is the host name of the
physical display, {\it server\/} specifies the display server number,
and {\it screen\/} specifies the screen number.  Either or both of the
{\it host\/} and {\it screen\/} elements to the display specification
can be omitted.  If {\it host\/} is omitted, the local display is
assumed.  If {\it screen\/} is omitted, screen 0 is assumed (and the
period is unnecessary).  The colon and (display) {\it server\/} are
necessary in all cases.  If no display is specified on the command
line, the display is set to the value of the environment variable {\et
DISPLAY}.

\item\parbox[b]{4in}{
{\et -name} {\it string}\\
{\et \symbol{45}\symbol{45}name} {\it string}}\\
This option provides an alternative name to the application, as known
to the X window system.  The application name is used by X to apply
resource specifications.

\index{command line!options!\symbol{45}\symbol{45}class}
\item{\et \symbol{45}\symbol{45}class} {\it string}\\
This option provides an alternative class name to the application, as
known to the X window system.  The application class name is used by X
to apply resource specifications.

\item\parbox[b]{4in}{
{\et -synchronous}\\
{\et \symbol{45}\symbol{45}sync}}\\
This option indicates that requests to the X server should be sent
synchronously, instead of asynchronously.  Since the X system normally
buffers requests to the server, errors do not necessarily get reported
immediately after they occur.  This option turns off the buffering so
that the application can be debugged more easily.  It should never be
used with a working program.

\item{\et \symbol{45}\symbol{45}no-xshm} {\it string}\\
In releases running under the X-Window system (Unix/Linux), {\it Mozy}
will use the MIT-SHM shared memory extension if the X server supports
this extension, and the server is running on the local machine.  This
allows image data to be transferred to the X server via shared memory,
which is faster than the normal X socket interface.  Screen updates
may be faster as a result.

Giving the option {\et \symbol{45}\symbol{45}no-xshm} on the command
line will prevent use of this extension, if for some reason this is
necessary.
\end{description}

Topics can also be entered by using the {\cb Open} menu item in the
{\cb File} menu.  A topic can be one of:

\begin{itemize}
\item{The keyword associated with a help topic in the help database.}

\item{A general URL referencing a page on the world-wide web.  The
URL must include the protocol specifier (``{\vt http:}'') in the
web address.}

\item{The path to a viewable file on the local machine.  A viewable
file can be plain or HTML text, or an image.}
\end{itemize}

{\it Mozy} displays level 3.2 HTML, and does not understand style
sheets and consequently does a poor job displaying most current web
sites.  It works fine for basic HTML as likely found in help text, and
in HTML email.

One application for {\it Mozy} is as an accessory to allow display of
HTML messages from an email client such as {\vt mutt} which does not
have that capability.  If, from {\vt mutt}, HTML content is piped to
{\it Mozy}, the viewer will appear displaying the content.  Once
visible, the operation can be repeated and the viewer will display the
new content.

{\it Mozy} contains some unique features, provided in the menus.  One
such feature is the optional FIFO created in the user's home
directory.  Text written to this ``file'' will be parsed and
displayed.  Another example is the {\cb Log Transactions} button,
which will cause the actual transmissions to and from the server to be
duplicated to the standard output.  This can be useful for debugging
purposes.  The {\cb Bad HTML Warnings} button will issue warnings
about imperfections in the HTML as it is parsed.

{\it Mozy} maintains a cache of pages and images, which is located in
the subdirectory ``{\vt .wr\_cache}'' in the user's home directory. 
If you see a really nifty web page, and you want to see the source,
simply look at the {\vt .wr\_cache/directory} file.  This will provide
a listing of all of the components of the page, which are conveniently
located in the same directory.  The cache contents can also be viewed
as a pop-up list from the {\cb Show Cache} button in the {\cb Options}
menu.  Clicking on an entry in the list will show that entry.  Thus,
you can revisit pages even when off-line.

Many of the features and capabilities of {\it Mozy} can be configured
with a {\vt .mozyrc} file placed in the user's home directory.  This
is accomplished by pressing the {\cb Save Config} button in the {\cb
Options} menu.  Once this file is installed, it will be updated when
viewer windows are closed, retaining the last settings.

\subsection{{\it Mozy} Configuration}

When {\it Mozy} starts, it will build an internal table of the topics
found in the {\vt .hlp} files that are found in the search path.  The
search path is a colon-separated list of directory paths, and if not
given it will default to the single directory that corresponds to the
default installation location for help files.  This is {\vt
/usr/local/xictools/mozy/help}.

The search path is specified to {\it Mozy} through the {\vt
MOZY\_HELP\_PATH} environment variable.  For example, suppose that the
user has created some new {\vt .hlp} files, and wishes to make them
accessible to {\it Mozy}, while keeping access to the supplied files
that are installed in the usual place.  The user has placed the files,
along with any needed image files, in {\vt /home/joe/helpfiles}.  If
using {\vt bash} or another Bourne-type shell, the command to set the
environment variable would be

\begin{quote} \vt
export MOZY\_HELP\_PATH=/home/joe/helpfiles:/usr/local/xictools/mozy/help
\end{quote}
If using the C-shell, the corresponding command would be
\begin{quote} \vt
setenv MOZY\_HELP\_PATH /home/joe/helpfiles:/usr/local/xictools/mozy/help
\end{quote}

With this variable set in the environment, {\it Mozy} will be able to
locate and display the user's topics.

When {\it Mozy} starts without an argument, a default topic is shown. 
The user may prefer that another topic be shown instead.  This can be
specified with the {\vt MOZY\_DEF\_TOPIC} environment variable.  This
variable can be set to any keyword, URL, or local file path that could
be given to {\it Mozy} through the {\cb Open} command in the {\cb
File} menu.  When the variable is set, the indicated page will be
displayed when {\it Mozy} first appears.

The environment variables can be set in the user's shell startup
script to make the definitions ``permanent''.


% httpget 092715
\section{File Transfer Utility:  {\vt httpget}}
\index{httpget utility}

The {\vt httpget} program is a stand-alone utility for copying files
from a remote system using the HTTP or FTP protocols.  This is similar
to the {\vt httpget} program supplied with the XmHTML widget by Ripley
Software Development with a few additions:

\begin{enumerate}
\item{Support for FTP file retrieval.}
\item{Optional graphical window for status reporting.}
\item{Support for POST queries.}
\item{Support for HTTP basic authentication.}
\item{Support for transaction logging.}
\item{Conversion to C++ and (hopefully) useful classes.}
\end{enumerate}

The workings have been packaged into a library, {\vt libhttpget},
which can be incorporated into other programs to provide in-process
support for httpget-type functionality.

The {\vt httpget} program is a command-line utility for retrieving
files and posting queries to a remote HTTP or FTP server.  It can be
used, for example, from within a shell script to automate a software
update.  The program is invoked with

\begin{quote}
{\vt httpget} [{\it options\/}] {\it url}
\end{quote}

where the {\it options} are listed below, and the {\it url} is a
standard-syntax universal resource locator, i.e., a web address of a
file, in a form like

\begin{quote}
[{\vt http://}]{\it server\/}/[{\it document\/}]
\end{quote}
or
\begin{quote}
{\vt ftp://}{\it host\/}{\vt /}{\it file}
\end{quote}

The {\it url} should contain the {\vt http://} or {\vt ftp://} prefix
to indicate HTTP or FTP protocol, respectively.  If no protocol is
given, HTTP is assumed.  The options are:

\begin{description}
\item{\vt -c} {\it file}\\
Name of a cookie file.  If not given no cookies are sent.  Cookies
will be stored in and dispatched from this file, during the
transaction, if given.

\item{\vt -d}\\
Enable HTTP debug mode, by enabling printing of extra status messages
during the transaction.

\item{\vt -e}\\
Don't reissue the request for HTTP location change error.  Normal
behavior if a 302 (location changed) response is received is to
reissue the request to the new location.  This option prevents this.

\item{\vt -fp} $|$ {\vt -fh}\\
Output format for errors:  plain or HTML.  Error messages are in plain
text by default, but can be HTML formatted if {\vt -fh} is given.

\item{\vt -g}[{\it x\/}{\vt :}{\it y\/}]\\
Use a graphical window.  If the graphics support has been included in
the build, this option pops up a window which provides status
indication and a {\cb Cancel} button.  Optionally colon-separated {\it
x}/{\it y} root window coordinates can immediately follow, in which
case the upper-left corner of the pop-up will be at that location, if
allowed by the window manager.

\item{\vt -h}\\
Show help.  The program lists these options and exits.

\item{\vt -i}\\
Only get HTTP document info (HEAD).  The normal behavior is to
retrieve the entire document.  This option obtains document parameters
only.

\item{\vt -l} {\it file}\\
Log bytes sent and received in {\it file\/}.  The log file will
contain a listing of the data transmitted and received.

\item{\vt -n}\\
Don't print download status indication.  Normal behavior is to print
the number of bytes received.  This option suppresses this.

\item{\vt -p} {\it proxy\_url}\\
If given, the proxy will relay all transactions.  The {\it proxy\_url}
must begin with an {\vt http:} protocol specifier ({\vt https} is not
supported), and should have the port number appended following a
colon, unless the default port 80 is used.

\item{\vt -o} {\it file}\\
Name of destination file on the local machine.  If not given the
standard output is used for HTTP and the host file name is used for
FTP.

\item{\vt -q} {\it file}\\
Query file for POST.  The file is uploaded to the server.
\end{description}

The following two options set the time to wait for transmission.  If
contact is not achieved in the timeout interval, {\vt httpget} will
try again, up to the retry count.

\begin{description}
\item{\vt -r} {\it num}\\
Retry count, default is 0.

\item{\vt -t} {\it num}\\
Timeout in seconds, default is 5.

\item{\vt -s}\\
Save HTTP error to output on failure.  The normal behavior is to emit
errors to the standard error channel.  With this option, errors are
directed to the output channel (to the file if the {\vt -o} option is
given).

\item{\vt -x}\\
Use HTTP error code as program exit value.
\end{description}


% fcpp 072014
\section{The {\it FastCap} Post-Processor:  {\vt fcpp}}
\index{fcpp utility}

Usage:  {\vt fcpp} {\it fastcap\_outfile}\\

This program processes the output from the {\it FastCap} family of
capacitance extraction programs, and prints the self and mutual
capacitance values.  It works with any known derivative of the
original MIT {\it FastCap}, and with the {\it FasterCap} program from
{\vt FastFieldSolvers.com}.


% hlp2html 072014
\section{Help to HTML Conversion Utility:  {\vt hlp2html}}
\index{hlp2html utility}

Usage: {\vt hlp2html} {\it path} [{\it path\/}...]\\

This program will convert a help database ({\vt .hlp}) file to a
collection of pure HTML files that can be viewed with a standard web
browser.  The program takes as argements paths to {\vt .hlp} files, or
paths to directories containing {\vt .hlp} files, and converts the
help text to ordinary HTML files in the current directory.  The
resulting set of files can be used to read the help text using an
ordinary web browser.

WARNING:  This program is ancient and rather obsolete, and does not
handle the newer help database features.


% hlpsrv 072014
\section{Web Server Bridge to Help Database:  {\vt hlpsrv}}
\index{hlpsrv utility}

This is a server for the help database, which, through use of a simple
cgi script, allows the help system to be accessed through a web
server, such as Apache.  Thus, the help database can be exported over
the internet, as seen on the Whiteley Research web site {\vt
wrcad.com}.

There are three environment variables that must be set:
\begin{description}
\item{\vt HLPSRV\_PATH}\\
The full real path to the help database files.

\item{\vt HLPSRV\_CGIPATH}\\
The server path to a cgi script, with argument prefix.  This is
prepended to the anchor text for all help keyword anchors.  For
example, the {\vt .hlp} file contains
\begin{quote} \vt
<a href="keyword">
\end{quote}
and we have
\begin{quote} \vt
HLPSRV\_CGIPATH = "/cgi-bin/hlpsrv.cgi?h="
\end{quote}
Then, the tag would be converted to
\begin{quote} \vt
<a href="/cgi-bin/hlpsrv.cgi?h=keyword">
\end{quote}

\item{\vt HLPSRV\_IMPATH}\\
The server path to images called from help database files.  This is
prepended to the path which follows {\vt src=} in {\vt img} tags. 
Images should be linked or moved to this location.
\end{description}

The invocation arguments are database keywords.  The program dumps the
{\vt Content-type} header and topic text to the standard output.

Below is an example Apache cgi script, which makes available the
{\Xic} help database.  This would be installed in the server's
{\vt cgi-bin} as (e.g.) {\vt xichelp.cgi}.

\begin{quote}\vt
\#! /bin/sh\\
\\
IFS='='\\
set \$QUERY\_STRING\\
\\
export HLPSRV\_PATH="/usr/local/xictools/xic/help"\\
export HLPSRV\_CGIPATH="/cgi-bin/xichelp.cgi?h="\\
export HLPSRV\_IMPATH="/help-images/"\\
\\
/usr/local/xictools/bin/hlpsrv \$2\\
\end{quote}

In web pages, the help system can then be accessed using code like

\begin{quote} \vt
<a href="/cgi-bin/xichelp.cgi?h=xic">\\
Click here</a> to enter the on-line <b><i>Xic</i></b> help system.<br>
\end{quote}

The word that follows {\vt ?h} is a help database keyword.


% lstpack 072014
\section{List File Pack/Unpack Utilities:  {\vt lstpack}, {\vt lstunpack}}
\index{lstpack utility}
\index{lstunpack utility}

Utilities are provided to convert between different formats of list
files, which are input files to the {\it FastCap} family of
capacitance extraction programs.  The capacitance extraction interface
(see \ref{fcinterf}) generates this file format.
    
The original list file format, specified by MIT for the original {\it
FastCap} program, actually used multiple files to describe the
geometry.  The list file references the other files.

The Whiteley Research revision of {\it FastCap} and the {\it
FasterCap} program from {\vt FastFieldSolvers.com} can make use of a
``unified'' list file format, where the geometry ``files'' are
actually tacked onto the end of the list file itself, so that all
input is provided in a single file.  This can be much more convenient
in cases where the input would otherwise require a large collection of
files.

Whiteley Research provides two simple utilities to convert between
formats.

\begin{description}
\item{\vt lstpack} {\it listfile}\\
The {\it listfile} is an old-style (unpacked) list file, which
references geometry files found in the same directory as the {\it
listfile}.  The utility will create, in the current directory, an
equivalent unified list file.  The base name of the file will be that
of the input file, but with ``{\vt \_p}'' appended.  The new file will
have a ``{\vt .lst}'' extension.

\item{\vt lstunpack} {\it listfile}\\
The {\it listfile} is a new-style (packed, or unified) list file.  The
utility will create, in the current directory, a new old-style
unpacked list file, and all of the referenced geometry files.  It
would usually be wise to run this in a previously clear directory. 
The new file will have the same base name as the input file, but with
``{\vt \_unp}'' appended, and will be given a ``{\vt .lst}''
extension.
\end{description}

