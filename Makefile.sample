#######################################################################
# Top level Makefile for XicTools.
#######################################################################

# Configuration

# The tools will be installed under /usr/local by default, but this
# can be changed here.  If you want to install directly to a special
# location (that may not require root permissions, for example), and
# skip the packaging step, you can change this variable.  Most
# packages are relocatable, meaning that the final destination can be
# set when installing from packages (OX X and Debian/Ubuntu don't
# allow relocation).
#
PREFIX = --prefix=/usr/local

# The standard way to build and install xictools is to build a set of
# packages, and then install the packages.  "make install" is actually
# prevented from installing directory to the default installation
# location, since typically packages and direct installation don't mix
# well.  If this variable is set to "yes", installation to the
# "PREFIX" location is allowed.  This is for users who wish to skip
# the packaging step.  Package installers may require root permission
# to run, so users can avoid this and keep all files in their local
# space with the PREFIX variable set appropriately and this variable
# set to "yes" instead of "no"..
#
ITOPOK = --enable-itopok=no

# The licensing system for Xic and WRspice is disabled by default, but
# can be enabled by uncommenting the assignment below.  The code for
# the license server and related is provided as it might be useful to
# someone, but shouldn't be needed for Xic and WRspice as open-source.
#
#HVSECURE = --enable-secure=yes

# The Mozy help viewer is tainted with GNU licensing restrictions due
# to derivation from GNU-licensed original source code.  All of the
# tainted code is under mozy.  If you're commercial and fear the GNU,
# uncomment this and live without the help system, http file transfer,
# screen dumps, and package management.
#
#NOMOZY = --enable-nomozy=yes

# Force 32-bit build on x86_64 Linux systems.
#
#32BIT = --enable-force32=yes

# OpenAccess support, Linux only, OS X experimental.
# If you have an OpenAccess source tree, specify its location in this
# variable and uncomment.  This enables OpenAccess support in Xic.
#
#OALOC  = --enable-oa=/usr/local/cad/OA-22.04

# If enabled and set to the installed location of the PyCellStudio
# from Synopsys, the Python plug-in will link to the Python supplied
# with PyCellStudio, version 2.6.2 support only at present. 
# OpenAccess above must point to a version "close to" that provided in
# PyCellStudio, but we need the source for the include files not
# provided with PyCellStudio.
#
#CNILOC = \
#  --enable-cni=/global/apps/customcompiler_2021.09-2/linux64/PyCellStudio

# PSF support in WRspice (for Cadence ADE integration), Linux RHEL6/7
# only.  If you have this Cadence product, PSF file support can be
# enabled by setting and uncommenting this variable.
#
#KITLOC = --enable-psf=/home/stevew/cadence/oasis-kit/tools.lnx86

# Windows setup.  This uses the win-builds tool chain and gtk2
# libraries.  The libraries are packaged into a "gtk2-bundle"
# distribution, which may be obtained and used.  This must be provided
# to the user.  Alternatively the user can install and link to the
# libraries directly.  In any case, these valiables must be given when
# building under Mingw or similar on Windows.
#
#MINGW  = --enable-mingw=/usr/local/win-builds
#GTKLOC = --enable-gtk2=/usr/local/gtk2-bundle/bin

# If you don't want to build all the tools, you can choose what to
# build below.  The xt_base is required for everything, other
# dependencies are represented by the two lines below.  You can change
# SUBDIRS to list only the tools you need.

WRSPICE = adms KLU vl wrspice
XIC = mrouter xic

ifdef HVSECURE
SECURE = secure
endif
ifndef NOMOZY 
MOZY = mozy
endif

SUBDIRS = xt_base $(SECURE) $(MOZY) $(WRSPICE) $(XIC) fastcap fasthenry

#######################################################################
CFARGS = $(PREFIX) $(ITOPOK) $(HVSECURE) $(NOMOZY) $(32BIT) $(OALOC) \
  $(KITLOC) $(MINGW) $(GTKLOC)

FLAGFILE = .configured

config:
	@if [ ! -f $(FLAGFILE) ]; then \
	    command -v autoconf; \
	    if [ $$? = 0 ]; then \
	        (cd xt_base; autoconf; ./configure $(CFARGS)); \
	        if [ $$? != 0 ]; then exit 1; fi; \
	    else \
	        command -v autoconf-2.69; \
                if [ $$? = 0 ]; then \
                    (cd xt_base; autoconf-2.69; ./configure $(CFARGS)); \
                    if [ $$? != 0 ]; then exit 1; fi; \
                else \
	            echo \
"  Error: the autoconf program (autoconf-2.69 in Cygwin) is not found"; \
	            echo "  and is required."; \
	            exit 1; \
	        fi; \
	    fi; \
	    touch $(FLAGFILE); \
	fi
	(${MAKE} depend)

reconfig:
	-@rm -f $(FLAGFILE)
	$(MAKE) config

all: config
	-@for a in $(SUBDIRS); do \
	    if [ -d $$a ]; then \
	        (cd $$a; $(MAKE)); \
	    fi; \
	done

packages: all
	-@for a in $(SUBDIRS); do \
	    if [ -d $$a -a -d $$a/packages ]; then \
	        (cd $$a; $(MAKE) package); \
	    fi; \
	done

quick_pkgs: all
	-@export quick_pkgs=1; for a in $(SUBDIRS); do \
	    if [ -d $$a -a -d $$a/packages ]; then \
	        (cd $$a; $(MAKE) package); \
	    fi; \
	done

install: all
	-@for a in $(SUBDIRS); do \
	    if [ -d $$a -a -d $$a/packages ]; then \
	        (cd $$a; $(MAKE) install); \
	    fi; \
	done

uninstall::
	-@for a in $(SUBDIRS); do \
	    if [ -d $$a -a -d $$a/packages ]; then \
	        (cd $$a; $(MAKE) uninstall); \
	    fi; \
	done

depend clean:
	-@for a in $(SUBDIRS); do \
	    if [ -d $$a ]; then \
	        (cd $$a; $(MAKE) $@); \
	    fi; \
	done

distclean:
	-@rm -f $(FLAGFILE)
	-@for a in $(SUBDIRS); do \
	    if [ -d $$a ]; then \
	        (cd $$a; $(MAKE) $@); \
	    fi; \
	done


