
!!  ---------------------------------------------------------------
!!  Xic/WRspice Help System Database
!!  $Id: HelpSys.hlp,v 1.35 2017/03/22 07:30:07 stevew Exp $
!!  Copyright (C) Whiteley Research Inc. 2003.  All Rights Reserved
!!  ---------------------------------------------------------------

!!KEYWORD
HelpSys.hlp
!!TITLE
HelpSys.hlp
!!HTML

!!SUBTOPICS
helpsys
update
helpview
helpdb
helpforms
helpinit
helpfiles
hlp2latex


!! 122924
!!KEYWORD
helpsys
!!TITLE
Help System
!!HTML
!!IFDEF Xic
    <p>
    <i>Xic</i> provides on-line context-sensitive help through
    activation of the <b>Help</b> button in the <b>Help Menu</b>. 
    When this button is pressed, <i>Xic</i> enters help mode, and
    (unless suppressed) the help window appears with the default
    top-level topic.  While help mode is active, information about
    commands and screen objects can be obtained by clicking with the
    left mouse button (button 1) on menu buttons or other screen
    objects.  While in help mode, menu buttons will perform their
    normal functions rather than bringing up help text if the
    <b>Shift</b> key is held while the menu entry is activated.  Help
    mode can be exited by pressing the <b>Esc</b> key while the
    pointer is in a drawing window, or by pressing the <b>Help</b>
    button a second time, but these will not remove the help window
    from the screen.  Help mode is also exited when all help windows
    have been deleted, either with the <b>Quit</b> button in the help
    window <b>File</b> menu, or with window manager functions.  If
    a help window is brought up with the keyboard <a
    href="!help"><b>!help</b></a> command, <i>Xic</i> is not in help
    mode, thus menu buttons will have their normal functions.
!!ENDIF
!!IFDEF WRspice
    <p>
    The <i>WRspice</i> help system provides a cross-referenced
    rich-text (HTML) database on the commands and features of the
    program.  The system is entered at the top level by pressing the
    <b>Help</b> button in the <b>Help</b> menu of the <b>Tool
    Control</b> window, or by giving the <tt>help</tt> command without
    arguments.  If a command name or other known keyword is given as
    an argument to the <tt>help</tt> command, the help system will
    start by displaying the help for that topic.

    <p>
    When graphics is not available, the help text will be presented in
    a text-only format in the console window.  The HTML to ASCII text
    converter only handles the most common HTML tags, so some
    descriptions may look a little strange.  The figures (and all
    images) are not shown, and clickable links will not be available,
    other than the "references" and "seealso" topics.
!!ENDIF

!!IFDEF Xic
    <p>
    If the variable <a
    href="HelpDefaultTopic"><b>HelpDefaultTopic</b></a> is set (with
    the <a href="!set"><b>!set</b></a> command or otherwise) to an
    empty string, pressing the <b>Help</b> button will not bring up
    the default top-level window.  However, clicking on objects and
    buttons will bring up help topics as usual.  One can also set this
    variable to a URL or database keyword, the content from which will
    appear in the initial window as the default topic.
!!ENDIF

    <p>
    Clicking on a colored HTML reference will bring up the text of
    the selected topic.  If button 1 is used to click, the text will
    appear in the same window.  If button 2 is used to click, a new
    help window containing the selected topic will appear.

!!IFDEF Xic
    <p>
    The help system operates in one of two modes.  The default mode is
    to use a single window for each new topic generated by pressing a
    command or menu button.  This is the only mode available in
    <i>WRspice</i>.  In the multi-window implementation, which can be
    selected in <i>Xic</i> by selecting the <a
    href="xic:multw"><b>Multi-Window Mode</b></a> button in the <b>Help
    Menu</b>, or by setting the boolean variable <a
    href="HelpMultiWin"><b>HelpMultiWin</b></a> with the <b>!set</b>
    command, a separate window is brought up for each press of a
    command button or menu item while in help mode.  In either case,
    clicking on a link may or may not produce a new window, depending
    upon whether button 1 or button 2 was clicked.
!!ENDIF

    <p>
    Text shown in the viewer that is not part of an image can be
    selected by dragging with button 1, and can be pasted into other
    windows in the usual way.

    <p>
    The viewer can be used to display any text file or URL.  In <i>Xic</i>
    and its derivatives, pressing the question mark key ("<tt>?</tt>")
    will prompt the user for text to display.
!!IFDEF Xic
    The <a href="!help"><b>!help</b></a> command has the same effect.  In
    <i>WRspice</i>, the text to display can follow the "<b>help</b>"
    command keyword on the command line.
!!ELSE
    The <b>!help</b> command has the same effect.  In <i>WRspice</i>, the
    text to display can follow the <a href="help"><b>help</b></a>
    command keyword on the command line.
!!ENDIF
    The name given to the command, or to to the <b>Open</b> command in
    the viewer's <b>File</b> menu, can be
    <ul>
    <li>A keyword for an entry in the help database.
    <li>A path to a file on the local machine.  The file can be an image
    in any standard format, or HTML or plain text.
    <li>An arbitrary URL accessible through the internet.
    </ul>

    <p>
    If the given name can be resolved, the resulting page will be
    displayed in the viewer.  Also, the HTML viewer is sensitive as a
    drop receiver.  If a file name or URL is dragged into the viewer
    and dropped, that file or URL is read into the viewer, after
    confirmation.

    <p>
    The ability to access general URLs should be convenient for
    accessing information from the internet while using <i>Xic</i> and
    <i>WRspice</i>.  The prefix "<tt>http://</tt>" <i>must</i> be
    provided with the URL.  Thus, for example
    <blockquote>
    <table border=0 cellpadding=4>
    <tr><td><i>Xic</i></td> <td><tt>? http://wrcad.com</tt></td></tr>
    <tr><td><i>WRspice</i></td>
      <td><tt>help http://wrcad.com</tt></td></tr>
    </table>
    </blockquote>
    will bring up the Whiteley Research web page in <i>Xic</i> or
    <i>WRspice</i>.  The links can be followed by clicking in the
    usual way.  Of course, the computer must have internet access for
    web pages to be accessible.

    <p>
    Be advised, however, that the "<tt>mozy</tt>" HTML viewer used in
    Unix/Linus releases is HTML-3.2 compliant with only a few HTML-4.0
    features implemented, and has no JavaScript, Java or Flash
    capabilities.  A few years ago, this was sufficient for viewing
    most web sites, but this is no longer true.  Most sites now rely
    on css styles, JavaScript, and other features not available in
    <tt>mozy</tt>.  Most sites are still readable, to varying degrees,
    but without correct formatting.

    <p>
    The given URL is not relative to the current page, however if a
    '+' is given before the URL, it will be treated as relative.  For
    example, if the viewer is currently displaying
    <tt>http://www.foo.bar</tt>, if one enters
    "<tt>/dir/file.html</tt>", the display will be updated to
    <tt>/dir/file.html</tt> on the local machine.  If instead one
    enters "<tt>+/dir/file.html</tt>", the display will be loaded with
    <tt>http://www.foo.bar/dir/file.html</tt>.

    <p>
    The HTTP capability imposes some obvious limitations on the string
    tokens which can be used in the help database.  These keywords
    should not use the '/' character, or begin with a protocol
    specifier such as "<tt>http:</tt>".

    <p>
    HTML files on a local machine can be loaded by giving the full
    path name to the file.  Relative references will be found.  HTML
    files will also be found if they are located in the help path,
    however relative references will be found only if the referenced
    file is also in the help path.  If a directory is referenced
    rather than a file, a formatted list of the files in the directory
    is shown.

    <p>
    If a filename passed to the viewer has one of the following
    extensions, the text is shown verbatim.  The (case insensitive)
    extensions for plain-text files are "<tt>.txt</tt>",
    "<tt>.log</tt>", "<tt>.scr</tt>", "<tt>.sh</tt>", "<tt>.csh</tt>",
    "<tt>.c</tt>", "<tt>.cc</tt>", "<tt>.cpp</tt>", "<tt>.h</tt>",
    "<tt>.py</tt>", "<tt>.tcl</tt>", and "<tt>.tk</tt>".

!!IFDEF WRspice
    <p>
    In the <i>WRspice</i> help system, link references to files with a
    "<tt>.cir</tt>" extension will be sourced into <i>WRspice</i> when
    the link is clicked on.  Thus, if one has a circuit file named
    "<tt>mycircuit.cir</tt>", and the HTML text in the help window
    contains a reference like
    <blockquote>
    <tt>&#60;a html="mycircuit.cir">click here&#60;/a></tt>
    </blockquote>
    then clicking on the "click here" tag will source
    <tt>mycircuit.cir</tt> into <i>WRspice</i>.  Similarly, link
    references to files with a plot data extension will be loaded into
    <i>WRspice</i> when the anchor is clicked, as if using the <a
    href="load"><b>load</b></a> command.  The known extensions (which
    of course must match the file type) include "<tt>.raw</tt>" (for
    <a href="rawfilefmt">rawfiles</a>), "<tt>.csv</tt>" (for
    comma-separated data <a href="csvfilefmt">(CSV) files</a>), and
    "<tt>.csdf</tt>" and others for common simulation data format <a
    href="csdffilefmt">(CSDF) files</a>.

    <p>
    This feature may solve a big problem.  How many <i>WRspice</i>
    users have directories full of old simulation files, the details
    about which are long forgotten or buried in some notebook
    somewhere?  Now the documentation task may be somewhat simpler. 
    While doing simulations, one can maintain a text file containing
    notes about the circuit and results, with HTML anchor tags to the
    actual circuit and data files.  Then, one can load the text file
    into the <i>WRspice</i> help system (if the notes are in a file
    "<tt>notes.html</tt>", one just types "<tt>help notes.html</tt>"),
    and browse the notes and have one-click access to the original
    files and plot data.  The notes file would probably need some
    hasic HTML formatting tags, but this is easy to learn.
!!ENDIF

    <p>
    Holding <b>Shift</b> while clicking on an anchor that points to a
    URL which specifies a file on a remote system will download the
    file.  References to files with extensions "<tt>.rpm</tt>",
    "<tt>.gz</tt>", and other common binary file suffixes will cause
    downloading rather than viewing.  When downloading, the <a
    href="filesel"><b>File Selection</b></a> pop-up will appear,
    pre-loaded with the file name (or "<tt>http_return</tt>" if not
    known) in the current directory.  One can change the saved name
    and the directory of the file to be downloaded.  Pressing the
    <b>Download</b> button will start downloading.  A pop-up will
    appear that monitors the transfer, which can be aborted with the
    <b>Cancel</b> button.
!!LATEX helpsys useriface.tex
!!IFDEF Xic
{\Xic} provides on-line context-sensitive help through activation of
the {\cb Help} button in the {\cb Help Menu}.  When this button is
pressed, {\Xic} enters help mode, and (unless suppressed) the help
window appears with the default top-level topic.  While help mode is
active, information about commands and screen objects can be obtained
by clicking with the left mouse button (button 1) on menu buttons or
other screen objects.  While in help mode, menu buttons will perform
their normal functions rather than bringing up help text if the {\kb
Shift} key is held while the menu entry is activated.  Help mode can
be exited by pressing the {\kb Esc} key while the pointer is in a
drawing window, or by pressing the {\cb Help} button a second time,
but these will not remove the help window from the screen.  Help mode
is also exited when all help windows have been deleted, either with
the {\cb Quit} button in the help window {\cb File} menu, or with
window manager functions.  If a help window is brought up with the
keyboard {\cb !help} command, {\Xic} is not in help mode, thus menu
buttons will have their normal functions.
!!ENDIF
!!IFDEF WRspice
The {\WRspice} help system provides a cross-referenced rich-text
(HTML) database on the commands and features of the program.  The
system is entered at the top level by pressing the {\cb Help} button
in the {\cb Help} menu of the {\cb Tool Control} window, or by giving
the {\cb help} command without arguments.  If a command name or other
known keyword is given as an argument to the {\cb help} command, the
help system will start by displaying the help for that topic.

When graphics is not available, the help text will be presented in a
text-only format in the console window.  The HTML to ASCII text
converter only handles the most common HTML tags, so some
descriptions may look a little strange.  The figures (and all
images) are not shown, and clickable links will not be available,
other than the ``references'' and ``seealso'' topics.
!!ENDIF

!!IFDEF Xic
\index{HelpDefaultTopic variable}
If the variable {\et HelpDefaultTopic} is set (with the {\cb !set}
command or otherwise) to an empty string, pressing the {\cb Help}
button will not bring up the default top-level window.  However,
clicking on objects and buttons will bring up help topics as usual.
One can also set this variable to a URL or database keyword, the
content from which will appear in the initial window as the default
topic.
!!ENDIF

Clicking on a colored HTML reference will bring up the text of the
selected topic.  If button 1 is used to click, the text will appear in
the same window.  If button 2 is used to click, a new help window
containing the selected topic will appear.

!!IFDEF Xic
\index{HelpMultiWin variable}
The help system operates in one of two modes.  The default mode is to
use a single window for each new topic generated by pressing a command
or menu button.  In the multi-window implementation, which can be
selected in {\Xic} by selecting the {\cb Multi-Window Mode} button in
the {\cb Help Menu}, or by setting the boolean variable {\et
HelpMultiWin} with the {\cb !set} command, a separate window is
brought up for each press of a command button or menu item while in
help mode.  In either case, clicking on a link may or may not produce
a new window, depending upon whether button 1 or button 2 was clicked.
!!ENDIF

Text shown in the viewer that is not part of an image can be selected
by dragging with button 1, and can be pasted into other windows in the
usual way.

The viewer can be used to display any text file or URL.  In {\Xic} and
its derivatives, pressing the question mark key (``{\kb ?}'') will
prompt the user for text to display.
!!IFDEF Xic
The {\cb !help} command has the same effect.  In {\WRspice}, the text
to display can follow the ``{\cb help}'' command keyword on the command
line.
!!ELSE
The {\cb !help} command has the same effect.  In {\WRspice}, the text
to display can follow the ``{\cb help}'' command keyword on the
command line.
!!ENDIF
The name given to the command, or to to the {\cb Open} command in the
viewer's {\cb File} menu, can be
\begin{itemize}
\item{A keyword for an entry in the help database.}
\item{A path to a file on the local machine.  The file can be an image
in any standard format, or HTML or plain text.}
\item{An arbitrary URL accessible through the Internet.}
\end{itemize}

If the given name can be resolved, the resulting page will be
displayed in the viewer.  Also, the HTML viewer is sensitive as a drop
receiver.  If a file name or URL is dragged into the viewer and
dropped, that file or URL is read into the viewer, after confirmation.

The ability to access general URLs should be convenient for accessing
information from the Internet while using {\Xic} and {\WRspice}.  The
prefix ``{\tt http://}'' {\it must} be provided with the URL.  Thus,
for example,
\begin{quote}\vt
help http://wrcad.com
\end{quote}
will bring up the Whiteley Research web page.  The links can be
followed by clicking in the usual way.  Of course, the computer must
have internet access for web pages to be accessible.

Be advised, however, that the ``{\vt mozy}'' HTML viewer used in
Unix/Linux releases is HTML-3.2 compliant with only a few HTML-4.0
features implemented, and has no JavaScript, Java or Flash
capabilities.  A few years ago, this was sufficient for viewing most
web sites, but this is no longer true.  Most sites now rely on css
styles, JavaScript, and other features not available in {\vt mozy}. 
Most sites are still readable, to varying degrees, but without correct
formatting.

The given URL is not relative to the current page, however if a `+' is
given before the URL, it will be treated as relative.  For example, if
the viewer is currently displaying {\vt http://www.foo.bar}, if one
enters ``{\vt /dir/file.html}'', the display will be updated to {\vt
/dir/file.html} on the local machine.  If instead one enters ``{\vt
+/dir/file.html}'', the display will be loaded with {\vt
http://www.foo.bar/dir/file.html}.

The HTTP capability imposes some obvious limitations on the string
tokens which can be used in the help database.  These keywords should
not use the `/' character, or begin with a protocol specifier such as
``{\vt http:}''.

HTML files on a local machine can be loaded by giving the full path
name to the file.  Relative references will be found.  HTML files will
also be found if they are located in the help path, however relative
references will be found only if the referenced file is also in the
help path.  If a directory is referenced rather than a file, a
formatted list of the files in the directory is shown.

If a filename passed to the viewer has one of the following
extensions, the text is shown verbatim.  The (case insensitive)
extensions for plain-text files are ``{\vt .txt}'', ``{\vt .log}'',
``{\vt .scr}'', ``{\vt .sh}'', ``{\vt .csh}'', ``{\vt .c}'', ``{\vt
.cc}'', ``{\vt .cpp}'', ``{\vt .h}'', ``{\vt .py}'', ``{\vt .tcl}'',
and ``{\vt .tk}''.

!!IFDEF WRspice
In the {\WRspice} help system, link references to files with a ``{\vt
.cir}'' extension will be sourced into {\WRspice} when the link is
clicked on.  Thus, if one has a circuit file named ``{\vt
mycircuit.cir}'', and the HTML text in the help window contains a
reference like
\begin{quote}
{\vt <a html="mycircuit.cir">click here</a>}
\end{quote}
then clicking on the ``click here'' tag will source {\vt
mycircuit.cir} into {\WRspice}.  Similarly, link references to files
with a plot data extension will be loaded into {\WRspice} when the
anchor is clicked, as if using the {\cb load} command.  The known
extensions (which of course must match the file type) include ``{\vt
.raw}'' (for rawfiles), ``{\vt .csv}'' (for comma-separated data (CSV)
files), and ``{\vt .csdf}'' and others for common simulation data
format (CSDF) files.

This feature may solve a big problem.  How many {\WRspice} users have
directories full of old simulation files, the details about which are
long forgotton or buried in some notebook somewhere?  Now the
documentation task may be somewhat simpler.  While doing simulations,
one can maintain a text file containing notes about the circuit and
results, with HTML anchor tags to the actual circuit and data files. 
Then, one can load the text file into the {\WRspice} help system (if
the notes are in a file ``{\vt notes.html}'', one just types ``{\vt
help notes.html}''), and browse the notes and have one-click access to
the original files and plot data.  The notes file would probably need
some hasic HTML formatting tags, but this is easy to learn.
!!ENDIF

Holding {\kb Shift} while clicking on an anchor that points to a URL
which specifies a file on a remote system will download the file. 
Downloading makes use of the {\vt httpget} utility program available
in the Accessories distribution.  Installation of the accessories is
required for downloading to be available under Unix/Linux.  References
to files with extensions ``{\vt .rpm}'', ``{\vt .gz}'', and other
common binary file suffixes will automatically cause downloading
rather than viewing.  When downloading, the file selection pop-up will
appear, pre-loaded with the file name (or ``{\vt http\_return}'' if
the name is not known) in the current directory.  One can change the
saved name and the directory of the file to be downloaded.  Pressing
the {\cb Download} button will start downloading.  A pop-up will
appear that monitors the transfer, which can be aborted with the {\cb
Cancel} button.

!!SUBTOPICS
helpview
helpdb
helpforms
helpinit
helpfiles
update

!! 102817
!!KEYWORD
update
!!TITLE
XicTools Update
!!HTML
    The help system provides package management capability for the
    <i>XicTools</i> programs.  Giving the keyword
    <blockquote>
    <tt>:xt_pkgs</tt>
    </blockquote>
    (note that the keyword starts with a colon) brings up a page listing
    the installed and available <i>XicTools</i> packages, for the current
    architecture.  This requires internet access and http connectivity to
    <tt>wrcad.com</tt>.

    <p>
    One can select packages to download and optionally install by clicking
    on the check boxes.  There are separate buttons to initiate downloading
    only, and downloading and installation.  Package files, and the latest
    <tt>wr_install</tt> script if downloading, are downloaded to the current
    directory.  Once installed, these files can be deleted.

    <p>
    The <i>XicTools</i> package management capability is available from
    the the internal help system in <i>Xic</i> and <i>WRspice</i>, and
    from the stand-alone <i>mozy</i> help browser.
!!LATEX update useriface.tex
The help system provides package management capability for the
{\XicTools} programs.  Giving the keyword
\begin{quote}\vt
:xt\_pkgs
\end{quote}
(note that the keyword starts with a colon) brings up a page listing
the installed and available {\XicTools} packages, for the current
architecture.  This requires internet access and http connectivity to
{\vt wrcad.com}.

One can select packages to download and optionally install by clicking
on the check boxes.  There are separate buttons to initiate
downloading only, and downloading and installation.  Package files,
and the latest {\vt wr\_install} script if downloading, are downloaded
to the current directory.  Once installed, these files can be deleted.

The {\XicTools} package management capability is available from the
the internal help system in {\Xic} and {\WRspice}, and from the
stand-alone {\it mozy} help browser.

!!SEEALSO
helpsys

!! 102917
!!KEYWORD
helpview
!!TITLE
The HTML Help Viewer
!!HTML
    <img src="screenshots/help.png" align=right>

    The help viewer windows provide access to the <a
    href="helpsys">help system</a> topics, and can display general
    HTML and image files.

    <p>
    There are three colored buttons in the menu bar of the viewer. 
    The left-facing arrow button (back) will return to the previous
    topic shown in the window.  The right-facing arrow button
    (forward) will advance to the next topic, if the back button has
    been used.  The <b>Stop</b> button will stop HTTP transfers in
    progress.

    <p>
    There are four drop-down menus in the menu bar:  <b>File</b>,
    which contains basic commands for loading and printing,
    <b>Options</b>, which contains commands for setting display
    attributes, <b>Bookmarks</b>, which allows saving frequently used
    references, and <b>Help</b> which provides documentation.

    The <b>File</b> menu contains the following command buttons.
    <dl>
    <dt><b>Open</b><dd>
    The <b>Open</b> button in the <b>File</b> menu pops up a dialog
    into which a new keyword, URL, or file name can be entered.
    </dl>

    <dl>
    <dt><b>Open File</b><dd>
    The <b>Open File</b> button brings up the <a
    href="filesel"><b>File Selection</b></a> panel.  The <b>Ok</b>
    button (green octagon) on the <b>File Selection</b> panel will
    load the selected file into the viewer (the file should be a
    viewable file).  The file can also be dragged into the viewer from
    the <b>File Selection</b> panel.
    </dl>

    <dl>
    <dt><b>Save</b><dd>
    The <b>Save</b> button in the <b>File</b> menu allows the text
    of the current window to be saved in a file.  This functionality
    is also provided by the <b>Print</b> button.  The saved text is
    pure ASCII.
    </dl>

    <dl>
    <dt><b>Print</b><dd>
    The <b>Print</b> button in the <b>File</b> menu brings up a pop-up
    which allows the user to send the help text to a printer, or to a
    file.  The format of the text is set by the drop-down menu, with
    the current setting indicated on the menu button.  The choices are
    PostScript in four fonts (Times, Helvetica, New Century
    Schoolbook, and Lucida Bright), HTML, or plain text.  If the <b>To
    File</b> button is active, output goes to that file, otherwise the
    command string is executed to send output to a printer.  If the
    characters "%s" appear in the command string, they are replaced
    with the temporary print file name, otherwise the temporary file
    name is appended to the string, separated by a space character.
    </dl>

    <dl>
    <dt><b>Reload</b><dd>
    The <b>Reload</b> button in the <b>File</b> menu will re-read the
    input file and redisplay the contents.  This can be useful when
    writing new help text or HTML files, as it will show changes made
    to the input file.  However, if you edit a "<tt>.hlp</tt>" file, the
    internally cached offsets for the topics below the editing point
    will be wrong, and will not display correctly.  When developing a
    help text topic, placing it in a separate file will avoid this
    problem.
!!IFDEF Xic
    One can also use the <a href="!helpreset"><b>!helpreset</b></a>
    command to update the file offset table.
!!ENDIF
    If the displayed object is a web page, the page will be
    redisplayed from the disk cache if it is enabled, rather than
    being downloaded again.
    </dl>

    <dl>
    <dt><b>Old Charset</b><dd>
    The help viewer uses the UTF-8 character set, which is the current
    standard international character set.  However, older input
    sources may assume another character set, such as ISO-8859, that
    will display some characters incorrectly.  If the user observes
    that some characters are missing or wrong in the display, setting
    this mode might help.
    </dl>

    <dl>
    <dt><b>Make FIFO</b><dd>
    This controls an obscure but unique feature.  When the button is
    pressed, a named pipe, or FIFO, is created in the user's home
    directory.  The name is "<tt>mozyfifo</tt>", or if this name is in
    use, an integer suffix is added to make the name unique.  This is
    a special type of file, that has the property in this case that
    text written to this "file" will be parsed and displayed on the
    viewer screen.

    <p>
    The feature was developed for use in the stand-alone <tt>mozy</tt>
    program, for use as a HTML viewer for the <tt>mutt</tt> mail
    client.  If an HTML MIME attachment is "saved" to the FIFO
    file, it will be displayed in the viewer.

    <p>
    The FIFO will be destroyed if this toggle button is pressed a
    second time, or when the help window exist normally.  If the
    program crashes, the FIFO may be left behind and require manual
    removal.
    </dl>

    <dl>
    <dt><b>Quit</b><dd>
    The <b>Quit</b> button in the <b>File</b> menu removes the help
    window.
!!IFDEF Xic
    This will exit help mode (where clicking on a command button
    brings up help) if there are no other help windows visible. 
    Pressing the <b>Help</b> button in the <b>Help Menu</b> a second
    time or pressing the <b>Esc</b> key also exits help mode, though
    the help windows remain visible.
!!ENDIF
    </dl>

    The <b>Options</b> menu presents a number of configuration and
    visual attribute choices to the user.  These are described below.
    <dl>
    <dt><b>Save Config</b><dd>
    The <b>Save Config</b> button in the <b>Options</b> will save a
    configuration file in the user's home directory, named
    "<tt>.mozyrc</tt>".  This file is read whenever a new help window
    appears, and sets various parameters, defaults, etc.  This
    provides persistence of the options selected in the <b>Options</b>
    menu.  Without an existing <tt>.mozyrc</tt> file, changes are
    discarded.  If the file exists, it will be updated whenever a help
    window is dismissed.
    </dl>

    <dl>
    <dt><b>Set Proxy</b><dd>
    This button will create or manipulate a <tt>.wrproxy</tt> file in
    the user's home directory, which will provide a transport proxy
    url for internet access.  The proxy url will apply in all
    <i>XicTools</i> programs when connecting to the internet.

    <p>
    The <tt>$HOME/.wrproxy</tt> file contains a single line giving the
    internet url of the proxy server.  The proxy server will be used
    to relay internet transactions such as checking for program <a
    href="update">updates</a>, obtaining data or input files via http
    or ftp transport, and general internet access.

    <p>
    One can create a <tt>.wrproxy</tt> file by hand with a text
    editor.  The general form is
    <blockquote>
    <tt>http://</tt><i>username</i><tt>:</tt><i>password</i><tt>@</tt><i>proxy.mydomain.com</i><tt>:</tt><i>port</i>
    </blockquote>
    The format must be <tt>http</tt>, <tt>https</tt> is not supported
    at present.  The <i>username</i> and <i>password</i> if needed are
    specified as shown, using the colon '<tt>:</tt>' and at-sign
    '<tt>@</tt>' as separators.  The address can be a numeric ip quad,
    or a standard internet address.  The port number is appended
    following a colon.  No white space is allowed within the text.

    <p>
    When the menu button is pressed, a pop-up appears that solicits
    the proxy address.  Here, the address is the complete token, as
    described above, but possibly without the port.  The port number
    can be passed as a trailing number separated by white space, if it
    is not already given (separated by a colon).  If no port number
    is given, the system will assume use of port number 80.

    <p>
    If the entry area is empty, any existing <tt>.wrproxy</tt> file
    will be moved to "<tt>.wrproxy.bak</tt>" in the user's home
    directory, effectively disabling use of a proxy.  The behavior
    will be identical if the address consists of a hyphen
    '<tt>-</tt>'.  An existing <tt>.wrproxy.bak</tt> file will be
    overwritten.  If the hyphen is followed by some non-space
    characters, the <tt>.wrproxy</tt> file will be moved to a new file
    where the given characters serve as a suffix following a period. 
    For example, if <tt>-ZZ</tt> is given, the new file would be
    "<tt>.wrproxy.ZZ</tt>" in the user's home directory.  An existing
    file of that name will be overwritten.

    <p>
    If the argument consists of only a plus sign '<tt>+</tt>', if a
    file named "<tt>.wrproxy.bak</tt>" exists in the user's home
    directory, it will be moved to <tt>.wrproxy</tt>.  An existing
    <tt>.wrproxy</tt> will be overwritten.  If the '<tt>+</tt>' is
    followed by some non-space characters, the command will look for a
    file where the characters are used as a suffix, as above, and if
    found the file will be moved to <tt>.wrproxy</tt>.

    <p>
    Only the <tt>.wrproxy</tt> file will provide a proxy url, the
    other files are ignored.  The renamed files provide convenient
    storage, for quickly switching between proxys, or no proxy.

    <p>
    Otherwise, if an address is given, it must start with
    "<tt>http:</tt>" or an error will result.
    </dl>

    <dl>
    <dt><b>Search Database</b><dd>
    The <b>Search Database</b> button in the <b>Options</b> menu
    brings up a dialog which solicits a regular expression to use as a
    search key into the help database.  The regular expression syntax
    follows POSIX 1003.2 extended format (roughly that used by the
    unix <tt>egrep</tt> command).  The search is case-insensitive. 
    When the search is complete, a new display appears, with the
    database entries which contained a match listed in the
    "References" field.  The library functions which implement the
    regular expression evaluation differ slightly between systems. 
    Further information can be found in the Unix manual pages for
    "regex".
    </dl>

    <dl>
    <dt><b>Find Text</b><dd>
    The <b>Find Text</b> command enables searching for text in the
    window.  A dialog window appears, into which a regular expression
    is entered.  Text matching the regular expression, if any, is
    selected and scrolled into view, on pressing one of the blue
    up/down arrow buttons.  The down arrow searches from the text
    shown at the top of the window to the end of the document, and
    will highlight the first match found, and bring it into view if
    necessary.  The up button will search the text starting with that
    shown at the bottom of the window to the start of the document, in
    reverse order.  Similarly, it will highlight and possibly scroll
    to the first match found.  The buttons can be pressed repeatedly
    to visit all matches.
    </dl>

    <dl>
    <dt><b>Default Colors</b><dd>
    The <b>Default Colors</b> button in the <b>Options</b> menu brings
    up the <b>Default Colors</b> panel, from which the default colors
    used in the display may be set.  The entries provide defaults
    which are used when the document being displayed does not provide
    alternative values (in a <tt><&#60;body></tt> tag).  The defaults
    apply in general to help text.

    <p>
    The color entries can take a color name, as listed in the listing
    brought up with the <b>Colors</b> button, or a numerical RGB entry
    in any common format.  The entries are the following:

    <dl>
    <dt><b>Background color</b><dd>
    Set the default background color used.
    <dt><b>Background image</b><dd>
    If set to a path to an image file in any standard image format,
    the image is used to tile the background.
    <dt><b>Text color</b><dd>
    The default color to use for text.
    <dt><b>Link color</b><dd>
    The default color to use for un-visited links.
    <dt><b>Visited link color</b><dd>
    The default color to use for visited links.
    <dt><b>Activated link color</b><dd>
    The default color to use for a link over which the user presses
    a mouse button.
    <dt><b>Select color</b><dd>
    The color to use as the background of selected text.  This color can
    not be set from the document.
    <dt><b>Imagemap border color</b><dd>
    The color to use for the border drawn around imagemaps.  This color
    can not be set from the document.
    </dl>

    <p>
    The <b>Colors</b> button brings up a panel which lists available
    named colors.  Clicking on a name in this panel selects it, and
    enters the name into the system clipboard.  The "paste" operation
    can then be used to enter the color name into an entry area.  This
    may vary between systems, typically clicking on an entry area with
    the middle mouse button will paste text from the clipboard.

    <p>
    Pressing the <b>Apply</b> button will apply the new colors to the
    viewer window.  Pressing <b>Dismiss</b> or otherwise retiring the
    panel without pressing <b>Apply</b> will discard changes.  Changes
    made will <b>not</b> be persistent unless the <b>Save Config</b>
    button has been used to create a <tt>.mozyrc</tt> file, as
    mentioned above.
    </dl>

    <dl>
    <dt><b>Set Font</b><dd>
    The <b>Set Font</b> button in the <b>Options</b> menu will bring
    up a font selection pop-up.  One can choose a typeface from among
    those listed in the left panel.  The base size can be selected in
    the right panel.  There are two separate font families used by the
    viewer:  the normal, proportional-spaced font, and a fixed-pitch
    font for preformatted and "typewriter" text.  Pressing
    <b>Apply</b> will set the currently selected font.  The display
    will be redrawn using the new font.

!!IFDEF Xic
    In <i>Xic</i>, there are commands to set the font families:
    <blockquote>
    <a href="!helpfixed"><tt>!helpfixed</tt></a> [ <i>family-size</i> ]<br>
    <a href="!helpfont"><tt>!helpfont</tt></a> [ <i>family-size</i> ]
    </blockquote>
    The format of the <i>family-size</i>argument depends upon the
    version of the GTK toolkit employed.
    </table>
!!ENDIF
    </dl>

    <dl>
    <dt><b>Cache</b> group<dd>
    A disk cache of downloaded pages and images is maintained.  The
    cache is located in the user's home directory under a subdirectory
    named "<tt>.wr_cache</tt>".  The cache files are named
    "<tt>wr_cache</tt><i>N</i>" where <i>N</i> is an integer.  A file
    named "<tt>directory</tt>" in this directory contains a
    human-readable listing of the cache files and the original URLs. 
    The listing consists of a line with internal data, followed by
    data for the cache files.  Each such line has three columns.  The
    first column indicates the file number <i>N</i>.  The second
    column is 0 if the <tt>wr_cache</tt><i>N</i> file exists and is
    complete, 1 otherwise.  The third column is the source URL for the
    file.  The number of files saved is limited, defaulting to 64. 
    The cache only pertains to files obtained through HTTP transfer. 
    This directory may also contain a file named "<tt>cookies</tt>"
    which contains a list of cookies received from web sites.

    <p>
    A page will not be downloaded if it exists in the cache, unless
    the modification time of the page is newer than the modification
    time of the cache file.

    <p>
    The <b>Don't Cache</b> button in the <b>Options</b> menu will
    disable caching of downloaded pages and images.

    <p>
    The <b>Clear Cache</b> button in the <b>Options</b> menu will
    clear the internal references to the cache.  The files, however,
    are not cleared.

    <p>
    The <b>Read Cache</b> button in the <b>Options</b> menu will
    clear and reload the internal cache from the files that presently
    exist in the cache directory.

    <p>
    The <b>Show Cache</b> button in the <b>Options</b> menu brings up
    a listing of the URLs in the internal cache.  Clicking on one of
    the URLs in the listing will load that page or image into the
    viewer.  This is particularly useful on a system that is not
    continuously on-line.  One can access the pages while on-line,
    then read them later, from cache, without being on-line.
    </dl>

    <dl>
    <dt><b>No Cookies</b><dd>
    Support is provided for Netscape-style cookies.  Cookies are small
    fragments if information stored by the browser and transmitted to
    or received from the web site.  The <b>No Cookies</b> button in
    the <b>Options</b> menu will disable sending and receiving
    cookies.  With cookies, it is possible to view certain web sites
    that require registration (for example).  It is also possible to
    view some commerce sites that require cookies.  There is no
    encryption, so it is not a good idea to send sensitive information
    such as credit card numbers.
    </dl>

    <dl>
    <dt><b>Images</b> group<dd>
    Image support is provided for gif, jpeg, png, tiff, xbm, and xpm. 
    Animated gifs are supported as well.  Images found on the local
    file system are always displayed immediately (unless debugging
    options are set in the startup file).  The treatment of images
    that must be downloaded is set by this button group in the
    <b>Options</b> menu.  One and only one of these choices is active. 
    If <b>No Images</b> is chosen, images that aren't local will not
    be displayed at all.  If <b>Sync Images</b> is chosen, images are
    downloaded as they are encountered.  All downloading will be
    complete before the page is displayed.  If <b>Delayed Images</b>
    is chosen, images are downloaded after the page is displayed.  The
    display will be updated as the images are received.  If
    <b>Progressive Images</b> is chosen, images are downloaded after
    the page is displayed, and images are displayed in sections as
    downloading progresses.
    </dl>

    <dl>
    <dt><b>Anchor</b> group<dd>
    There are choices as to how anchors (the clickable references) are
    displayed.  If the <b>Anchor Plain</b> button in the
    <b>Options</b> menu is selected, anchors will be displayed with
    standard blue text.  If <b>Anchor Buttons</b> is selected, a
    button metaphor will be used to display the anchors.  If <b>Anchor
    Underline</b> is selected, the anchor will consist of underlined
    blue text.  The underlining style can be changed in the
    "<tt>.mozyrc</tt>" startup file.  One and only one of these three
    choices is active.  In addition, if <b>Anchor Highlight</b> is
    selected, the anchors are highlighted when the pointer passes over
    them.
    </dl>

    <dl>
    <dt><b>Bad HTML Warnings</b><dd>
    If the <b>Bad HTML Warnings</b> button in the <b>Options</b> menu
    is active, messages about incorrect HTML format are emitted to
    standard output.
    </dl>

    <dl>
    <dt><b>Freeze Animations</b><dd>
    If the <b>Freeze Animations</b> button in the <b>Options</b> menu
    is active, active animations are frozen at the current frame.  New
    animations will stop after the first frame is shown.  This is for
    users who find animations distracting.
    </dl>

    <dl>
    <dt><b>Log Transactions</b><dd>
    If the <b>Log Transactions</b> button in the <b>Options</b> menu
    is active, the header text emitted and received during HTTP
    transactions is printed on the terminal screen.  This is for
    debugging and hacking.
    </dl>

    <p>
    The <b>Bookmarks</b> menu contains entries to add and delete
    entries, plus a list of entries.  The entries, previously added by
    the user, are help keywords, file names, or URLs that can be
    accessed by selecting the entry.  Thus, frequently accessed pages
    can be saved for convenient access.  Pressing the <b>Add</b>
    button will add the page currently displayed in the viewer to the
    list.  The next time the <b>Bookmarks</b> menu is displayed, the
    topic should appear in the menu.  To remove a topic, the
    <b>Delete</b> button is pressed.  Then, the menu is brought up
    again, and the item to delete is selected.  This will remove the
    item from the menu.  Selecting any of the other items in the menu
    will display the item in the viewer.  The bookmark entries are
    saved in a file named "<tt>bookmarks</tt>" which is located in the
    same directory containing the cache files.
!!LATEX helpview useriface.tex
There are three colored buttons in the menu bar of the viewer.  The
left-facing arrow button (back) will return to the previous topic
shown in the window.  The right-facing arrow button (forward) will
advance to the next topic, if the back button has been used.  The {\cb
Stop} button will stop HTTP transfers in progress.

There are four drop-down menus in the menu bar:  {\cb File}, which
contains basic commands for loading and printing, {\cb Options}, which
contains commands for setting display attributes, {\cb Bookmarks},
which allows saving frequently used references, and {\cb Help} which
provides documentation.

The {\cb File} menu contains the following command buttons.
\begin{description}
\index{help viewer!Open}
\index{help viewer!Open File}
\item{\cb Open}\\
The {\cb Open} button in the {\cb File} menu pops up a dialog into
which a new keyword, URL, or file name can be entered.

\item{\cb Open File}\\
The {\cb Open File} button brings up the {\cb File Selection} panel. 
The {\cb Ok} button (green octagon) on the {\cb File Selection} panel
will load the selected file into the viewer (the file should be a
viewable file).  The file can also be dragged into the viewer from the
{\cb File Selection} panel.

\index{help viewer!Save}
\index{save help text}
\item{\cb Save}\\
The {\cb Save} button in the {\cb File} menu allows the text of the
current window to be saved in a file.  This functionality is also
provided by the {\cb Print} button.  The saved text is pure ASCII.

\index{help viewer!Print}
\index{print help text}
\item{\cb Print}\\
The {\cb Print} button brings up a pop-up which allows the user to
send the help text to a printer, or to a file.  The format of the text
is set by the drop-down menu, with the current setting indicated on
the menu button.  The choices are PostScript in four fonts (Times,
Helvetica, New Century Schoolbook, and Lucida Bright), HTML, or plain
text.  If the {\cb To File} button is active, output goes to that
file, otherwise the command string is executed to send output to a
printer.  If the characters ``{\vt \%s}'' appear in the command
string, they are replaced with the temporary print file name,
otherwise the temporary file name is appended to the string.

\index{help viewer!Reload}
\item{\cb Reload}\\
The {\cb Reload} button in the {\cb File} menu will re-read the input
file and redisplay the contents.  This can be useful when writing new
help text or HTML files, as it will show changes made to the input
file.  However, if you edit a ``{\vt .hlp}'' file, the internally
cached offsets for the topics below the editing point will be wrong,
and will not display correctly.  When developing a help text topic,
placing it in a separate file will avoid this problem.
!!IFDEF Xic
One can also use the {\cb !helpreset} command to update the file
offset table.
!!ENDIF
If the displayed object is a web page, the page will be redisplayed
from the disk cache if it is enabled, rather than being downloaded
again.

\index{help viewer!Old Charset}
\item{\cb Old Charset}\\
The help viewer uses the UTF-8 character set, which is the current
standard international character set.  However, older input sources
may assume another character set, such as ISO-8859, that wll display
some characters incorrectly.  If the user observes that some
characters are missing or wrong in the display, setting this mode
might help.

\index{help viewer!Make FIFO}
\item{\cb <b>Make FIFO}\\
This controls an obscure but unique feature.  When the button is
pressed, a named pipe, or FIFO, is created in the user's home
directory.  The name is ``{\vt mozyfifo}'', or if this name is in use,
an integer suffix is added to make the name unique.  This is a special
type of file, that has the property in this case that text written to
this ``file'' will be parsed and displayed on the viewer screen.

The feature was developed for use in the stand-alone {\vt mozy}
program, for use as a HTML viewer for the {\vt mutt} mail client.  If
an HTML MIME attachment is ``saved'' to the FIFO file, it will be
displayed in the viewer.

The FIFO will be destroyed if this toggle button is pressed a second
time, or when the help window exist normally.  If the program crashes,
the FIFO may be left behind and require manual removal.

\index{help viewer!Quit}
\item{\cb Quit}\\
The {\cb Quit} button in the {\cb File} menu removes the help window.
!!IFDEF Xic
This will exit help mode (where clicking on a command button brings up
help) if there are no other help windows visible.  Pressing the {\cb
Help} button in the {\cb Help Menu} a second time or pressing the {\kb
Esc} key also exits help mode, though the help windows remain visible.
!!ENDIF
\end{description}

The {\cb Options} menu presents a number of configuration and visual
attribute choices to the user.  These are described below.
\begin{description}

\index{help viewer!Save Config}
\index{help viewer!.mozyrc file}
\item{\cb Save Config}\\
The {\cb Save Config} button in the {\cb Options} will save a
configuration file in the user's home directory, named ``{\vt
.mozyrc}''.  This file is read whenever a new help window appears, and
sets various parameters, defaults, etc.  This provides persistence of
the options selected in the {\cb Options} menu.  Without an existing
{\vt .mozyrc} file, changes are discarded.  If the file exists, it
will be updated whenever a help window is dismissed.

\index{help viewer!Set Proxy}
\item{\cb Set Proxy}\\
This button will create or manipulate a {\vt .wrproxy} file in the
user's home directory, which will provide a transport proxy url for
internet access.  The proxy will apply in all {\XicTools} programs
when connecting to the internet.

The {\vt \$HOME/.wrproxy} file contains a single line giving the
internet url of the proxy server.  The proxy server will be used to
relay internet transactions such as checking for program updates,
obtaining data or input files via http or ftp transport, and general
internet access.

One can create a {\vt .wrproxy} file by hand with a text editor.  The
general form is
\begin{quote}
{\vt http://}{\it username\/}{\vt :}{\it password\/}{\vt @}{\it
 proxy.mydomain.com\/}{\vt :}{\it port}
\end{quote}
The format must be {\vt http}, {\vt https} is not supported at
present.  The {\it username} and {\it password} if needed are
specified as shown, using the colon `{\vt :}' and at-sign `{\vt @}' as
separators.  The address can be a numeric ip quad, or a standard
internet address.  The port number is appended following a colon.  No
white space is allowed within the text.

When the menu button is pressed, a pop-up appears that solicits the
proxy address.  Here, the address is the complete token, as described
above, but possibly without the port.  The port number can be passed
as a trailing number separated by white space, if it is not already
given (separated by a colon).  If no port number is given, the system
will assume use of port number 80.

If the entry area is empty, any existing {\vt .wrproxy} file will be
moved to ``{\vt .wrproxy.bak}'' in the user's home directory,
effectively disabling use of a proxy.  The behavior will be identical
if the address consists of a hyphen `{\vt -}'.  An existing {\vt
.wrproxy.bak} file will be overwritten.  If the hyphen is followed by
some non-space characters, the {\vt .wrproxy} file will be moved to a
new file where the given characters serve as a suffix following a
period.  For example, if {\vt -ZZ} is given, the new file would be
``{\vt .wrproxy.ZZ}'' in the user's home directory.  An existing file
of that name will be overwritten.

If the argument consists of only a plus sign `{\vt +}', if a file
named ``{\vt ,wrproxy.bak}'' exists in the user's home directory, it
will be moved to {\vt .wrproxy}.  An existing {\vt .wrproxy} will be
overwritten.  If the `{\vt +}' is followed by some non-space
characters, the command will look for a file where the characters are
used as a suffix, as above, and if found the file will be moved to
{\vt .wrproxy}.

Only the {\vt .wrproxy} file will provide a proxy url, the other files
are ignored.  The renamed files provide convenient storage, for
quickly switching between proxys, or no proxy.

Otherwise, if an address is given, the first argument must start with
``{\vt http:}'' or an error will result.

\index{help viewer!Search Database}
\index{search help database}
\item{\cb Search Database}\\
The {\cb Search Database} button in the {\cb Options} menu brings up a
dialog which solicits a regular expression to use as a search key into
the help database.  The regular expression syntax follows POSIX 1003.2
extended format (roughly that used by the Unix {\vt egrep} command). 
The search is case-insensitive.  When the search is complete, a new
display appears, with the database entries which contained a match
listed in the ``References'' field.  The library functions which
implement the regular expression evaluation differ slightly between
systems.  Further information can be found in the Unix manual pages
for ``regex''.

\index{help viewer!Find Text}
\item{\cb Find Text}\\
The {\cb Find Text} command enables searching for text in the window. 
A dialog window appears, into which a regular expression is entered. 
Text matching the regular expression, if any, is selected and scrolled
into view, on pressing one of the blue up/down arrow buttons.  The
down arrow searches from the text shown at the top of the window to
the end of the document, and will highlight the first match found, and
bring it into view if necessary.  The up button will search the text
starting with that shown at the bottom of the window to the start of
the document, in reverse order.  Similarly, it will highlight and
possibly scroll to the first match found.  The buttons can be pressed
repeatedly to visit all matches.

\index{help viewer!Default Colors}
\item{\cb Default Colors}\\
The {\cb Default Colors} button in the {\cb Options} menu brings up
the {\cb Default Colors} panel, from which the default colors used in
the display may be set.  The entries provide defaults which are used
when the document being displayed does not provide alternative values
(in a {\vt <body>} tag).  The defaults apply in general to help text.

The color entries can take a color name, as listed in the listing
brought up with the {\cb Colors} button, or a numerical RGB entry in
any common format.  The entries are the following:

\begin{description}
\item{\cb Background color}\\
Set the default background color used.

\item{\cb Background image}\\
If set to a path to an image file in any standard image format, the
image is used to tile the background.

\item{\cb Text color}\\
The default color to use for text.

\item{\cb Link color}\\
The default color to use for un-visited links.

\item{\cb Visited link color}\\
The default color to use for visited links.

\item{\cb Activated link color}\\
The default color to use for a link over which the user presses a
mouse button.  

\item{\cb Select color}\\
The color to use as the background of selected text.  This color can
not be set from the document.

\item{\cb Imagemap border color}\\
The color to use for the border drawn around imagemaps.  This color
can not be set from the document.
\end{description}

The {\cb Colors} button brings up a panel which lists available named
colors.  Clicking on a name in this panel selects it, and enters the
name into the system clipboard.  The ``paste'' operation can then be
used to enter the color name into an entry area.  This may vary
between systems, typically clicking on an entry area with the middle
mouse button will paste text from the clipboard.

Pressing the {\cb Apply} button will apply the new colors to the
viewer window.  Pressing {\cb Dismiss} or otherwise retiring the panel
without pressing {\cb Apply} will discard changes.  Changes made will
{\bf not} be persistent unless the {\cb Save Config} button has been
used to create a {\vt .mozyrc} file, as mentioned above.

\index{help viewer!Set Font}
\item{\cb Set Font}\\
The {\cb Set Font} button in the {\cb Options} menu will bring up a
font selection pop-up.  One can choose a typeface from among those
listed in the left panel.  The base size can be selected in the right
panel.  There are two separate font families used by the viewer:  the
normal, proportional-spaced font, and a fixed-pitch font for
preformatted and ``typewriter'' text.  Pressing {\cb Apply} will set
the currently selected font.  The display will be redrawn using the
new font.

!!IFDEF Xic
In {\Xic}, there are commands to set the font families:
\begin{quote}\vt
!helpfixed [{\it family-size\/}]\\
!helpfont [{\it family-size}]
\end{quote}
The format of the {\it family-size} argument depends upon the version
of the GTK toolkit employed.
!!ENDIF

\index{help viewer!disk cache}
\item{{\cb Cache} group}\\
A disk cache of downloaded pages and images is maintained.  The cache
is located in the user's home directory under a subdirectory named
``{\vt .wr\_cache}''.  The cache files are named ``{\vt wr\_cache}{\it
N}''" where {\it N} is an integer.  A file named ``{\vt directory}''
in this directory contains a human-readable listing of the cache files
and the original URLs.  The listing consists of a line with internal
data, followed by data for the cache files.  Each such line has three
columns.  The first column indicates the file number {\it N}.  The
second column is 0 if the {\vt wr\_cache}{\it N} file exists and is
complete, 1 otherwise.  The third column is the source URL for the
file.  The number of files saved is limited, defaulting to 64.  The
cache only pertains to files obtained through HTTP transfer.  This
directory may also contain a file named ``{\vt cookies}'' which
contains a list of cookies received from web sites.

A page will not be downloaded if it exists in the cache, unless the
modification time of the page is newer than the modification time of
the cache file.

\index{help viewer!Don't Cache}
The {\cb Don't Cache} button in the {\cb Options} menu will disable
caching of downloaded pages and images.

\index{help viewer!Clear Cache}
The {\cb Clear Cache} button in the {\cb Options} menu will clear the
internal references to the cache.  The files, however, are not cleared.

\index{help viewer!Reload Cache}
The {\cb Reload Cache} button in the {\cb Options} menu will clear and
reload the internal cache references from the files that presently
exist in the cache directory.

\index{help viewer!Show Cache}
The {\cb Show Cache} button in the {\cb Options} menu brings up a
listing of the URLs in the internal cache.  Clicking on one of the
URLs in the listing will load that page or image into the viewer.
This is particularly useful on a system that is not continuously
on-line.  One can access the pages while on-line, then read them
later, from cache, without being on-line.

\index{help viewer!cookies}
\item{\cb No Cookies}\\
Support is provided for Netscape-style cookies.  Cookies are small
fragments if information stored by the browser and transmitted to or
received from the web site.  The {\cb No Cookies} button in the {\cb  
Options} menu will disable sending and receiving cookies.  With
cookies, it is possible to view certain web sites that require
registration (for example).  It is also possible to view some commerce
sites that require cookies.  There is no encryption, so it is not a
good idea to send sensitive information such as credit card numbers.

\index{help viewer!image formats}
\index{help viewer!No Images}
\index{help viewer!Sync Images}
\index{help viewer!Delayed Images}
\index{help viewer!Progressive Images}
\item{\cb Images} group\\
Image support is provided for gif, jpeg, png, tiff, xbm, and xpm. 
Animated gifs are supported as well.  Images found on the local file
system are always displayed immediately (unless debugging options are
set in the startup file).  The treatment of images that must be
downloaded is set by this button group in the {\cb Options} menu.  One
and only one of these choices is active.  If {\cb No Images} is
chosen, images that aren't local will not be displayed at all.  If
{\cb Sync Images} is chosen, images are downloaded as they are
encountered.  All downloading will be complete before the page is
displayed.  If {\cb Delayed Images} is chosen, images are downloaded
after the page is displayed.  The display will be updated as the
images are received.  If {\cb Progressive Images} is chosen, images
are downloaded after the page is displayed, and images are displayed
in sections as downloading progresses.

\index{help viewer!anchor styles}
\index{help viewer!Anchor Plain}
\index{help viewer!Anchor Buttons}
\index{help viewer!Anchor Underline}
\index{help viewer!Anchor Underline}
\index{help viewer!Anchor Highlight}
\item{\cb Anchor} group\\
There are choices as to how anchors (the clickable references) are
displayed.  If the {\cb Anchor Plain} button in the {\cb Options} menu
is selected, anchors will be displayed with standard blue text.  If
{\cb Anchor Buttons} is selected, a button metaphor will be used to
display the anchors.  If {\cb Anchor Underline} is selected, the
anchor will consist of underlined blue text.  The underlining style
can be changed in the ``{\vt mozyrc}'' startup file.  One and only
one of these three choices is active.  In addition, if {\cb Anchor
Highlight} is selected, the anchors are highlighted when the pointer
passes over them.

\index{help viewer!Bad HTML Warnings}
\item{\cb Bad HTML Warnings}\\
If the {\cb Bad HTML Warnings} button in the {\cb Options} menu is
active, messages about incorrect HTML format are emitted to standard
output.

\index{help viewer!Freeze Animations}
\item{\cb Freeze Animations}\\
If the {\cb Freeze Animations} button in the {\cb Options} menu is
active, active animations are frozen at the current frame.  New
animations will stop after the first frame is shown.  This is for
users who find animations distracting.

\index{help viewer!Log Transactions}
\item{\cb Log Transactions}\\
If the {\cb Log Transactions} button in the {\cb Options} menu is
active, the header text emitted and received during HTTP transactions
is printed on the terminal screen.  This is for debugging and hacking.
\end{description}

The {\cb Bookmarks} menu contains entries to add and delete entries,
plus a list of entries.  The entries, previously added by the user,
are help keywords, file names, or URLs that can be accessed by
selecting the entry.  Thus, frequently accessed pages can be saved for
convenient access.  Pressing the {\cb Add} button will add the page
currently displayed in the viewer to the list.  The next time the {\cb
Bookmarks} menu is displayed, the topic should appear in the menu.  To
remove a topic, the {\cb Delete} button is pressed.  Then, the menu is
brought up again, and the item to delete is selected.  This will
remove the item from the menu.  Selecting any of the other items in
the menu will display the item in the viewer.  The bookmark entries
are saved in a file named ``{\vt bookmarks}'' which is located in the
same directory containing the cache files.

!!SEEALSO
helpsys

!! 031413
!!KEYWORD
helpdb
!!TITLE
The Help Database
!!HTML
    The <i>XicTools</i> help system uses a fast hashed lookup table
    containing cached file offsets to the entry text.  A modular
    database provides flexibility and portability.  The files are
    located by default in the directories named "<tt>help</tt>" under
    the library tree, which is usually rooted at
    <tt>/usr/local/xictools</tt>.  <i>Xic</i> and <i>WRspice</i>
    allow the user to specify the help search path through environment
    variables and/or startup files.  All of the files with suffix
    <tt>.hlp</tt> in the directories along the help search path are
    parsed, and reference pointers added to the internal list, the
    first time the help command is issued in the application.  In
    addition, other types of files, such as image files, which are
    referenced in the HTML help text may be present as well.

!!IFDEF Xic
    <p>
    The help <a href="xicpaths">search path</a> can be set in the <a
    href="xic:env">environment</a> with the variable
    <tt>XIC_HLP_PATH</tt>, and/or may be set in the <a
    href="techfile">technology file</a>.  The information on a given
    keyword can be accessed at any time using the "shell escape"
    command "<tt>!help</tt> <i>keyword</i>" in the prompt window.
!!ENDIF

    <p>
    The "<tt>.hlp</tt>" files have a simple <a
    href="helpfiles">format</a> allowing users to create and modify
    them.  Each help item is indexed by a keyword which should be
    unique in the database.  The help text may be in HTML or plain
    text format.
!!LATEX helpdb useriface.tex
The {\XicTools} help system uses a fast hashed lookup table
containing cached file offsets to the entry text.  A modular database
provides flexibility and portability.  The files are located by
default in the directories named ``{\vt help}'' under the library
tree, which is usually rooted at {\vt /usr/local/xictools}.  {\Xic}
and {\WRspice} allow the user to specify the help search path through
environment variables and/or startup files.  All of the files with
suffix ``{\vt .hlp}'' in the directories along the help search path
are parsed, and reference pointers added to the internal list, the
first time the help command is issued in the application.  In
addition, other types of files, such
as image files, which are referenced in the HTML help text may be
present as well.

!!IFDEF Xic
The help search path can be set in the environment with the variable
{\et XIC\_HLP\_PATH}, and/or may be set in the technology file.  The
information on a given keyword can be accessed at any time using the
``shell escape'' command ``{\cb !help} {\it keyword}'' in the prompt
window.
!!ENDIF

The ``{\vt .hlp}'' files have a simple format allowing users to create
and modify them.  Each help item is indexed by a keyword which should
be unique in the database.  The help text may be in HTML or plain text
format.  The format is described in \ref{helpfiles}.

!!SEEALSO
helpsys

!! 031413
!!KEYWORD
helpforms
!!TITLE
Help System Forms Processing
!!HTML
    Support is provided for HTML forms.
!!IFDEF Xic
    In <i>Xic</i>, HTML forms can be used as input sources for <a
    href="scr:forms">scripts</a>.
!!ENDIF

    <p>
    When the form "Submit" button is pressed, a temporary file is
    created which contains the form output data.  The file consists of
    key/value pairs in the following formats:
    <blockquote>
    <i>name</i>=<i>single_token</i><br>
    <i>name</i>="<i>any text</i>"
    </blockquote>
    There is no white space around '=', and text containing white space is
    double-quoted.  Each assignment is on a separate line.

    <p>
    The action string from the "&#60<tt>form</tt> ...>" tag determines
    how this file is used.  The file is a temporary file, and is
    deleted immediately after use.  If the action string is in the
    form "<tt>action_local_</tt><i>xxxx</i>", then the form data are
    processed internally.

    <p>
    If the full path for the action string begins with
    "<tt>http://</tt>" or "<tt>ftp://</tt>", then the form data are
    encoded into a query string and sent to the location (though it is
    likely an error for ftp).  Otherwise, the file will processed
    locally.  This enables the output from the form to be processed by
    a local shell script or program, which can be very useful.  The
    command given as the action string is given the file contents as
    standard input.  The command standard output will appear in the
    HTML viewer window.  Thus, one can create HTML form front-ends for
    favorite shell commands and programs.
!!LATEX helpforms useriface.tex
Support is provided for HTML forms.
!!IFDEF Xic
In {\Xic}, HTML forms can be used as input sources for scripts.  More
information is available in \ref{htmlforms}.
!!ENDIF

When the form ``Submit'' button is pressed, a temporary file is
created which contains the form output data.  The file consists of
key/value pairs in the following formats:
\begin{quote}
{\it name\/}={\it single\_token}\\
{\it name\/}="{\it any text\/}''
\end{quote}
There is no white space around `=', and text containing white space is
double-quoted.  Each assignment is on a separate line.

The action string from the ``{\vt <form ...>}'' tag determines how   
this file is used.  The file is a temporary file, and is deleted
immediately after use.  If the action string is in the form ``{\vt   
action\_local\_}{\it xxxx\/}'', then the form data are processed
internally.

If the full path for the action string begins with ``{\vt http://}''
or ``{\vt ftp://}'', then the form data are encoded into a query
string and sent to the location (though it is likely an error for
ftp).  Otherwise, the file will processed locally.  This enables the
output from the form to be processed by a local shell script or
program, which can be very useful.  The command given as the action
string is given the file contents as standard input.  The command
standard output will appear in the HTML viewer window.  Thus, one can
create HTML form front-ends for favorite shell commands and programs.

!!SEEALSO
helpsys

!! 031413
!!KEYWORD
helpinit
!!TITLE
Help System Initialization File
!!HTML
    When a help window pops up, an initialization file is read, if it
    exists.  This file is named <a
    href="mozyrcfile"><tt>.mozyrc</tt></a>" and is sought in the
    user's home directory.  This file is not created automatically,
    but is created or overwritten with the <b>Save Config</b> button
    in the <b>Options</b> menu of a help window.  This need be done
    once only.  It should be done if a <tt>.mozyrc</tt> file exists,
    but it is from a release breanch earlier than 4.0.  Once a
    <tt>.mozyrc</tt> file exists, it will be updated when leaving
    help, reflecting any setting changes.

    <p>
    Incidently "mozy" is the name of the stand-alone version of the
    HTML viewer/web browser available on the Whiteley Research web site.
!!LATEX helpinit useriface.tex
When a help window pops up, an initialization file is read, if it
exists.  This file is named ``{\vt .mozyrc}'' and is sought in the
user's home directory.  This file is not created automatically, but is
created or overwritten with the {\cb Save Config} button in the {\cb
Options} menu of a help window.  This need be done once only.  It
should be done if a {\vt .mozyrc} file exists, but it is from a
release breanch earlier than 3.3.  Once a {\vt .mozyrc} file exists,
it will be updated when leaving help, reflecting any setting changes.

Incidently ``mozy'' is the name of the stand-alone version of the HTML
viewer/web browser available on the Whiteley Research web site.

!!SEEALSO
helpfiles

!! 122924
!!KEYWORD
helpfiles
!!TITLE
Help Database Files
!!HTML
    The help information is obtained from database files suffixed with
    <tt>.hlp</tt> found along the help search path.  These directories
    may also contain other files referenced in the help text, such as
    image files. 
!!IFDEF Xic
    In <i>Xic</i>, the help search path can be set in the environment
    with the variable <b>XIC_HLP_PATH</b>, and/or may be set in the
    technology file (the technology file overrides the environment).
!!ENDIF
!!IFDEF WRspice
    In <i>WRspice</i>, the help search path can be set in the
    environment with the variable <b>SPICE_HLP_DIR</b>, and/or may be
    set with the <a href="helppath"><tt>helppath</tt></a> variable,
    which will override the environment.
!!ENDIF
    These files have a simple format, allowing users to create and
    modify them.  Each help entry is associated with one or more
    keywords, which should be unique in the database.
!!IFDEF Xic
    A warning message will be issued on <tt>stderr</tt> if a name
    clash is detected.
!!ENDIF
    The files are ASCII text, either in DOS or Unix format.  Fields
    are separated by keywords which begin with "!!".  Although the
    help system provides rich-text presentation from HTML formatting,
    entries can be in plain text.  A sample plain-text entry has the
    form:

    <blockquote>
    <pre>
    !!KEYWORD
    excmd
    !!TITLE
    Example Command
    !!TEXT
    &#32  This command exists only in this example.
    &#32  Note that the !!keywords only have effect
    &#32  if they start in the first column.  The
    &#32  blank line below is optional.

    !!SUBTOPICS
    akeyword
    anotherkeyword
    !!SEEALSO
    yetanotherkeyword
    </pre>
    </blockquote>

    <p>
    In this example, the keyword "<tt>excmd</tt>" is used to access
    the topic, and should be unique among the database entries
    accessed by the application.  The text which appears in the topic
    (following <tt>!!TEXT</tt>) is shown indented, which is
    recommended for clarity, but is not required.

    <p>
    In <tt>.hlp</tt> files, outside of <tt>!!TEXT</tt> and
    <tt>!!HTML</tt> blocks (described below), lines with '<tt>*</tt>'
    or '<tt>#</tt>' in the first column are ignored, as they are
    assumed to be comments.  Lines that begin in the first column with
    "<tt>!!</tt>(space)" (space character following two exclamation
    points) anywhere are are also ignored, as comments.  Blank lines
    outside of the <tt>!!TEXT</tt> and <tt>!!!HTML</tt> field are
    ignored.  Leading white space is stripped from all lines read,
    which can be a problem for maintaining indentation in formatted
    plain text.  To add a space which will not be stripped, one can
    use the HTML escape "<tt>&#38#32;</tt>".

    <p>
    The following '!!' keywords can appear in <tt>.hlp</tt> files. 
    These are recognized only in upper case, and must start in the
    first text column.

    <dl>
    <dt><tt>!!</tt>(space) <i>anything</i><dd>
    A line beginning with two exclamation points followed by a space
    character is ignored.
    </dl>

    <dl>
    <dt><tt>!!KEYWORD</tt> <i>keyword-list</i><dd>
    This keyword signals the start of a new topic.  The
    <i>keyword-list</i> consists of one or more tokens, each of which
    must be unique among all topics in the database.  The words are
    used to identify the topic, and if more than one is listed, the
    additional words are equivalent aliases.  The <i>keyword-list</i>
    may follow <tt>!!KEYWORD</tt> on the same line, or may be listed
    in the following line, in which case <tt>!!KEYWORD</tt> should
    appear alone on the line.

    <p>
    Punctuation is allowed in keywords, only white space characters
    can not be used.  The '<tt>#</tt>' character has special meaning
    and should not be part of a keyword name.  Also, character
    sequences that could be confused with a URL or directory path
    should be avoided.  The latter basically prohibits the '<tt>/</tt>'
    character (and also '<tt>\</tt>' under Windows) from being included in
    keywords.  There are special names starting with '<tt>$</tt>' which are
    expanded to application-specific internal variables, as described
    below.  To avoid any possibility of a clash, it is probably best
    to avoid '<tt>$</tt>' in general keywords.

    <p>
    It is often useful to include a meaningful prefix in keywords to
    ensure uniqueness, for example in <i>Xic</i>, all commands have
    keywords prefixed with "<tt>xic:</tt>".
    </dl>

    <dl>
    <dt><tt>!!TITLE</tt> <i>string</i><dd>
    The <tt>!!TITLE</tt> specifies the title of the topic, and should
    follow the <tt>!!KEYWORD</tt> specification.  The title text can
    appear on the same line following <tt>!!TITLE</tt>, or on the next
    line, in which case <tt>!!TITLE</tt> should appear alone in the
    line.  The title is printed at the top of the topic display, and
    is used in menus of topics.
    </dl>

    <dl>
    <dt><tt>!!TEXT</tt><dd>
    This line signals the beginning of the topic text, which is
    expected to be plain text.  The keyword is mutually exclusive with
    the <tt>!!HTML</tt> keyword.  The lines following <tt>!!TEXT</tt>
    up to the next <tt>!!KEYWORD</tt>, <tt>!!SEEALSO</tt>, or
    <tt>!!SUBTOPICS</tt> line or end of file are read into the display
    window.  The plain text is converted to HTML before being sent to
    the display in the following manner:

    <ol>
    <li>The title text is enclosed in &#60H1>...&#60/H1>
    <li>Each line of text has a &#60BR> appended.
    <li>The subtopics and see-alsos are preceded with added
        &#60H3>Subtopics&#60/H3> and &#60H3>References&#60/H3> lines.
    <li>The subtopics and see-alsos are converted to links of the form
        &#60A HREF="keyword">title&#60/A> where the <i>keyword</i> is
        the database keyword, and the <i>title</i> is the title text
        for the entry.
    </ol>

    <p>
    Note that the text area can contain HTML tags for various things,
    such as images.  Also note that text formatting is taken from the
    help file (the &#60BR> breaks lines), and not reformatted at
    display time.  The <tt>!!HTML</tt> line should be used rather than
    <tt>!!TEXT</tt> if the text requires full HTML formatting.
    </dl>

    <dl>
    <dt><tt>!!HTML</tt><dd>
    This line signals the beginning of the topic text, which is
    expected to be HTML-formatted.  The keyword is mutually exclusive
    with the <tt>!!TEXT</tt> keyword.  The parser understands all of
    the standard HTML 3.2 syntax, and a few 4.0 extensions. 
    References are to keywords found in the database and general URLs. 
    Image (<tt>.gif</tt>, etc.) files can be referenced, and are
    expected to be found along with the <tt>.hlp</tt> files.
    </dl>

    <dl>
    <dt><tt>!!IFDEF</tt> <i>word</i><dd>
    This line can appear in the block of text following
    <tt>!!TEXT</tt> or <tt>!!HTML</tt>.  In conjunction with the
    <tt>!!ELSE</tt> and <tt>!!ENDIF</tt> directives, it allows for the
    conditional inclusion of blocks of text in the topic.  The
    <i>word</i> is one of the special words defined by the
    application.  Presently, the following words are defined:
    <dl>
    <dt><tt>Xic</tt><dd>
    Defined when running the <i>Xic</i> program with any feature set.
    <dt><tt>XicII</tt><dd>
    Defined when running the <i>Xic</i> program with the <i>XicII</i>
    feature set.
    <dt><tt>Xiv</tt><dd>
    Defined when running the <i>Xic</i> program with the <i>Xiv</i>
    feature set.
    <dt><tt>WRspice</tt><dd>
    Defined when running the <i>WRspice</i> program.
    <dt><tt>Windows</tt><dd>
    Defined when running under Microsoft Windows.
    </dl>

    <p>
    If <i>word</i> is defined, the text up to the next <tt>!!ELSE</tt>
    or <tt>!!ENDIF</tt> will be included in the topic, and any text
    following an <tt>!!ELSE</tt> up to <tt>!!ENDIF</tt> is discarded. 
    If <i>word</i> is not defined, the text up to the next
    <tt>!!ELSE</tt> or <tt>!!ENDIF</tt> is discarded, and any text
    following an <tt>!!ELSE</tt> is included.  The constructs can be
    nested.  A word that is not recognized or absent is "not defined". 
    Every <tt>!!IFDEF</tt> should have a corresponding <tt>!!ENDIF</tt>.
    The <tt>!!ELSE</tt> is optional.  The <tt>!!SEEALSO</tt> and
    <tt>!!SUBTOPICS</tt> lines can appear within the blocks.

    <p>
    Example:
    <blockquote>
    <pre>
    !!HTML
    &#32   Here is some text.
    !!IFDEF Xic
    &#32   You are reading this in Xic.
    !!ELSE
    !!IFDEF WRspice
    &#32   You are reading this in WRspice.
    !!ELSE 
    &#32   You are not reading this in Xic or WRspice.
    !!ENDIF
    !!ENDIF
    </pre>
    </blockquote>
    </dl>

    <dl>
    <dt><tt>!!IFNDEF</tt> <i>word</i><dd>
    This keyword can appear in the block of text following
    <tt>!!TEXT</tt> or <tt>!!HTML</tt>.  It is similar to <tt>!!IFDEF</tt>
    but has the reverse logic.
    </dl>

    <dl>
    <dt><tt>!!ELSE</tt><dd>
    This keyword can follow <tt>!!IFDEF</tt> or <tt>!!IFNDEF</tt> and
    defines the start of a block of text to include in the topic if the
    condition is not satisfied.
    </dl>

    <dl>
    <dt><tt>!!ENDIF</tt><dd>
    This keyword terminates the text blocks to be conditionally included
    in the topic, using <tt>!!IFDEF</tt> or <tt>!!IFNDEF</tt>.
    </dl>

    <dl>
    <dt><tt>!!PROTECT</tt>, <tt>!!UNPROTECT</tt><dd>
    Lines following <tt>!!PROTECT</tt> are ignored until an
    <tt>!!UNPROTECT</tt> line is seen.  This is a means to hide text in
    the file from the parser.
    </dl>

    <dl>
    <dt><tt>!!LATEX</tt> <i>keyword</i> <i>filename</i><dd>
    This signifies the start of a latex block, and should immediately
    follow an HTML or TEXT block.  It is for use with the
    <a href="hlp2latex"><b>hlp2latex</b></a> utility to include
    LaTex versions of the help text in the file.
    </dl>

    <dl>
    <dt><tt>!!INCLUDE</tt> <i>filename</i><dd>
    The keyword may appear in the text following <tt>!!TEXT</tt> or
    <tt>!!HTML</tt>.  When encountered in the text to be included in
    the topic, the text of <i>filename</i>, which is searched for in
    the help search path if not an absolute pathname, is added to the
    displayed text of the current topic.  There is no modification of
    the text from <i>filename</i>.

    <p>
    If the filename is a relative path to a subdirectory of one of the
    directories of a directory in the help search path, the
    subdirectory is added to the search list.  Thus, an HTML document
    and associated gif files can be placed in a separate subdirectory
    in the help tree.  The HTML document can be referenced from the
    main help files with a <tt>!!INCLUDE</tt> directive, and there is
    no need to explicitly change the help search path.
    </dl>

    <dl>
    <dt><tt>!!REDIRECT</tt> <i>keyword</i> <i>target</i><dd>
    This will define <i>keyword</i> as an alias for <i>target</i>. 
    The <i>target</i> can be any input token recognizable by the help
    system, including URLs, named anchors, and local files.  For
    example:
    <blockquote>
    <tt>!!REDIRECT nyt http://www.nytimes.com</tt>
    </blockquote>
    Giving "<tt>!help nyt</tt>" in <i>Xic</i> or "<tt>help nyt</tt>"
    in <i>WRspice</i> will bring up a help window containing the New
    York Times web page.
    </dl>

    <dl>
    <dt><tt>!!SEEALSO</tt> <i>keyword-list</i><dd>
    This keyword, if used, is expected to be found at the end of the
    topic text.  The <i>keyword-list</i> consists of a list of
    keywords that are expected to be defined by <tt>!!KEYWORD</tt>
    lines elsewhere in the database.  A menu of these items is
    displayed at the bottom of the topic text, under the heading
    "References".  The keywords specified after <tt>!!SEEALSO</tt> can
    appear on the same line separated with space, or on multiple lines
    that follow.  If a keyword in the list is not found in the
    database, it is silently ignored.  The keywords listed <i>must</i>
    be given in a <tt>!!KEYWORD</tt> line, and not contain named
    anchor references (violating entries are silently ignored).
    </dl>

    <dl>
    <dt><tt>!!SUBTOPICS</tt> <i>keyword-list</i><dd>
    This keyword, if used, is expected to be found at the end of the
    topic text.  This produces a menu of the topics found in the
    <i>keyword-list</i> very similar to <tt>!!SEEALSO</tt>, however
    under the heading "Subtopics".  This can be used in addition to
    <tt>!!SEEALSO</tt>, the order is unimportant.
    </dl>

    The following definitions supply header and footer text which will
    be applied to each page.  These should be defined at most once
    each in the database.

    <dl>
    <dt><tt>!!HEADER</tt><dd>
    The text that follows, up until the next <tt>!!KEYWORD</tt> or
    <tt>!!FOOTER</tt>, is saved for inclusion in each page composed
    from the <tt>!!HTML</tt> lines for database keywords.  The header
    is inserted at the top of the page.  There can be only one header
    defined, and if more than one are found in the help files, the
    first one read will be used.

    <p>
    In the header text, the literal token <tt>%TITLE%</tt> is replaced
    with the <tt>!!TITLE</tt> text of the current topic when
    displayed.
    </dl>

    <dl>
    <dt><tt>!!FOOTER</tt><dd>
    The text that follows, up until the next <tt>!!KEYWORD</tt> or
    <tt>!!HEADER</tt>, is saved for inclusion in each page composed
    from the <tt>!!HTML</tt> lines for database keywords.  The footer
    is inserted at the bottom of the page.  There can be only one
    footer defined, and if more than one are found in the help files,
    the first one read will be used.
    </dl>

    The following keywords inplement a means to mark topics that are
    from imported or supplemental files.  For example, in <i>Xic</i>,
    many of the <i>WRspice</i> help files are included for reference
    and to satisfy links in the <i>Xic</i> help files.  There is a
    need to mark these pages as applying to the <i>WRspice</i>
    program, otherwise the information could be confusing.  In the
    <i>Xic</i> help system, the pages from <i>WRspice</i> have a
    banner just below the header identifying the topic as applying to
    <i>WRspice</i>.

    <dl>
    <dt><tt>!!MAINTAG</tt> <i>tagname</i><dd>
    This keyword should appear once in the database, probably defined
    along with the header/footer.  The <i>tagname</i> is an arbitrary
    short keyword which identifies the database, such as "<tt>Xic</tt>".
    </dl>

    <dl>
    <dt><tt>!!TAG</tt> <i>tagname</i><dd>
    This should be given at the top of each help file in the database. 
    Those files that are part if the main database should have the
    same <i>tagname</i> as was given to <tt>!!MAINTAG</tt>.  Files
    containing supplemental information should have some other
    <i>tagname</i>, e.g., "<tt>WRspice</tt>".
    </dl>

    <dl>
    <dt><tt>!!TAGTEXT</tt> <i>tagname</i><dd>
    This should be given once only in the database, probably where the
    <tt>!!MAINTAG</tt> is defined.  It is followed by HTML text, in
    the manner of the header and footer.  This text will be inserted
    just below the header in topic pages that come from files with
    tags that differ from the main tag.  For this to happen, both the
    tag and main tag must have been defined.  In the text, the token
    "<tt>%TAG%</tt>" will be replaced with the actual tag that applies
    to the topic.
    </dl>

    <H2>Anchor Text</h2>

    Clickable references in the HTML text have the usual form:
    <blockquote>
    &#60a href="<i>something</i>"><i>highlighted text</i>&#60/a>
    </blockquote>
    Here, "<i>something</i>" can be a help database keyword or an
    ordinary URL.

    <p>
    One can use named anchors in help keywords.  This means that the
    '<tt>#</tt>' symbol is holy, and should not be used in help
    keywords.  The named anchors can appear in the <tt>!!HTML</tt>
    part of the help database entries in the usual HTML way, e.g.

    <pre>
    !!KEYWORD
    somekeyword
    ...
    !!HTML
    &#32    ...
    &#32    &#60a name="refname">some text&#60/a>
    </pre>

    <p>
    Then, referencing forms like "<tt>!help somekeyword#refname</tt>" and
    &#60<tt>a href="somekeyword#refname">blather</tt>&#60<tt>/a></tt> will
    bring up the "somekeyword" topic, but with "some text" at the top of
    the help window, rather than the start of the document.

    <p>
    There is an additional capability:  '<tt>$</tt>' expansion.  Words
    found in anchor text that begin with a dollar sign ('<tt>$</tt>')
    character may be replaced by either a path related to the program,
    the value of a variable saved in the program, or the value of an
    environment variable.  The character that immediately follows the
    word can not be alphanumeric.

    <p>
    This replacement is handled by a callback to the application, but
    both <i>Xic</i> (and its derivatives) and <i>WRspice</i> support
    the following keywords and behavior.

    <dl>
    <dt><tt>$PROGROOT</tt><dd>
    This word is replaced by the full path to the program installation
    directory, for example "<tt>/usr/local/xictools/xic</tt>".
    <dt><tt>$HELP</tt><dd>
    This word is replaced by <tt>$PROGROOT/help</tt>, meaning the same
    directory as <tt>$PROGROOT</tt> suffixed with <tt>/help</tt>.
    <dt><tt>$EXAMPLES</tt><dd>
    This word is replaced by <tt>$PROGROOT/examples</tt>, as above.
    <dt><tt>$DOCS</tt><dd>
    This word is replaced by <tt>$PROGROOT/docs</tt>, as above.
    <dt><tt>$SCRIPTS</tt><dd>
    This word is replaced by <tt>$PROGROOT/scripts</tt>, as above.
    </dl>

    If there is no match to these words, the word, without the dollar
    sign, is checked against the variable database.  If a variable is
    set with the same name, the string value of the variable replaces
    the word.  If there is no match, but the word without the dollar
    sign matches tne name of an environment variable, the value of the
    environment variable will replace the word.  If there is no match,
    there is no substitution.  Substitutions are evaluated
    recursively.

    <p>
    If the first character of an anchor URL is '<tt>~</tt>', the path
    is tilde expanded.  This is done after '<tt>$</tt>' substitution. 
    Tildes denote a user's home directory:  "<tt>~/mydir</tt>" might
    expand to "<tt>/home/yourhome/mydir</tt>", and "<tt>~joe/joesdir</tt>"
    might expand to "<tt>/home/joe/joesdir</tt>", etc.

!!IFDEF Xic
    <p>
    In <i>Xic</i>, one can open input files from anchor text in the
    HTML viewer.  The type of file is recognized by the suffix.  These
    are:

    <table border=1 cellpadding=2 bgcolor="#ffffee">
    <tr><td>CGX    </td><td><tt>.cgx</tt> (.gz may follow)</td></tr>
    <tr><td>GDSII  </td><td><tt>.gds, .str, .strm, .stream</tt>
      (.gz may follow)</td></tr>
    <tr><td>OASIS  </td><td><tt>.oas</tt></td></tr>
    <tr><td>CIF    </td><td><tt>.cif</tt></td></tr>
    <tr><td>Xic    </td><td><tt>.xic</tt></td></tr>
    </table>

    <p>
    The anchor text to open a cell can actually have the following
    syntax.  It can consist of up to three space-separated words.
    <blockquote>
    [<i>sourcetype</i>] <i>sourcename</i> [<i>cellname</i>]
    </blockquote>

    The optional <i>sourcetype</i> can be one of the following literal
    tokens.

    <dl>
    <dt><tt>@XIC</tt><dd>
    The <i>sourcename</i> is the name of a native cell existing either
    in memory or in the search path for cell files, or the name may
    contain a path to the file.  The <i>cellname</i> word is not used.
    </dl>

    <dl>
    <dt><tt>@CHD</tt><dd>
    The <i>sourcename</i> will provide the database name of a <a
    href="xic:hier">cell hierarchy digest</a>.  The <i>cellname</i> if
    used provides the name of a cell to open.  If not given, the CHD's
    default cell will be opened.
    </dl>

    <dl>
    <dt><tt>@LIB</tt><dd>
    The <i>sourcename</i> is a path to an <i>Xic</i> <a
    href="libraries">library</a> file, and the <i>cellname</i> is the
    name of a reference or cell in the library. 
    </dl>

!!IFDEF OpenAccess
    <dl>
    <dt><tt>@OA</tt><dd>
    The <i>sourcename</i> is the name of an <a
    href="oaplugin">OpenAccess</a> library, and the <i>cellname</i>,
    which is required, is the name of a cell in the library.
    </dl>
!!ENDIF

    If no <i>sourcetype</i> is given, the file type is determined
    by the file extension, as listed above.  The optional <i>cellname</i>
    can specify the name of a cell to open.

    <p>
    In addition, if the <i>sourcename</i> has a <tt>.scr</tt> suffix, it is
    taken to be a script file, and is executed.  Thus, one can execute
    <i>Xic</i> scripts by clicking on an anchor.  The referenced
    script is expected to be found somewhere in the <a
    href="xicpaths">script path</a>, or be defined in the technology
    file, if a rooted file path is not provided.

    <p>
    <b>Examples:</b><br>
    One can actually load a layout from another machine.
    <blockquote><tt>
    Click &#60;a href="http://somewhere/lib/cell.gds">here&#60;/a> to view the
    design.
    </tt></blockquote>

    A second argument can specify the cell to open.  The quoting is
    required in this case.
    <blockquote><tt>
    Click &#60;a href="/usr/joe/library/joeslayout.gds joescell">here&#60;/a> to 
    view Joe's cell.
    </tt></blockquote>

    Unless the native cell happens to have a <tt>.xic</tt> file
    name extension, one should use the magic word.
    <blockquote><tt>
    Click &#60;a href="@XIC mynativecell">here&#60;/a> to view
    my native cell.
    </tt></blockquote>

    If the OpenAccess plug-in is loaded, one can access cells from
    OpenAccess libraries.
    <blockquote><tt>
    Click &#60;a href="@OA oalibrary oacell">here&#60;/a> to view
    my OpenAccess cell.
    </tt></blockquote>

    Finally, to execute a script when the user clicks on the link:
    <blockquote><tt>
    Click &#60;a href="myscript.scr">here&#60;/a> to execute myscript.
    </tt></blockquote>
    The script <tt>myscript.scr</tt> must exist somewhere in the
    script path, or be defined in the technology file.  When the user
    clicks on "here", this script will be executed.
!!ENDIF

    <p>
    In <i>WRspice</i>, one can source files from anchor text in the
    HTML viewer, if the achor text consists of a file name with a
    <tt>.cir</tt> extension.  Thus, if one has a circuit file named
    <tt>mycircuit.cir</tt>, and the HTML text in the help window
    contains a reference like
    <blockquote>
    <tt>&#60a html="mycircuit.cir">click here&#60/a></tt>
    </blockquote>
    then clicking on the "click here" tag will source
    <tt>mycircuit.cir</tt> into <i>WRspice</i>.  Similarly, link
    references to files with a plot data extension will be loaded into
    <i>WRspice</i> when the anchor is clicked, as if using the <a
    href="load"><b>load</b></a> command.  The known extensions (which
    of course must match the file type) include "<tt>.raw</tt>" (for
    <a href="rawfilefmt">rawfiles</a>), "<tt>.csv</tt>" (for
    comma-separated data <a href="csvfilefmt">(CSV) files</a>), and
    "<tt>.csdf</tt>" and others for common simulation data format <a
    href="csdffilefmt">(CSDF) files</a>.
!!LATEX helpfiles appendix.tex
The help information is obtained from database files suffixed with
{\vt .hlp} found along the help search path.  These directories may
also contain other files referenced in the help text, such as image
files.

!!PROTECT
!!IFDEF Xic
In {\Xic}, the help search path can be set in the environment with the
variable {\et XIC\_HLP\_PATH}, and/or may be set with the {\vt
helppath} variable, which will override the environment.
!!ENDIF
!!IFDEF WRspice
In {\WRspice}, the help search path can be set in the environment with
the variable {\et SPICE\_HLP\_DIR}, and/or may be set with the {\vt
helppath} variable, which will override the environment.
!!ENDIF
These files have a simple format, allowing users to create and modify
them.  Each help entry is associated with one or more keywords, which
should be unique in the database.
!!IFDEF Xic
A warning message will be issued on {\vt stderr} if a name clash is
detected.
!!ENDIF
The files are ASCII text, either in DOS or Unix format.  Fields are
separated by keywords which begin with ``{\vt !!}''.  Although the
help system provides rich-text presentation from HTML formatting,
entries can be in plain text.  A sample plain-text entry has the
form:

\begin{quote}
\begin{verbatim}
!!KEYWORD
excmd
!!TITLE
Example Command
!!TEXT
    This command exists only in this example.  Note that the
    !!keywords only have effect if they start in the first
    column.  The blank line below is optional.

!!SUBTOPICS
akeyword
anotherkeyword
!!SEEALSO
yetanotherkeyword
\end{verbatim}
\end{quote}

In this example, the keyword ``{\vt excmd}'' is used to access the
topic, and should be unique among the database entries accessed by the
application.  The text which appears in the topic (following {\vt
!!TEXT}) is shown indented, which is recommended for clarity, but is
not required.

In ``{\vt .hlp}'' files, lines anywhere with `{\vt *}' or `{\vt \#}'
in the first column are ignored, as they are assumed to be comments.
Blank lines outside of the {\vt !!TEXT} field are ignored.  Leading
white space is stripped, which can be a problem for maintaining
indentation in formatted plain text.  To add a space which will not be
stripped, use the HTML escape ``{\vt \&\#32;}''.

The following `{\vt !!}' keywords can appear in ``{\vt .hlp}'' files.
These are recognized only in upper case, and must start in the first
text column.

\begin{description}
\item{{\vt !!}(space) {\it anything}}\\
A line beginning with two exclamation points followed by a space
character is ignored.

\item{\vt !!KEYWORD {\it keyword-list}}\\
This keyword signals the start of a new topic.  The {\it keyword-list}
consists of one or more tokens, each of which must be unique among all
topics in the database.  The words are used to identify the topic, and
if more than one is listed, the additional words are equivalent
aliases.  The {\it keyword-list} may follow {\vt !!KEYWORD} on the
same line, or may be listed in the following line, in which case {\vt
!!KEYWORD} should appear alone on the line.

Punctuation is allowed in keywords, only white space characters can
not be used.  The `{\vt \#}' character has special meaning and should
not be part of a keyword name.  Also, character sequences that could
be confused with a URL or directory path should be avoided.  The
latter basically prohibits the `{\vt /}' character (and also
`$\backslash$' under Windows) from being included in keywords.  There
are special names starting with `\$' which are expanded to
application-specific internal variables, as described below.  To avoid
any possibility of a clash, it is probably best to avoid `\$' in
general keywords.

It is often useful to include a meaningful prefix in keywords to
ensure uniqueness, for example in {\Xic}, all commands have keywords
prefixed with ``{\vt xic:}''.

\item{\vt !!TITLE {\it string}}\\
The {\vt !!TITLE} specifies the title of the topic, and should follow
the {\vt !!KEYWORD} specification.  The title text can appear on the
same line following {\vt !!TITLE}, or on the next line, in which case
{\vt !!TITLE} should appear alone in the line.  The title is printed
at the top of the topic display, and is used in menus of topics.

\item{\vt !!TEXT}\\
This line signals the beginning of the topic text, which is expected
to be plain text.  The keyword is mutually exclusive with the {\vt
!!HTML} keyword.  The lines following {\vt !!TEXT} up to the next {\vt
!!KEYWORD}, {\vt !!SEEALSO}, or {\vt !!SUBTOPICS} line or end of file
are read into the display window.  The plain text is converted to HTML
before being sent to the display in the following manner:

\begin{enumerate}\rr
\item The title text is enclosed in {\vt <H1>...</H1>}.
\item Each line of text has a {\vt <BR>} appended.
\item The subtopics and see-alsos are preceded with added
    {\vt <H3>Subtopics</H3>} and {\vt <H3>References</H3>} lines.
\item The subtopics and see-alsos are converted to links of the form
    {\vt <A HREF="{\it keyword\/}">{\it title\/}</A>} where the {\it
    keyword} is the database keyword, and the {\it title} is the title
    text for the entry.
\end{enumerate}

Note that the text area can contain HTML tags for various things, such
as images.  Also note that text formatting is taken from the help file
(the {\vt <BR>} breaks lines), and not reformatted at display time.
The {\vt !!HTML} line should be used rather than {\vt !!TEXT} if the
text requires full HTML formatting.

\item{\vt !!HTML}\\
This line signals the beginning of the topic text, which is expected
to be HTML-formatted.  The keyword is mutually exclusive with the {\vt
!!TEXT} keyword.  The parser understands all of the standard HTML 3.2
syntax, and a few 4.0 extensions.  References are to keywords found in
the database and general URLs.  Image ({\vt .gif}, etc.) files can be
referenced, and are expected to be found along with the {\vt .hlp}
files.

\item{\vt !!IFDEF {\it word}}\\
This line can appear in the block of text following {\vt !!TEXT} or
{\vt !!HTML}.  In conjunction with the {\vt !!ELSE} and {\vt !!ENDIF}
directives, it allows for the conditional inclusion of blocks of text
in the topic.  The {\it word} is one of the special words defined by
the application.  Presently, the following words are defined:

\begin{tabular}{ll}\\
in {\Xic} & {\vt Xic}\\
in {\WRspice} & {\vt WRspice}\\
in either, under Windows & {\vt Windows}\\
\end{tabular}

If {\it word} is defined, the text up to the next {\vt !!ELSE} or {\vt
!!ENDIF} will be included in the topic, and any text following an {\vt
!!ELSE} up to {\vt !!ENDIF} is discarded.  If {\it word} is not
defined, the text up to the next {\vt !!ELSE} or {\vt !!ENDIF} is
discarded, and any text following an {\vt !!ELSE} is included.  The
constructs can be nested.  A word that is not recognized or absent is
``not defined''.  Every {\vt !!IFDEF} should have a corresponding {\vt
!!ENDIF}.  The {\vt !!ELSE} is optional.  The {\vt !!SEEALSO} and {\vt
!!SUBTOPICS} lines can appear within the blocks.

Example:
\begin{verbatim}
!!HTML
   Here is some text.
!!IFDEF Xic
   You are reading this in Xic.
!!ELSE
!!IFDEF WRspice
   You are reading this in WRspice.
!!ELSE
   You are not reading this in Xic or WRspice.
!!ENDIF
!!ENDIF
\end{verbatim}

\item{\vt !!IFNDEF {\it word}}\\
This keyword can appear in the block of text following {\vt !!TEXT} or
{\vt !!HTML}.  It is similar to {\vt !!IFDEF} but has the reverse
logic.

\item{\vt !!ELSE}\\
This keyword can follow {\vt !!IFDEF} or {\vt !!IFNDEF} and defines
the start of a block of text to include in the topic if the condition
is not satisfied.

\item{\vt !!ENDIF}\\
This keyword terminates the text blocks to be conditionally included
in the topic, using {\vt !!IFDEF} or {\vt !!IFNDEF}.

\item{\vt !!PROTECT}, {\vt !!UNPROTECT}}\\
Lines following {\vt !!PROTECT} are ignored until an {\vt !!UNPROTECT}
line is seen.  This is a means to hide text in the file from the
parser.

\item{\vt !!LATEX} {\it keyword} {\it filename}\\
This signifies the start of a latex block, and should immediately
follow an HTML or TEXT block.  It is for use with the {\cb hlp2latex}
utility to include LaTex versions of the help text in the file.

\item{\vt !!INCLUDE {\it filename}}\\
The keyword may appear in the text following {\vt !!TEXT} or {\vt
!!HTML}.  When encountered in the text to be included in the topic,
the text of {\it filename}, which is searched for in the help search
path if not an absolute pathname, is added to the displayed text of
the current topic.  There is no modification of the text from {\it
filename}.

If the filename is a relative path to a subdirectory of one of the
directories of a directory in the help search path, the subdirectory
is added to the search list.  Thus, an HTML document and associated
gif files can be placed in a separate subdirectory in the help tree.
The HTML document can be referenced from the main help files with a
{\vt !!INCLUDE} directive, and there is no need to explicitly change
the help search path.

\item{\vt !!REDIRECT {\it keyword target}}\\
This will define {\it keyword} as an alias for {\it target}.  The {\it
target} can be any input token recognizable by the help system,
including URLs, named anchors, and local files.  For example:
\begin{quote}
{\vt !!REDIRECT nyt http://www.nytimes.com}
\end{quote}
Giving ``{\vt !help nyt}'' in {\Xic} or ``{\vt help nyt}'' in
{\WRspice} will bring up a help window containing the New York Times
web page.

\item{\vt !!HEADER}\\
The text that follows, up until the next {\vt !!KEYWORD} or {\vt
!!FOOTER}, is saved for inclusion in each page composed from the {\vt
!!HTML} lines for database keywords.  The header is inserted at the
top of the page.  There can be only one header defined, and if more
than one are found in the help files, the first one read will be used.

In the header text, the literal token {\vt \%TITLE\%} is replaced with
the {\vt !!TITLE} text of the current topic when displayed.

\item{\vt !!FOOTER}\\
The text that follows, up until the next {\vt !!KEYWORD} or {\vt
!!HEADER}, is saved for inclusion in each page composed from the {\vt
!!HTML} lines for database keywords.  The footer is inserted at the
bottom of the page.  There can be only one footer defined, and if more
than one are found in the help files, the first one read will be used.

\item{\vt !!SEEALSO {\vt keyword-list}}\\
The {\it keyword-list} consists of a list of keywords that are
expected to be defined by {\vt !!KEYWORD} lines elsewhere in the
database.  A menu of these items is displayed at the bottom of the
topic text, under the heading ``References''.  The keywords specified
after {\vt !!SEEALSO} can appear on the same line separated with
space, or on multiple lines.  If a keyword in these lists is not found
in the database, the normal action is to ignore the error.  The
application may provide a debugging mode, whereby unresolved
references will produce a warning message.

\item{\vt !!SUBTOPICS {\it keyword-list}}\\
This produces a menu of the topics found in the {\it keyword-list}
very similar to {\vt !!SEEALSO}, however under the heading
``Subtopics''.  This can be used in addition to {\vt !!SEEALSO}.
\end{description}

%SU-------------------------------------
\subsection{Anchor Text}

Clickable references in the HTML text have the usual form:
\begin{quote}
{\vt <a href="{\it something}">{\it highlighted text}</a>}
\end{quote}
Here, ``{\it something}'' can be a help database keyword or an
ordinary URL.

One can use named anchors in help keywords.  This means that the `{\vt
\#}' symbol is holy, and should not be used in help keywords.  The
named anchors can appear in the {\vt !!HTML} part of the help database
entries in the usual HTML way, e.g.

\begin{verbatim}
!!KEYWORD
somekeyword
...
!!HTML
    ...
    <a name="refname">some text</a>
\end{verbatim}

\begin{flushleft}
Then, referencing forms like ``{\vt !help somekeyword\#refname}'' and
{\vt <a href="somekeyword\#refname">blather</a>} will bring up the
``somekeyword'' topic, but with ``some text'' at the top of the help
window, rather than the start of the document.
\end{flushleft}

There is an additional capability:  `{\vt \$}' expansion.  Words found
in anchor text that begin with a dollar sign (`{\vt \$}') character
may be replaced by either a path related to the program, the value of
a variable saved in the program, or the value of an environment
variable.  The character that immediately follows the word can not be
alphanumeric.

This replacement is handled by a callback to the application, but both
{\Xic} (and its derivatives) and {\WRspice} support the following
keywords and behavior.

\begin{description}
\item{\vt \$PROGROOT}\\
This word is replaced by the full path to the program installation
directory, for example\\ ``{\vt /usr/local/xictools/xic}''.
\item{\vt \$HELP}\\
This word is replaced by {\vt \$PROGROOT/help}, meaning the same
directory as {\vt \$PROGROOT} suffixed with {\vt /help}.
\item{\vt \$EXAMPLES}\\
This word is replaced by {\vt \$PROGROOT/examples}, as above.
\item{\vt \$DOCS}\\
This word is replaced by {\vt \$PROGROOT/docs}, as above.
\item{\vt \$SCRIPTS}\\
This word is replaced by {\vt \$PROGROOT/scripts}, as above.
\end{description}

If there is no match to these words, the word, without the dollar
sign, is checked against the variable database.  If a variable is set
with the same name, the string value of the variable replaces the
word.  If there is no match, but the word without the dollar sign
matches tne name of an environment variable, the value of the
environment variable will replace the word.  If there is no match,
there is no substitution.  Substitutions are evaluated recursively.

If the first character of an anchor URL is `{\vt \symbol{126}}', the
path is tilde expanded.  This is done after `{\vt \$}' substitution. 
Tildes denote a user's home directory:  ``{\vt \symbol{126}/mydir}''
might expand to ``{\vt /home/yourhome/mydir}'', and ``{\vt
\symbol{126}joe/joesdir}'' might expand to ``{\vt
/home/joe/joesdir}'', etc.

!!IFDEF Xic
In {\Xic}, one can open input files from anchor text in the HTML
viewer.  The type of file is recognized by the suffix.  These are:

\begin{tabular}{ll}
CGX    & {\vt .cgx} (.gz may follow)\\
GDSII  & {\vt .gds, .str, .strm, .stream}  (.gz may follow)\\
OASIS  & {\vt .oas}\\
CIF    & {\vt .cif}\\
Xic    & {\vt .xic}\\
\end{tabular}

The anchor text to open a cell can actually have the following syntax.
It can consist of up to three space-separated words.
\begin{quote}
[{\it sourcetype\/}] {\it sourcename} [{\it cellname\/}]
\end{quote}

The optional {\it sourcetype} can be one of the following literal
tokens.
\begin{description}
\item{\vt @XIC}\\
The {\it sourcename} is the name of a native cell existing either in
memory or in the search path for cell files, or the name may contain a
path to the file.  The {\it cellname} word is not used.

\item{\vt @CHD}\\
The {\it sourcename} will provide the database name of a cell
hierarchy digest.  The {\it cellname} if used provides the name of a
cell to open.  If not given, the CHD's default cell will be opened.

\item{\vt @LIB}\\
The {\it sourcename} is a path to an {\Xic} library file, and the {\it
cellname} is the name of a reference or cell in the library.

!!IFDEF OpenAccess
\item{\vt @OA}\\
The {\it sourcename} is the name of an OpenAccess library, and the
{\it cellname}, which is required, is the name of a cell in the
library.
!!ENDIF
\end{description}

If no {\it sourcetype} is given, the file type is determined by the
file extension, as listed above.  The optional {\it cellname} can
specify the name of a cell to open.

In addition, if the {\it sourcename} has a {\vt .scr} suffix, it is
taken to be a script file, and is executed.  Thus, one can execute
{\Xic} scripts by clicking on an anchor.  The referenced script is
expected to be found somewhere in the script path, or be defined in
the technology file, if a rooted file path is not provided.

{\bf Examples:}\\
One can actually load a layout from another machine.
\begin{quote}\vt
Click <a href="http://somewhere/lib/cell.gds">here</a> to view the
design.
\end{quote}

A second argument can specify the cell to open.  The quoting is
required in this case.
\begin{quote}\vt
Click <a href="/usr/joe/library/joeslayout.gds joescell">here</a> to
view Joe's cell.
\end{quote}

Unless the native cell happens to have a {\vt .xic} file name
extension, one should use the magic word.
\begin{quote}\vt
Click <a href="@XIC mynativecell">here</a> to view my native cell.
\end{quote}

If the OpenAccess plug-in is loaded, one can access cells from
OpenAccess libraries.
\begin{quote}\vt
Click <a href="@OA oalibrary oacell">here</a> to view my OpenAccess
cell.
\end{quote}

Finally, to execute a script when the user clicks on the link:
\begin{quote}\vt
Click <a href="myscript.scr">here</a> to execute myscript.
\end{quote}
The script {\vt myscript.scr} must exist somewhere in the script path,
or be defined in the technology file.  When the user clicks on
``here'', this script will be executed.
!!ENDIF

In {\WRspice}, one can source files from anchor text in the HTML
viewer, if the anchor text consists of a file name with a ``{\vt
.cir}'' extension.  Thus, if one has a circuit file named ``{\vt
mycircuit.cir}'', and the HTML text in the help window contains a
reference like
\begin{quote}
{\vt <a html="mycircuit.cir">click here</a>}
\end{quote}
then clicking on the ``click here'' tag will source {\vt
mycircuit.cir} into {\WRspice}.  Similarly, link references to files
with a plot data extension will be loaded into {\WRspice} when the
anchor is clicked, as if using the {\cb load} command.  The known
extensions (which of course must match the file type) include ``{\vt
.raw}'' (for rawfiles), ``{\vt .csv}'' (for comma-separated data (CSV)
files), and ``{\vt .csdf}'' and others for common simulation data
format (CSDF) files.
!!UNPROTECT

!!KEYWORD
mozyrcfile
!!TITLE
HTML Viewer Startup File
!!HTML
    The help system looks for a file named "<tt>.mozyrc</tt>" in the
    user's home directory, which contains keywords which define the
    default behavior of many of the commands and features of the help
    window.  It is necessary to create this file once only by pressing
    the <b>Save Config</b> button in the <b>Options</b> menu of a help
    window.  Once the file exists, it is updated when exiting help
    windows, reflecting any changes in settings.

    <p>
    The <tt>.mozyrc</tt> file is a text file, with comments describing
    the various entries.  Most if not all of the entries correspond to
    settings from within the help window <b>Options</b> menu and
    subsidiary pop-ups.  Although it is easy to edit the file by hand,
    one should take care that the file is not prematurely overwritten
    by a running program.

    <p>
    If you have a <tt>.mozyrc</tt> file installed, you can view it
    by clicking <a href="$HOME/.mozyrc">here</a>.
!!LATEX mozyrcfile appendix.tex
The help system looks for a file named ``{\vt .mozyrc}'' in the user's
home directory, which contains keywords which define the default
behavior of many of the commands and features of the help window. 
This is used only in UNIX/Linux releases.  It is necessary to install
this file if one wants alternate selections from the help window, for
example different fonts, to be persistent.

A sample {\vt .mozyrc} file listing is provided below.  The file can
be found in the {\vt startup} directory in the installation tree,
under the name ``{\vt mozyrc}''.  To install, edit the file if
necessary, then move it to your home directory under the name ``{\vt
.mozyrc}''.

\begin{verbatim}
# This is the startup file which sets defaults for the mozy web browser
# and the Xic/WRspice HTML viewer.  It should be installed as ".mozyrc"
# in the user's home directory, should the user wish to change the
# defaults.

# --- DISPLAY ATTRIBUTES -------------------------------------------------

# Background color used for pages that don't have a <body> tag,
# such as help text (default #e8e8f0)
DefaultBgColor #e8e8f0


# Background image URL to use for pages that don't have a <body> tag
# (no default)
#DefaultBgImage /some/dir/pretty_picture.jpg

# Text color to use for pages that don't have a <body> tag
# (default black)
DefaultFgText black

# Color to use for links in pages without a <body> tag
# (default blue)
DefaultFgLink blue

# How to handle images:
#  0 Don't display images that require downloading
#  1 Download images when encountered in document
#  2 Download images after document is displayed
#  3 Display images progressively after document is displayed (the default)
ImageLoadMode 3

# How to underline anchors when underlining is enabled
#  0 No underline
#  1 Single solid underline (default)
#  2 Double solid underline
#  3 Single dashed underline
#  4 Double dashed underline
AnchorUnderline 1

# If this is set to one (the default) anchors are shown as buttons.  If set
# to zero, anchors use the underlining style
AnchorButtons 0

# If set to one (the default) anchors will be highlighted when the pointer
# passes over them.  If zero, there will be no highlighting
AnchorHighlight 1

# The default font families.  This is the XLFD family name with "-size"
# appended.  Defaults:  adobe-times-normal-p-14   misc-fixed-normal-c-14
FontFamily adobe-times-normal-p-14
FixedFontFamily misc-fixed-normal-*-14

# If set to one, animations are frozen.  If zero (the default) animations
# will be shown normally
FreezeAnimations 0

# --- COMMUNICATIONS -----------------------------------------------------

# Time in seconds allowed for a response from a message (0 for no timeout,
# to 600, default 15)
Timeout 15

# Number of times to retry a message after a timeout (0 to 10, default 4)
Retries 4

# The port number used for HTTP communications (1 to 65536, default 80)
HTTP_Port 80

# The port number used for FTP communications (1 to 65536, default 21)
FTP_Port 21

# --- GENERAL ------------------------------------------------------------

# Number of cache files to save (2 to 4096, default 64)
CacheSize 64

# Set to one to disable disk cache, 0 (the default) enables cache
NoCache 0

# Set to one to disable sending and receiving cookies
NoCookies 0

# --- DEBUGGING ----------------------------------------------------------

# Set this to one to print extended status messages on terminal screen
# (default 0)
DebugMode 0

# Set this to one to print transaction headers to terminal screen
# (default 0)
PrintTransact 0

# Debugging mode for images
#  0 Disable debugging mode (the default)
#  1 Load local images after document is displayed
#  2 Display local images progressively after document is displayed
LocalImageTestMode 0

# Issue warnings about bad HTML syntax to terminal (1) or not (0, the default)
BadHTMLwarnings 0
\end{verbatim}

\input{examples}

!!SEEALSO
helpsys

!! 122924
!!KEYWORD
hlp2latex
!!TITLE
The hlp2latex Utility
!!HTML
    Usage: <tt>hlp2latex</tt> <i>helppath</i> <i>latexdir</i> |
    <i>file</i><tt>.tex.in</tt> ...

    <p>
    This utility creates LaTeX files from LaTeX templates and blocks
    of LaTeX saved in the help system.  By saving both HTML and LaTeX
    in the same place in the help system, it should be easier to keep
    these in sync.

    <p>
    At least two arguments must be provided.  The first argument is a
    path to a directory containing help files.  It is assumed that
    these files contain LaTeX blocks.  These follow HTML or TEXT blocks:
    <blockquote>
      <tt>!!HTML</tt> or <tt>!!TEXT</tt><br>
      &nbsp;<i>HTML or plain text</i>...<br>
      <tt>!!LATEX</tt> <i>keyword</i> <i>latexfile</i><br>
      &nbsp;<i>LaTeX text</i>...
    </blockquote>
    Second or subsequent arguments can be tokenized LaTeX files with
    <tt>.tex.in</tt> extensions, or a directory containing such files.
    In these files, lines with a token starting in the first column in
    the form
    <blockquote>
    &lt;&lt;<i>keyword</i> <i>filename</i>&gt;&gt;
    </blockquote>
    will be replaced with the LaTeX block tagged with the same
    keyword when the LaTeX files are generated.  The LaTeX file name
    is the same as the source file name with the trailing "<tt>.in</tt>"
    stripped.  Other than the tokens described, text is copied verbatim.

    <p>
    The processing is recursive, so that <tt>!!LATEX</tt> blocks can
    contain &lt;&lt;<i>keyword</i> <i>filename</i>&gt;&gt; tokens.
    These are expanded in place recursively when found.

    <p>
    The <tt>!!IFDEF</tt>, <tt>!!IFNDEF</tt>, <tt>!!ELSE</tt>, and
    <tt>!!ENDIF</tt> keywords are recognized in the
    <tt>!!LATEX</tt> blocks and operate the same as in
    <tt>!!HTML</tt> blocks, i.e., allowing conditional inclusions.

    <p>
    <tt>!!LATEX</tt> blocks are terminated by any line that starts
    with "<tt>!!</tt>" that is not one of the conditionals mentioned
    above.  It is usually not necessary to explicitly terminate as
    termination occurs naturally from following <tt>!!SEEALO</tt>,
    <tt>!!KEYWORD</tt> or similar lines.  Termination also occurs
    naturally at the end of the file.
!!LATEX hlp2latex appendix.tex
Usage: {\vt hlp2latex} {\it helppath} {\it latexdir} |
{\it file\/}{\vt .tex.in} ...

This utility creates LaTeX files from LaTeX templates and blocks
of LaTeX saved in the help system.  By saving both HTML and LaTeX
in the same place in the help system, it should be easier to keep
these in sync.

At least two arguments must be provided.  The first argument is a
path to a directory containing help files.  It is assumed that
these files contain LaTeX blocks.  These follow HTML or TEXT blocks:
\begin{quote}
{\vt !!HTML} or {\vt !!TEXT}\\
{\it HTML or plain text}...\\
{\vt !!LATEX} {\it keyword} {\it filename}\\
<i>LaTeX text}...
\end{quote}
Second or subsequent arguments can be tokenized LaTeX files with
{\vt .tex.in} extensions, or a directory containing such files.
In these files, lines with a token starting in the first column in
the form
\begin{quote}
<<{\it keyword} {\it filename\/}>>
\end{quote}
will be replaced with the LaTeX block tagged with the same
keyword when the LaTeX files are generated.  The LaTeX file name
is the same as the source file name with the trailing ``{\vt .in}''
stripped.  Other than the tokens described, text is copied verbatim.

The processing is recursive, so that {\vt !!LATEX} blocks can
contain <<{\it keyword} {\it filename\/}>> tokens.  These are
expanded in place recursively when found.

The {\vt !!IFDEF}, {\vt !!IFNDEF}, {\vt !!ELSE}, and {\vt !!ENDIF}
keywords are recognized in the {\vt !!LATEX} blocks and operate the
same as in {\vt !!HTML} blocks, i.e., allowing conditional inclusions.

{\vt >!!LATEX} blocks are terminated by any line that starts
with ``{\vt !!}'' that is not one of the conditionals mentioned
above.  It is usually not necessary to explicitly terminate as
termination occurs naturally from following {\vt !!SEEALO},
{\vt !!KEYWORD} or similar lines.  Termination also occurs
naturally at the end of the file.

