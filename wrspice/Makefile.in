#######################################################################
LOCATION = wrspice
#######################################################################

DATE = @DATE@
SPICE_VERSION = @SPICE_VERSION@
DEVLIB_VERSION = @DEVLIB_VERSION@

prefix = @prefix@
itopok = @itopok@
CXX = @CXX@
CC = @CC@
LINKCC = @LINKCC@
CFLAGS = @CFLAGSG@ @DYNAMIC_LIBS@ @TOOLKITCFLAGS@ @UFLAGS@ @WITH_X11@ -DWRSPICE
LFLAGS = @LFLAGS@ @TOOLKITLFLAGS@ @UFLAGS@
PIC_OPT = @PIC_OPT@
LSHFLAG = @LSHFLAG@
CURSES = @CURSES@
LIBS = $(CURSES) @LIBS@ @TOOLKITLIBS@ @EXTRALIBS@ $(X_LIB)
STDCLIB = @STDCLIB@
SLIBS = @SLIBS@
OSNAME = @OSNAME@
ARCH = @ARCH@
DIST_SUFFIX = @DIST_SUFFIX@
GRPREF = @GRPREF@
GRPKG = @GRPKG@
DEPEND_PROG = @DEPEND_PROG@ @CFLAGSG@ @DYNAMIC_LIBS@ @TOOLKITCFLAGS@ -DWRSPICE
INSTALL = @INSTALL@
EXESUFFIX = @EXESUFFIX@
FILTER = @FILTER@
MALLOC = @MALLOC@
USESECURE = @USESECURE@
USEMOZY = @USEMOZY@
REGEX = @REGEX@
#DEVLIB_SHARED = @DEVLIB_SHARED_FILE@
DEVLIB_STATIC = @DEVLIB_STATIC_FILE@
DEVLIB_CALL = @DEVLIB_CALL@
SOEXT = @SOEXT@
TOOLROOT = @TOOLROOT@
WINPTHREADFIX = @WINPTHREADFIX@

TKTOOLS = @TKTOOLS@
PSLIBS = @PSLIBS@
WITH_X11 = @WITH_X11@

# Where the binaries go, used to just be bin.
BINDIR = bin/$(GRPKG)

ifdef WITH_X11
X_LIB = -lX11
endif

BUG_ADDR = wrspice@wrcad.com
ANALYSES = op dc tf ac tran pz disto noise sense
SPICE_HOST =
SPICED_LOG = /tmp/wrspiced.log
DEFAULT_EDITOR = xeditor
ASCII_RAWFILE = 1
OPT_CHAR = -
SPICE_NOTICE =

INSTALL_BIN    = $(INSTALL) -s -c -m 0755
INSTALL_SCRIPT = $(INSTALL) -c -m 0755
INSTALL_LIB    = $(INSTALL) -c -m 0644
INSTALL_LIB_RO = $(INSTALL) -c -m 0444

ifdef GRPREF
GRPREF_DIR = src/$(GRPREF)wrs
GRPREF_LIB = src/$(GRPREF)wrs/$(GRPREF)wrs.a
GRPREF_BASELIB = $(BASE)/lib/$(GRPREF)interf.a
endif

SUBDIRS = \
  src/cp src/fte src/analysis src/inp src/ckt src/sparse src/plot \
  $(GRPREF_DIR) src/misc
SUBDIR_LIBS = \
  src/cp/cp.a src/fte/fte.a src/analysis/analysis.a src/inp/inp.a \
  src/ckt/ckt.a src/sparse/sparse.a src/plot/plot.a \
  $(GRPREF_LIB) src/misc/misc.a

BASE = ../xt_base
VLOG = ../vl

ifeq ($(USESECURE), yes)
SECURE = ../secure
SECURELIB = $(SECURE)/secure.a
INCLUDE = -Iinclude -I$(BASE)/include -I$(SECURE)/include
else
INCLUDE = -Iinclude -I$(BASE)/include
endif

ifdef GRPREF
ifeq ($(USEMOZY), yes)
MOZY = ../mozy
MOZYLIBS1 = $(MOZY)/lib/htm.a $(MOZY)/lib/help.a $(MOZY)/lib/$(GRPREF)mozy.a
MOZYLIBS2 = $(MOZY)/lib/htm.a $(MOZY)/lib/help.a $(MOZY)/lib/httpget.a \
  $(MOZY)/lib/imsave.a
endif
endif

LOCAL_LIBS = \
  src/cp/cp.a \
  src/fte/fte.a \
  $(DEVLIB_CALL) \
  src/analysis/analysis.a \
  src/inp/inp.a \
  src/ckt/ckt.a \
  src/sparse/sparse.a \
  src/plot/plot.a \
  $(GRPREF_LIB) \
  $(SECURELIB) \
  $(MOZYLIBS1) \
  $(GRPREF_BASELIB) \
  $(BASE)/lib/ginterf.a \
  $(BASE)/lib/miscutil.a \
  $(MOZYLIBS2) \
  src/misc/misc.a \
  $(VLOG)/libvlog.a \
  $(REGEX)

#######################################################################
####### Executable targets ############################################

TARGETS = $(GRPKG)/wrspice wrspiced csvtoraw multidec proc2mod printtoraw
MMJCO = mmjco/mmjco
all: cptest $(TARGETS) $(MMJCO)

cptest:
	$(MAKE) -C help cptest
	$(MAKE) -C ipc_demo cptest
	$(MAKE) -C src/misc cptest
	$(MAKE) -C src/sparse cptest
	$(MAKE) -C devlib/include cptest
	$(MAKE) -C devlib/adms/include cptest

# Target to edit ADMS files for correct SyntaxLevel (same as release level).
syntaxlevel:
	@a=$$(./release.sh) \
	IFS=. ; set $$a; IFS= ; \
	lvlstr1="SyntaxLevel = $$3"; \
	lvlstr2="SyntaxLevel $$3"; \
	f1=devlib/adms/Makefile; \
	sed -e s/"SyntaxLevel = 0"/"$$lvlstr1"/ < $$f1 > $$f1.tmp; \
	mv -f $$f1.tmp $$f1; \
	f2=devlib/adms/admst/device.xml; \
	sed -e s/"SyntaxLevel 0"/"$$lvlstr2"/ < $$f2.sed > $$f2; \

$(TARGETS)::
	if [ ! -d $(BINDIR) ]; then \
	    mkdir $(BINDIR); \
	fi    
	$(MAKE) bin/$@

ifeq ($(OSNAME), MINGW)

# For Windows, create wrspice with everything in a DLL, so that we can
# link plugins against the DLL.

$(BINDIR)/wrspice: bin/main.cc $(BINDIR)/wrspice.dll
	$(CC) -o $(BINDIR)/wrspice bin/main.cc src/$(GRPREF)wrs/resource.o \
  -L$(BINDIR) -lwrspice

$(BINDIR)/wrspice.dll: bin/wrspice.o $(LOCAL_LIBS) $(MALLOC)
	@echo $@: dynamic link
	@$(LINKCC) $(LSHFLAG) -o $(BINDIR)/wrspice.dll $(LFLAGS) bin/wrspice.o \
  $(LOCAL_LIBS) $(LIBS) $(MALLOC) $(STDCLIB)

else

$(BINDIR)/wrspice: bin/wrspice.o $(LOCAL_LIBS) $(MALLOC)
	@echo $@: dynamic link
	@$(LINKCC) -o $(BINDIR)/wrspice $(LFLAGS) bin/wrspice.o \
  $(LOCAL_LIBS) $(LIBS) $(MALLOC) $(STDCLIB) $(PSLIBS)

endif

bin/wrspiced: bin/wrspiced.o $(BASE)/lib/miscutil.a
	@echo $@: dynamic link
	@$(LINKCC) -o bin/wrspiced $(LFLAGS) bin/wrspiced.o \
  $(BASE)/lib/miscutil.a $(SLIBS) $(STDCLIB) $(WINPTHREADFIX)

bin/csvtoraw: bin/csvtoraw.o $(BASE)/lib/miscutil.a
	@echo $@: dynamic link
	@$(LINKCC) -o bin/csvtoraw bin/csvtoraw.o $(BASE)/lib/miscutil.a \
  $(STDCLIB) $(WINPTHREADFIX)

bin/multidec: bin/multidec.o src/sparse/sparse.a src/misc/misc.a
	@echo $@: dynamic link
	@$(LINKCC) -o bin/multidec bin/multidec.o src/sparse/sparse.a \
  src/misc/misc.a $(CURSES) $(STDCLIB) -lm $(WINPTHREADFIX)

bin/proc2mod: bin/proc2mod.o src/cp/cp.a src/inp/inp.a src/misc/misc.a
	@echo $@: dynamic link
	@$(LINKCC) -o bin/proc2mod bin/proc2mod.o src/cp/cp.a \
  src/inp/inp.a src/misc/misc.a $(STDCLIB) -lm $(WINPTHREADFIX)

bin/printtoraw: bin/printtoraw.o $(BASE)/lib/miscutil.a
	@echo $@: dynamic link
	@$(LINKCC) -o bin/printtoraw bin/printtoraw.o \
  $(BASE)/lib/miscutil.a $(STDCLIB) $(WINPTHREADFIX)

mmjco/mmjco::
	$(MAKE) -C mmjco

#######################################################################
####### Recursively generate libraries ################################

$(DEVLIB_CALL)::
	$(MAKE) -C $(@D)

$(SUBDIR_LIBS)::
	$(MAKE) -C $(@D)

$(VLOG)::
	$(MAKE) -C $(@D)

ifeq ($(USESECURE), yes)
$(SECURE)/secure.a::
	$(MAKE) -C $(@D)
endif

$(MALLOC)::
	$(MAKE) -C $(@D)/../malloc

$(BASE)/lib/ginterf.a::
	$(MAKE) -C $(BASE)/ginterf

ifdef GRPREF
$(BASE)/lib/$(GRPREF)interf.a::
	$(MAKE) -C $(BASE)/$(GRPREF)interf
endif

$(BASE)/lib/miscutil.a::
	$(MAKE) -C $(BASE)/miscutil

$(BASE)/lib/libregex.a::
	$(MAKE) -C $(BASE)/regex

ifdef GRPREF
ifeq ($(USEMOZY), yes)
$(MOZY)/lib/$(GRPREF)mozy.a::
	if [ -d $(MOZY)/src/$(GRPREF)mozy ]; then \
	    $(MAKE) -C $(MOZY)/src/$(GRPREF)mozy ; \
	fi

$(MOZY)/lib/help.a::
	if [ -d $(MOZY)/src/help ]; then \
	    $(MAKE) -C $(MOZY)/src/help ; \
	fi

$(MOZY)/lib/htm.a::
	if [ -d $(MOZY)/src/htm ]; then \
	    $(MAKE) -C $(MOZY)/src/htm ; \
	fi

$(MOZY)/lib/httpget.a::
	if [ -d $(MOZY)/src/httpget ]; then \
	    $(MAKE) -C $(MOZY)/src/httpget ; \
	fi

$(MOZY)/lib/imsave.a::
	if [ -d $(MOZY)/src/imsave ] ; then \
	    $(MAKE) -C $(MOZY)/src/imsave ; \
	fi
endif
endif

#######################################################################
####### Object file targets ###########################################

ifeq ($(USEMOZY), yes)
MOZYINC = -I$(MOZY)/include
endif

DARGS = \
  -DBDCODE="\"`date +%m%d%y-%H%M%S`"\" \
  -DPREFIX="\"$(prefix)\"" \
  -DOSNAME="\"$(OSNAME)\"" \
  -DARCH="\"$(ARCH)\"" \
  -DDIST_SUFFIX="\"$(DIST_SUFFIX)\"" \
  -DTOOLS_ROOT="\"$(TOOLROOT)\"" \
  -DSPICE_VERSION="\"$(SPICE_VERSION)\"" \
  -DDEVLIB_VERSION="\"$(DEVLIB_VERSION)\"" \
  -DSPICE_BUILD_DATE="\"$(DATE)\"" \
  -DSPICE_PROG=\"wrspice\" \
  -DGFX_PROG="\"xic\"" \
  -DBUG_ADDR=\"$(BUG_ADDR)\" \
  -DSPICE_NEWS=\"news\" \
  -DSPICE_EDITOR=\"xeditor\" \
  -DSPICE_OPTCHAR="\"$(OPT_CHAR)\"" \
  -DSPICE_ASCIIRAWFILE="\"$(ASCII_RAWFILE)\"" \
  -DSPICE_HOST="\"$(SPICE_HOST)\"" \
  -DSPICE_DAEMONLOG="\"$(SPICED_LOG)\"" \
  -DSPICE_NOTICE="\"$(SPICE_NOTICE)\"" \
  -DAN_`echo $(ANALYSES) |sed -e "s/ / -DAN_/g"`

# The MSYS2 thing below prevents munging of the prefix path, which will
# cause serious errors when using MSYS2 (Windows only).  We used to
# require a drive letter in the prefix which also fixes this, but that
# breaks the "package" target.
#
bin/wrspice.o: bin/wrspice.cc
	MSYS2_ARG_CONV_EXCL="-DPREFIX=" $(CXX) $(CFLAGS) $(DARGS) \
  $(INCLUDE) $(MOZYINC) -c $*.cc -o $*.o

bin/wrspiced.o: bin/wrspiced.cc
	$(CXX) $(CFLAGS) $(INCLUDE) -c \
  -DPREFIX="\"$(prefix)\"" \
  -DTOOLS_ROOT="\"$(TOOLROOT)\"" \
  -DSPICE_DAEMONLOG="\"$(SPICED_LOG)\"" \
  -DSPICE_PROG="\"wrspice\"" \
  $*.cc -o $*.o

.cc.o:
	$(CXX) $(CFLAGS) $(INCLUDE) -c $*.cc -o $*.o

#######################################################################
####### Dependencies ##################################################

CCFILES = bin/wrspice.cc bin/wrspiced.cc bin/multidec.cc bin/proc2mod.cc \
  bin/printtoraw.cc

depend: syntaxlevel
	@$(MAKE) -C devlib/adms/examples make ;
	@for a in include $(SUBDIRS) devlib help startup; do \
	    $(MAKE) -C $$a depend; \
	done
	@echo depending in $(LOCATION)
	@if [ x$(DEPEND_DONE) = x ]; then \
	    echo DEPEND_DONE = 1 >> Makefile; \
	    for a in $(CCFILES); do \
	      $(DEPEND_PROG) $(INCLUDE) $(MOZYINC) $$a -MT bin/`basename $$a .cc`.o \
  $(FILTER) >> Makefile; \
	    done; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	      $(DEPEND_PROG) $(INCLUDE) $(MOZYINC) bin/main.cc -MT bin/main.o \
  $(FILTER) >> Makefile; \
	    fi; \
	fi

#######################################################################
####### Clean up ######################################################

eclean:
	-@for a in $(TARGETS); do \
	    rm -f bin/$$a$(EXESUFFIX); \
	done
	-@rm -rf $(BINDIR) bin/wrspice$(EXESUFFIX)

clean: eclean
	-@for a in $(SUBDIRS) devlib; do \
	    $(MAKE) -C $$a $@; \
	done
	$(MAKE) -C mmjco clean
	-@rm -f bin/*.o

distclean: eclean
	-@for a in $(SUBDIRS) include devlib packages help startup \
  ipc_demo; do \
	    $(MAKE) -C $$a $@; \
	done
	-@$(MAKE) -C mmjco distclean
	-@rm -f bin/*.o Makefile
	-@rm -f devlib/adms/admst/device.xml
	-@rm -rf bin/QT5 bin/QT6 bin/GTK2 bin/GTK3

ifdef GRPREF
grclean:
	$(MAKE) -C src/$(GRPREF)wrs clean
	$(MAKE) -C ../mozy/src/$(GRPREF)mozy clean
	$(MAKE) -C ../xt_base/$(GRPREF)interf clean
endif

#######################################################################
####### Install into another location #################################

INSTALL_PREFIX ?= $(prefix)
destn = $(INSTALL_PREFIX)/$(TOOLROOT)/wrspice.current
toolbin = $(INSTALL_PREFIX)/$(TOOLROOT)/bin

install: install_wrspice_pkg clean_links install_links install_devkit

install_wrspice_pkg: install_test install_clean install_bin install_help \
  install_icons install_startup install_scripts install_examples install_docs

install_bin:        $(destn)/bin
install_help:       $(destn)/help
install_icons:      $(destn)/icons
install_startup:    $(destn)/startup
install_scripts:    $(destn)/scripts
install_examples:   $(destn)/examples
install_docs:       $(destn)/docs
install_devkit:     $(destn)/devkit
install_cadence:    $(destn)/cadence-oasis

install_test::
	@if [ $(INSTALL_PREFIX) = $(prefix) ]; then \
	    if [ $(itopok) != yes ]; then \
	        echo "No!  Use pagkage to install!"; \
	        exit 1; \
	    fi; \
	fi

# In order to use the Windows mklink command, user must be running with
# Admin privileges, or Developer Mode must be on.  Set this from
# Settings/Update & Security/For Developers

install_links::
	-@if [ -n "$(EXESUFFIX)" ]; then \
	    $(BASE)/util/make_link $(INSTALL_PREFIX)/$(TOOLROOT)/wrspice \
  $(destn); \
	    $(BASE)/util/make_link $(toolbin)/wrspiced$(EXESUFFIX) \
  $(destn)/bin/wrspiced$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/csvtoraw$(EXESUFFIX) \
  $(destn)/bin/csvtoraw$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/multidec$(EXESUFFIX) \
  $(destn)/bin/multidec$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/proc2mod$(EXESUFFIX) \
  $(destn)/bin/proc2mod$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/printtoraw$(EXESUFFIX) \
  $(destn)/bin/printtoraw$(EXESUFFIX); \
	    $(BASE)/util/make_link $(toolbin)/mmjco$(EXESUFFIX) \
  $(destn)/bin/mmjco$(EXESUFFIX); \
	    cp -f $(destn)/bin/wrspice.bat $(toolbin); \
	else \
	    ln -s $(destn) $(INSTALL_PREFIX)/$(TOOLROOT)/wrspice; \
	    ln -s $(destn)/bin/wrspiced $(toolbin)/wrspiced; \
	    ln -s $(destn)/bin/csvtoraw $(toolbin)/csvtoraw; \
	    ln -s $(destn)/bin/multidec $(toolbin)/multidec; \
	    ln -s $(destn)/bin/proc2mod $(toolbin)/proc2mod; \
	    ln -s $(destn)/bin/printtoraw $(toolbin)/printtoraw; \
	    ln -s $(destn)/bin/mmjco $(toolbin)/mmjco; \
	fi
	cp -f $(destn)/bin/wrspice.sh $(toolbin)/wrspice
	chmod 755 $(toolbin)/wrspice

# Under MSYS2, rm deletes Windows links and junctions.

clean_links::
	-@rm -f $(INSTALL_PREFIX)/$(TOOLROOT)/wrspice
	-@rm -f $(toolbin)/wrspiced$(EXESUFFIX)
	-@rm -f $(toolbin)/csvtoraw$(EXESUFFIX)
	-@rm -f $(toolbin)/multidec$(EXESUFFIX)
	-@rm -f $(toolbin)/proc2mod$(EXESUFFIX)
	-@rm -f $(toolbin)/printtoraw$(EXESUFFIX)
	-@rm -f $(toolbin)/mmjco$(EXESUFFIX)
	-@rm -f $(toolbin)/wrspice
	-@if [ -n "$(EXESUFFIX)" ]; then \
	    rm -f $(toolbin)/wrspice.bat; \
	fi    

install_clean::
	-@rm -rf $(destn)

$(destn)/bin::
	@$(BASE)/util/mkdirpth $@
	@for aa in wrspiced csvtoraw multidec proc2mod printtoraw; do \
	    $(INSTALL_BIN) bin/$$aa$(EXESUFFIX) $@; \
	done
	@$(INSTALL_BIN) mmjco/mmjco$(EXESUFFIX) $@
	@$(INSTALL_SCRIPT) bin/wrspice.sh $@
	-@if [ -n "$(EXESUFFIX)" ]; then \
	    cp -f $(BASE)/util/program.bat $@/wrspice.bat; \
	fi
	@if [ -d bin/GTK2 ]; then \
	    mkdir $@/GTK2; \
	    $(INSTALL_BIN) bin/GTK2/wrspice$(EXESUFFIX) $@/GTK2; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	        $(INSTALL_BIN) bin/GTK2/wrspice.dll $@/GTK2; \
	    fi; \
	fi
	@if [ -d bin/QT6 ]; then \
	    mkdir $@/QT6; \
	    $(INSTALL_BIN) bin/QT6/wrspice$(EXESUFFIX) $@/QT6; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	        $(INSTALL_BIN) bin/QT6/wrspice.dll $@/QT6; \
	    fi; \
	elif [ -d bin/QT5 ]; then \
	    mkdir $@/QT5; \
	    $(INSTALL_BIN) bin/QT5/wrspice$(EXESUFFIX) $@/QT5; \
	    if [ -n "$(EXESUFFIX)" ]; then \
	        $(INSTALL_BIN) bin/QT5/wrspice.dll $@/QT5; \
	    fi; \
	fi

$(destn)/icons::
	@$(BASE)/util/mkdirpth $@
	icons=`packages/util/wrspice_files icons`; \
        for a in $$icons; do \
	    $(INSTALL_LIB) icons/$$a $@; \
	done

$(destn)/help::
	$(MAKE) -C help
	@$(BASE)/util/mkdirpth $@ $@/screenshots
	help=`packages/util/wrspice_files help`; \
	for a in $$help; do \
	    if [ $$a == mmjco.txt ]; then \
	        cp -f mmjco/README $@/mmjco.txt; \
	    else \
	        $(INSTALL_LIB) help/$$a $@; \
	    fi \
	done
	helpss=`packages/util/wrspice_files help_screenshots`; \
	for a in $$helpss; do \
	    $(INSTALL_LIB) help/screenshots/$$a $@/screenshots; \
	done

$(destn)/startup::
	$(MAKE) -C startup
	@$(BASE)/util/mkdirpth $@
	startup=`packages/util/wrspice_files startup`; \
	for a in $$startup; do \
	    $(INSTALL_LIB) startup/$$a $@; \
	done
	klulib=`packages/util/wrspice_files klu $(OSNAME)`; \
	if [ -f ../KLU/$$klulib ]; then \
	    $(INSTALL_SCRIPT) ../KLU/$$klulib $@; \
	fi
	$(BASE)/util/mkdirpth $@/devices;
	$(INSTALL_LIB) startup/devices/README $@/devices;
	for a in $(VLOGMODS); do \
	    $(INSTALL_LIB) devlib/adms/examples/$$a/$$a.$(SOEXT) $@/devices; \
	done;

$(destn)/scripts::
	@$(BASE)/util/mkdirpth $@
	scripts=`packages/util/wrspice_files scripts`; \
	for a in $$scripts; do \
	    $(INSTALL_LIB) scripts/$$a $@; \
	done

$(destn)/examples::
	@$(BASE)/util/mkdirpth $@
	examples=`packages/util/wrspice_files examples`; \
	for a in $$examples; do \
	    $(INSTALL_LIB) examples/$$a $@; \
	done
	@$(BASE)/util/mkdirpth $@/JJexamples
	jjex=`packages/util/wrspice_files JJexamples`; \
	for a in $$jjex; do \
	    $(INSTALL_LIB) examples/JJexamples/$$a $@/JJexamples; \
	done
	@$(BASE)/util/mkdirpth $@/JJexamples_old
	jjexo=`packages/util/wrspice_files JJexamples_old`; \
	for a in $$jjexo; do \
	    $(INSTALL_LIB) examples/JJexamples_old/$$a $@/JJexamples_old; \
	done

$(destn)/docs::
	@$(BASE)/util/mkdirpth $@
	docs=`packages/util/wrspice_files docs`; \
	for a in $$docs; do \
	    cp docs/$$a $@; \
	done
	IFS="."; \
	tmp=$(SPICE_VERSION); \
	set -- $$tmp; \
	cp docs/wrs$$1.$$2 $@

$(destn)/devkit::
	@$(BASE)/util/mkdirpth $@/admst
	@$(BASE)/util/mkdirpth $@/include
	$(INSTALL_LIB) devlib/adms/Makefile $@;
	$(INSTALL_LIB) devlib/adms/README $@;
	$(INSTALL_LIB) devlib/adms/README.adms $@;
	admst=`packages/util/wrspice_files admst`; \
	for a in $$admst; do \
	    $(INSTALL_LIB) devlib/adms/admst/$$a $@/admst; \
	done
	incl=`packages/util/wrspice_files devincl`; \
	for a in $$incl; do \
	    $(INSTALL_LIB) devlib/include/$$a $@/include; \
	done
	efiles=`cat packages/util/adms_examples`; \
	edirs=""; last=""; \
	for a in $$efiles; do tifs=$$IFS; IFS=/; set $$a; IFS=$$tifs; \
	    if [ x$$2 != x -a x$$2 != x$$last -a x$$2 != xREADME -a \
	            x$$2 != xMakefile ]; then \
	        last=$$2; edirs="$$edirs $$2"; \
	    fi; \
	done; \
	for a in $$edirs; do \
	    $(BASE)/util/mkdirpth $@/examples/$$a/tests; \
	done; \
	for a in $$efiles; do \
	    $(INSTALL_LIB) devlib/adms/$$a $@/`dirname $$a`; \
	    if [ -f $@/`dirname $$a`/mkmk ]; then \
	        chmod 755 $@/`dirname $$a`/mkmk; \
	    fi \
        done; \
	#for a in $$edirs; do \
	#    mkdir $@/examples/$$a/module_dist; \
	#    cp devlib/adms/examples/$$a/*.$(SOEXT) $@/examples/$$a/module_dist; \
	#done;

$(destn)/cadence-oasis::
	if [ -d cadence-oasis ]; then \
	    cp -pfr cadence-oasis $(destn); \
	fi

uninstall: uninstall_test clean_links

uninstall_test::
	@if [ $(INSTALL_PREFIX) = $(prefix) ]; then \
	    if [ $(itopok) != yes ]; then \
	echo "No!  Use operating system or wr_uninstall script to uninstall!"; \
	        exit 1; \
	    fi; \
	fi

devkit_examples:
	(cd devlib/adms/examples; \
	    for a in */Makefile; do \
	        $(MAKE) -C `dirname $$a` \
	            ADMST=../../admst \
	            ADMSXML=../../../../../adms/adms_wr/admsXml/admsXml \
	            DLL_LOC=../../../../bin/GTK2 \
	            WRSPICE=../../../../bin/GTK2/wrspice realclean module; \
	    done \
        )

package::
	$(MAKE) all
	# $(MAKE) devkit_examples
	$(MAKE) quick_pkg

quick_pkg::
	-rm -rf packages/root
	mkdir packages/root
	$(MAKE) INSTALL_PREFIX=packages/root$(prefix) install_wrspice_pkg
	$(MAKE) INSTALL_PREFIX=packages/root$(prefix) install_devkit
	if [ -n "$(TKTOOLS)" ]; then \
	    $(MAKE) INSTALL_PREFIX=packages/root$(prefix) install_cadence; \
	fi
	$(MAKE) -C packages package

#######################################################################
