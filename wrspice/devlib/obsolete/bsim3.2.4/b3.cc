
/*========================================================================*
 *                                                                        *
 *  Distributed by Whiteley Research Inc., Sunnyvale, California, USA     *
 *                       http://wrcad.com                                 *
 *  Copyright (C) 2017 Whiteley Research Inc., all rights reserved.       *
 *  Author: Stephen R. Whiteley, except as indicated.                     *
 *                                                                        *
 *  As fully as possible recognizing licensing terms and conditions       *
 *  imposed by earlier work from which this work was derived, if any,     *
 *  this work is released under the Apache License, Version 2.0 (the      *
 *  "License").  You may not use this file except in compliance with      *
 *  the License, and compliance with inherited licenses which are         *
 *  specified in a sub-header below this one if applicable.  A copy       *
 *  of the License is provided with this distribution, or you may         *
 *  obtain a copy of the License at                                       *
 *                                                                        *
 *        http://www.apache.org/licenses/LICENSE-2.0                      *
 *                                                                        *
 *  See the License for the specific language governing permissions       *
 *  and limitations under the License.                                    *
 *                                                                        *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      *
 *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES      *
 *   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-        *
 *   INFRINGEMENT.  IN NO EVENT SHALL WHITELEY RESEARCH INCORPORATED      *
 *   OR STEPHEN R. WHITELEY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER     *
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,      *
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE       *
 *   USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
 *                                                                        *
 *========================================================================*
 *               XicTools Integrated Circuit Design System                *
 *                                                                        *
 * WRspice Circuit Simulation and Analysis Tool:  Device Library          *
 *                                                                        *
 *========================================================================*
 $Id:$
 *========================================================================*/

/**********
 * Copyright 2001 Regents of the University of California. All rights reserved.
 * File: b3.c of BSIM3v3.2.4
 * Author: 1995 Min-Chie Jeng and Mansun Chan
 * Author: 1997-1999 Weidong Liu.
 * Author: 2001  Xuemei Xi
 **********/

#include "b3defs.h"


namespace {

// SRW - added units flags
IFparm BSIM3pTable[] = {
IO("l",                 BSIM3_L,            IF_REAL | IF_LEN,
                "Length"),
IO("w",                 BSIM3_W,            IF_REAL | IF_LEN,
                "Width"),
IO("ad",                BSIM3_AD,           IF_REAL | IF_AREA,
                "Drain area"),
IO("as",                BSIM3_AS,           IF_REAL | IF_AREA,
                "Source area"),
IO("pd",                BSIM3_PD,           IF_REAL | IF_LEN,
                "Drain perimeter"),
IO("ps",                BSIM3_PS,           IF_REAL | IF_LEN,
                "Source perimeter"),
IO("nrd",               BSIM3_NRD,          IF_REAL,
                "Number of squares in drain"),
IO("nrs",               BSIM3_NRS,          IF_REAL,
                "Number of squares in source"),
IO("off",               BSIM3_OFF,          IF_FLAG,
                "Device is initially off"),
IO("nqsmod",            BSIM3_NQSMOD,       IF_INTEGER,
                "Non-quasi-static model selector"),
IP("ic",                BSIM3_IC,           IF_REALVEC | IF_VOLT,
                "Vector of DS,GS,BS initial voltages"),
OP("gmbs",              BSIM3_GMBS,         IF_REAL | IF_COND,
                "Gmb"),
OP("gm",                BSIM3_GM,           IF_REAL | IF_COND,
                "Gm"),
OP("gds",               BSIM3_GDS,          IF_REAL | IF_COND,
                "Gds"),
OP("vdsat",             BSIM3_VDSAT,        IF_REAL | IF_VOLT,
                "Vdsat"),
OP("vth",               BSIM3_VON,          IF_REAL | IF_VOLT,
                "Vth"),
OP("id",                BSIM3_CD,           IF_REAL | IF_AMP,
                "Ids"),
OP("vbs",               BSIM3_VBS,          IF_REAL | IF_VOLT,
                "Vbs"),
OP("vgs",               BSIM3_VGS,          IF_REAL | IF_VOLT,
                "Vgs"),
OP("vds",               BSIM3_VDS,          IF_REAL | IF_VOLT,
                "Vds"),

// SRW - added
OP("cd",                BSIM3_ID,           IF_REAL|IF_AMP|IF_USEALL,
                "Drain current"),
OP("cs",                BSIM3_IS,           IF_REAL|IF_AMP|IF_USEALL,
                "Source current"),
OP("cg",                BSIM3_IG,           IF_REAL|IF_AMP|IF_USEALL,
                "Gate current"),
OP("cb",                BSIM3_IB,           IF_REAL|IF_AMP|IF_USEALL,
                "Bulk current"),
OP("icvbs",             BSIM3_IC_VBS,       IF_REAL|IF_VOLT,
                "Vbs initial condition"),
OP("icvgs",             BSIM3_IC_VGS,       IF_REAL|IF_VOLT,
                "Vgs initial condition"),
OP("icvds",             BSIM3_IC_VDS,       IF_REAL|IF_VOLT,
                "Vds initial condition"),
OP("dnode",             BSIM3_DNODE,        IF_INTEGER,
                "Drain node"),
OP("gnode",             BSIM3_GNODE,        IF_INTEGER,
                "Gate node"),
OP("snode",             BSIM3_SNODE,        IF_INTEGER,
                "Source node"),
OP("bnode",             BSIM3_BNODE,        IF_INTEGER,
                "Bulk node"),
OP("dnodeprime",        BSIM3_DNODEPRIME,   IF_INTEGER,
                "Internal drain node"),
OP("snodeprime",        BSIM3_SNODEPRIME,   IF_INTEGER,
                "Internal source node"),
OP("drainconductance",  BSIM3_DRAINCONDUCT, IF_REAL|IF_COND,
                "Drain conductance"),
OP("sourceconductance", BSIM3_SOURCECONDUCT,IF_REAL|IF_COND,
                "Source conductance"),
OP("vbd",               BSIM3_VBD,          IF_REAL|IF_VOLT,
                "Vbd"),
OP("cbs",               BSIM3_CBS,          IF_REAL|IF_AMP,
                "Ibs"),
OP("cbd",               BSIM3_CBD,          IF_REAL|IF_AMP,
                "Ibd"),
OP("gbd",               BSIM3_GBD,          IF_REAL|IF_COND,
                "Gbd"),
OP("gbs",               BSIM3_GBS,          IF_REAL|IF_COND,
                "Gbs"),
OP("qb",                BSIM3_QB,           IF_REAL|IF_CHARGE,
                "Qb"),
OP("cqb",               BSIM3_CQB,          IF_REAL|IF_AMP,
                "Iqb"),
OP("qg",                BSIM3_QG,           IF_REAL|IF_CHARGE,
                "Qg"),
OP("cqg",               BSIM3_CQG,          IF_REAL|IF_AMP,
                "Iqg"),
OP("qd",                BSIM3_QD,           IF_REAL|IF_CHARGE,
                "Qd"),
OP("cqd",               BSIM3_CQD,          IF_REAL|IF_AMP,
                "Iqd"),
OP("cgg",               BSIM3_CGG,          IF_REAL|IF_AMP,
                "Cgg"),
OP("cgd",               BSIM3_CGD,          IF_REAL|IF_AMP,
                "Cgd"),
OP("cgs",               BSIM3_CGS,          IF_REAL|IF_AMP,
                "Cgs"),
OP("cdg",               BSIM3_CDG,          IF_REAL|IF_AMP,
                "Cdg"),
OP("cdd",               BSIM3_CDD,          IF_REAL|IF_AMP,
                "Cdd"),
OP("cds",               BSIM3_CDS,          IF_REAL|IF_AMP,
                "Cds"),
OP("cbg",               BSIM3_CBG,          IF_REAL|IF_AMP,
                "Cbg"),
OP("cbdb",              BSIM3_CBDB,         IF_REAL|IF_AMP,
                "Cbdb"),
OP("cbsb",              BSIM3_CBSB,         IF_REAL|IF_AMP,
                "Cbsb"),
OP("capbd",             BSIM3_CAPBD,        IF_REAL|IF_CAP,
                "CapBD"),
OP("capbs",             BSIM3_CAPBS,        IF_REAL|IF_CAP,
                "CapBS"),
OP("qbs",               BSIM3_QBS,          IF_REAL|IF_CHARGE,
                "Qbs"),
OP("qbd",               BSIM3_QBD,          IF_REAL|IF_CHARGE,
                "Qbd")
};

IFparm BSIM3mPTable[] = {
IO("capmod",            BSIM3_MOD_CAPMOD,   IF_INTEGER,
                "Capacitance model selector"),
IO("mobmod",            BSIM3_MOD_MOBMOD,   IF_INTEGER,
                "Mobility model selector"),
IO("noimod",            BSIM3_MOD_NOIMOD,   IF_INTEGER,
                "Noise model selector"),
IO("paramchk",          BSIM3_MOD_PARAMCHK, IF_INTEGER,
                "Model parameter checking selector"),
IO("binunit",           BSIM3_MOD_BINUNIT,  IF_INTEGER,
                "Bin  unit  selector"),
IO("version",           BSIM3_MOD_VERSION,  IF_STRING,
                "Parameter for model version"),
IO("tox",               BSIM3_MOD_TOX,      IF_REAL,
                "Gate oxide thickness in meters"),

IO("toxm",              BSIM3_MOD_TOXM,     IF_REAL,
                "Gate oxide thickness used in extraction"),
IO("cdsc",              BSIM3_MOD_CDSC,     IF_REAL,
                "Drain/Source and channel coupling capacitance"),
IO("cdscb",             BSIM3_MOD_CDSCB,    IF_REAL,
                "Body-bias dependence of cdsc"),
IO("cdscd",             BSIM3_MOD_CDSCD,    IF_REAL,
                "Drain-bias dependence of cdsc"),
IO("cit",               BSIM3_MOD_CIT,      IF_REAL,
                "Interface state capacitance"),
IO("nfactor",           BSIM3_MOD_NFACTOR,  IF_REAL,
                "Subthreshold swing Coefficient"),
IO("xj",                BSIM3_MOD_XJ,       IF_REAL,
                "Junction depth in meters"),
IO("vsat",              BSIM3_MOD_VSAT,     IF_REAL,
                "Saturation velocity at tnom"),
IO("at",                BSIM3_MOD_AT,       IF_REAL,
                "Temperature coefficient of vsat"),
IO("a0",                BSIM3_MOD_A0,       IF_REAL,
                "Non-uniform depletion width effect coefficient."),
IO("ags",               BSIM3_MOD_AGS,      IF_REAL,
                "Gate bias  coefficient of Abulk."),
IO("a1",                BSIM3_MOD_A1,       IF_REAL,
                "Non-saturation effect coefficient"),
IO("a2",                BSIM3_MOD_A2,       IF_REAL,
                "Non-saturation effect coefficient"),
IO("keta",              BSIM3_MOD_KETA,     IF_REAL,
                "Body-bias coefficient of non-uniform depletion width effect."),
IO("nsub",              BSIM3_MOD_NSUB,     IF_REAL,
                "Substrate doping concentration"),
IO("nch",               BSIM3_MOD_NPEAK,    IF_REAL,
                "Channel doping concentration"),
IO("ngate",             BSIM3_MOD_NGATE,    IF_REAL,
                "Poly-gate doping concentration"),
IO("gamma1",            BSIM3_MOD_GAMMA1,   IF_REAL,
                "Vth body coefficient"),
IO("gamma2",            BSIM3_MOD_GAMMA2,   IF_REAL,
                "Vth body coefficient"),
IO("vbx",               BSIM3_MOD_VBX,      IF_REAL,
                "Vth transition body Voltage"),
IO("vbm",               BSIM3_MOD_VBM,      IF_REAL,
                "Maximum body voltage"),

IO("xt",                BSIM3_MOD_XT,       IF_REAL,
                "Doping depth"),
IO("k1",                BSIM3_MOD_K1,       IF_REAL,
                "Bulk effect coefficient 1"),
IO("kt1",               BSIM3_MOD_KT1,      IF_REAL,
                "Temperature coefficient of Vth"),
IO("kt1l",              BSIM3_MOD_KT1L,     IF_REAL,
                "Temperature coefficient of Vth"),
IO("kt2",               BSIM3_MOD_KT2,      IF_REAL,
                "Body-coefficient of kt1"),
IO("k2",                BSIM3_MOD_K2,       IF_REAL,
                "Bulk effect coefficient 2"),
IO("k3",                BSIM3_MOD_K3,       IF_REAL,
                "Narrow width effect coefficient"),
IO("k3b",               BSIM3_MOD_K3B,      IF_REAL,
                "Body effect coefficient of k3"),
IO("w0",                BSIM3_MOD_W0,       IF_REAL,
                "Narrow width effect parameter"),
IO("nlx",               BSIM3_MOD_NLX,      IF_REAL,
                "Lateral non-uniform doping effect"),
IO("dvt0",              BSIM3_MOD_DVT0,     IF_REAL,
                "Short channel effect coeff. 0"),
IO("dvt1",              BSIM3_MOD_DVT1,     IF_REAL,
                "Short channel effect coeff. 1"),
IO("dvt2",              BSIM3_MOD_DVT2,     IF_REAL,
                "Short channel effect coeff. 2"),
IO("dvt0w",             BSIM3_MOD_DVT0W,    IF_REAL,
                "Narrow Width coeff. 0"),
IO("dvt1w",             BSIM3_MOD_DVT1W,    IF_REAL,
                "Narrow Width effect coeff. 1"),
IO("dvt2w",             BSIM3_MOD_DVT2W,    IF_REAL,
                "Narrow Width effect coeff. 2"),
IO("drout",             BSIM3_MOD_DROUT,    IF_REAL,
                "DIBL coefficient of output resistance"),
IO("dsub",              BSIM3_MOD_DSUB,     IF_REAL,
                "DIBL coefficient in the subthreshold region"),
IO("vth0",              BSIM3_MOD_VTH0,     IF_REAL,
                "Threshold voltage"),
IO("vtho",              BSIM3_MOD_VTH0,     IF_REAL,
                "Threshold voltage"),
IO("ua",                BSIM3_MOD_UA,       IF_REAL,
                "Linear gate dependence of mobility"),
IO("ua1",               BSIM3_MOD_UA1,      IF_REAL,
                "Temperature coefficient of ua"),
IO("ub",                BSIM3_MOD_UB,       IF_REAL,
                "Quadratic gate dependence of mobility"),
IO("ub1",               BSIM3_MOD_UB1,      IF_REAL,
                "Temperature coefficient of ub"),
IO("uc",                BSIM3_MOD_UC,       IF_REAL,
                "Body-bias dependence of mobility"),
IO("uc1",               BSIM3_MOD_UC1,      IF_REAL,
                "Temperature coefficient of uc"),
IO("u0",                BSIM3_MOD_U0,       IF_REAL,
                "Low-field mobility at Tnom"),
IO("ute",               BSIM3_MOD_UTE,      IF_REAL,
                "Temperature coefficient of mobility"),
IO("voff",              BSIM3_MOD_VOFF,     IF_REAL,
                "Threshold voltage offset"),
IO("tnom",              BSIM3_MOD_TNOM,     IF_REAL,
                "Parameter measurement temperature"),
IO("cgso",              BSIM3_MOD_CGSO,     IF_REAL,
                "Gate-source overlap capacitance per width"),
IO("cgdo",              BSIM3_MOD_CGDO,     IF_REAL,
                "Gate-drain overlap capacitance per width"),
IO("cgbo",              BSIM3_MOD_CGBO,     IF_REAL,
                "Gate-bulk overlap capacitance per length"),
IO("xpart",             BSIM3_MOD_XPART,    IF_REAL,
                "Channel charge partitioning"),
IO("elm",               BSIM3_MOD_ELM,      IF_REAL,
                "Non-quasi-static Elmore Constant Parameter"),
IO("delta",             BSIM3_MOD_DELTA,    IF_REAL,
                "Effective Vds parameter"),
IO("rsh",               BSIM3_MOD_RSH,      IF_REAL,
                "Source-drain sheet resistance"),
IO("rdsw",              BSIM3_MOD_RDSW,     IF_REAL,
                "Source-drain resistance per width"),

IO("prwg",              BSIM3_MOD_PRWG,     IF_REAL,
                "Gate-bias effect on parasitic resistance"),
IO("prwb",              BSIM3_MOD_PRWB,     IF_REAL,
                "Body-effect on parasitic resistance"),

IO("prt",               BSIM3_MOD_PRT,      IF_REAL,
                "Temperature coefficient of parasitic resistance"),
IO("eta0",              BSIM3_MOD_ETA0,     IF_REAL,
                "Subthreshold region DIBL coefficient"),
IO("etab",              BSIM3_MOD_ETAB,     IF_REAL,
                "Subthreshold region DIBL coefficient"),
IO("pclm",              BSIM3_MOD_PCLM,     IF_REAL,
                "Channel length modulation Coefficient"),
IO("pdiblc1",           BSIM3_MOD_PDIBL1,   IF_REAL,
                "Drain-induced barrier lowering coefficient"),
IO("pdiblc2",           BSIM3_MOD_PDIBL2,   IF_REAL,
                "Drain-induced barrier lowering coefficient"),
IO("pdiblcb",           BSIM3_MOD_PDIBLB,   IF_REAL,
                "Body-effect on drain-induced barrier lowering"),
IO("pscbe1",            BSIM3_MOD_PSCBE1,   IF_REAL,
                "Substrate current body-effect coefficient"),
IO("pscbe2",            BSIM3_MOD_PSCBE2,   IF_REAL,
                "Substrate current body-effect coefficient"),
IO("pvag",              BSIM3_MOD_PVAG,     IF_REAL,
                "Gate dependence of output resistance parameter"),
IO("js",                BSIM3_MOD_JS,       IF_REAL,
                "Source/drain junction reverse saturation current density"),
IO("jsw",               BSIM3_MOD_JSW,      IF_REAL,
                "Sidewall junction reverse saturation current density"),
IO("pb",                BSIM3_MOD_PB,       IF_REAL,
                "Source/drain junction built-in potential"),
IO("nj",                BSIM3_MOD_NJ,       IF_REAL,
                "Source/drain junction emission coefficient"),
IO("xti",               BSIM3_MOD_XTI,      IF_REAL,
                "Junction current temperature exponent"),
IO("mj",                BSIM3_MOD_MJ,       IF_REAL,
                "Source/drain bottom junction capacitance grading coefficient"),
IO("pbsw",              BSIM3_MOD_PBSW,     IF_REAL,
                "Source/drain sidewall junction capacitance built in potential"),
IO("mjsw",              BSIM3_MOD_MJSW,     IF_REAL,
                "Source/drain sidewall junction capacitance grading coefficient"),
IO("pbswg",             BSIM3_MOD_PBSWG,    IF_REAL,
                "Source/drain (gate side"),
IO("mjswg",             BSIM3_MOD_MJSWG,    IF_REAL,
                "Source/drain (gate side"),
IO("cj",                BSIM3_MOD_CJ,       IF_REAL,
                "Source/drain bottom junction capacitance per unit area"),
IO("vfbcv",             BSIM3_MOD_VFBCV,    IF_REAL,
                "Flat Band Voltage parameter for capmod=0 only"),
IO("vfb",               BSIM3_MOD_VFB,      IF_REAL,
                "Flat Band Voltage"),
IO("cjsw",              BSIM3_MOD_CJSW,     IF_REAL,
                "Source/drain sidewall junction capacitance per unit periphery"),
IO("cjswg",             BSIM3_MOD_CJSWG,    IF_REAL,
                "Source/drain (gate side"),
IO("tpb",               BSIM3_MOD_TPB,      IF_REAL,
                "Temperature coefficient of pb"),
IO("tcj",               BSIM3_MOD_TCJ,      IF_REAL,
                "Temperature coefficient of cj"),
IO("tpbsw",             BSIM3_MOD_TPBSW,    IF_REAL,
                "Temperature coefficient of pbsw"),
IO("tcjsw",             BSIM3_MOD_TCJSW,    IF_REAL,
                "Temperature coefficient of cjsw"),
IO("tpbswg",            BSIM3_MOD_TPBSWG,   IF_REAL,
                "Temperature coefficient of pbswg"),
IO("tcjswg",            BSIM3_MOD_TCJSWG,   IF_REAL,
                "Temperature coefficient of cjswg"),
IO("acde",              BSIM3_MOD_ACDE,     IF_REAL,
                "Exponential coefficient for finite charge thickness"),
IO("moin",              BSIM3_MOD_MOIN,     IF_REAL,
                "Coefficient for gate-bias dependent surface potential"),
IO("noff",              BSIM3_MOD_NOFF,     IF_REAL,
                "C-V turn-on/off parameter"),
IO("voffcv",            BSIM3_MOD_VOFFCV,   IF_REAL,
                "C-V lateral-shift parameter"),
IO("lint",              BSIM3_MOD_LINT,     IF_REAL,
                "Length reduction parameter"),
IO("ll",                BSIM3_MOD_LL,       IF_REAL,
                "Length reduction parameter"),
IO("llc",               BSIM3_MOD_LLC,      IF_REAL,
                "Length reduction parameter for CV"),
IO("lln",               BSIM3_MOD_LLN,      IF_REAL,
                "Length reduction parameter"),
IO("lw",                BSIM3_MOD_LW,       IF_REAL,
                "Length reduction parameter"),
IO("lwc",               BSIM3_MOD_LWC,      IF_REAL,
                "Length reduction parameter for CV"),
IO("lwn",               BSIM3_MOD_LWN,      IF_REAL,
                "Length reduction parameter"),
IO("lwl",               BSIM3_MOD_LWL,      IF_REAL,
                "Length reduction parameter"),
IO("lwlc",              BSIM3_MOD_LWLC,     IF_REAL,
                "Length reduction parameter for CV"),
IO("lmin",              BSIM3_MOD_LMIN,     IF_REAL,
                "Minimum length for the model"),
IO("lmax",              BSIM3_MOD_LMAX,     IF_REAL,
                "Maximum length for the model"),

IO("wr",                BSIM3_MOD_WR,       IF_REAL,
                "Width dependence of rds"),
IO("wint",              BSIM3_MOD_WINT,     IF_REAL,
                "Width reduction parameter"),
IO("dwg",               BSIM3_MOD_DWG,      IF_REAL,
                "Width reduction parameter"),
IO("dwb",               BSIM3_MOD_DWB,      IF_REAL,
                "Width reduction parameter"),

IO("wl",                BSIM3_MOD_WL,       IF_REAL,
                "Width reduction parameter"),
IO("wlc",               BSIM3_MOD_WLC,      IF_REAL,
                "Width reduction parameter for CV"),
IO("wln",               BSIM3_MOD_WLN,      IF_REAL,
                "Width reduction parameter"),
IO("ww",                BSIM3_MOD_WW,       IF_REAL,
                "Width reduction parameter"),
IO("wwc",               BSIM3_MOD_WWC,      IF_REAL,
                "Width reduction parameter for CV"),
IO("wwn",               BSIM3_MOD_WWN,      IF_REAL,
                "Width reduction parameter"),
IO("wwl",               BSIM3_MOD_WWL,      IF_REAL,
                "Width reduction parameter"),
IO("wwlc",              BSIM3_MOD_WWLC,     IF_REAL,
                "Width reduction parameter for CV"),
IO("wmin",              BSIM3_MOD_WMIN,     IF_REAL,
                "Minimum width for the model"),
IO("wmax",              BSIM3_MOD_WMAX,     IF_REAL,
                "Maximum width for the model"),

IO("b0",                BSIM3_MOD_B0,       IF_REAL,
                "Abulk narrow width parameter"),
IO("b1",                BSIM3_MOD_B1,       IF_REAL,
                "Abulk narrow width parameter"),

IO("cgsl",              BSIM3_MOD_CGSL,     IF_REAL,
                "New C-V model parameter"),
IO("cgdl",              BSIM3_MOD_CGDL,     IF_REAL,
                "New C-V model parameter"),
IO("ckappa",            BSIM3_MOD_CKAPPA,   IF_REAL,
                "New C-V model parameter"),
IO("cf",                BSIM3_MOD_CF,       IF_REAL,
                "Fringe capacitance parameter"),
IO("clc",               BSIM3_MOD_CLC,      IF_REAL,
                "Vdsat parameter for C-V model"),
IO("cle",               BSIM3_MOD_CLE,      IF_REAL,
                "Vdsat parameter for C-V model"),
IO("dwc",               BSIM3_MOD_DWC,      IF_REAL,
                "Delta W for C-V model"),
IO("dlc",               BSIM3_MOD_DLC,      IF_REAL,
                "Delta L for C-V model"),

IO("alpha0",            BSIM3_MOD_ALPHA0,   IF_REAL,
                "Substrate current model parameter"),
IO("alpha1",            BSIM3_MOD_ALPHA1,   IF_REAL,
                "Substrate current model parameter"),
IO("beta0",             BSIM3_MOD_BETA0,    IF_REAL,
                "Substrate current model parameter"),
IO("ijth",              BSIM3_MOD_IJTH,     IF_REAL,
                "Diode limiting current"),

IO("lcdsc",             BSIM3_MOD_LCDSC,    IF_REAL,
                "Length dependence of cdsc"),
IO("lcdscb",            BSIM3_MOD_LCDSCB,   IF_REAL,
                "Length dependence of cdscb"),
IO("lcdscd",            BSIM3_MOD_LCDSCD,   IF_REAL,
                "Length dependence of cdscd"),
IO("lcit",              BSIM3_MOD_LCIT,     IF_REAL,
                "Length dependence of cit"),
IO("lnfactor",          BSIM3_MOD_LNFACTOR, IF_REAL,
                "Length dependence of nfactor"),
IO("lxj",               BSIM3_MOD_LXJ,      IF_REAL,
                "Length dependence of xj"),
IO("lvsat",             BSIM3_MOD_LVSAT,    IF_REAL,
                "Length dependence of vsat"),
IO("lat",               BSIM3_MOD_LAT,      IF_REAL,
                "Length dependence of at"),
IO("la0",               BSIM3_MOD_LA0,      IF_REAL,
                "Length dependence of a0"),
IO("lags",              BSIM3_MOD_LAGS,     IF_REAL,
                "Length dependence of ags"),
IO("la1",               BSIM3_MOD_LA1,      IF_REAL,
                "Length dependence of a1"),
IO("la2",               BSIM3_MOD_LA2,      IF_REAL,
                "Length dependence of a2"),
IO("lketa",             BSIM3_MOD_LKETA,    IF_REAL,
                "Length dependence of keta"),
IO("lnsub",             BSIM3_MOD_LNSUB,    IF_REAL,
                "Length dependence of nsub"),
IO("lnch",              BSIM3_MOD_LNPEAK,   IF_REAL,
                "Length dependence of nch"),
IO("lngate",            BSIM3_MOD_LNGATE,   IF_REAL,
                "Length dependence of ngate"),
IO("lgamma1",           BSIM3_MOD_LGAMMA1,  IF_REAL,
                "Length dependence of gamma1"),
IO("lgamma2",           BSIM3_MOD_LGAMMA2,  IF_REAL,
                "Length dependence of gamma2"),
IO("lvbx",              BSIM3_MOD_LVBX,     IF_REAL,
                "Length dependence of vbx"),
IO("lvbm",              BSIM3_MOD_LVBM,     IF_REAL,
                "Length dependence of vbm"),
IO("lxt",               BSIM3_MOD_LXT,      IF_REAL,
                "Length dependence of xt"),
IO("lk1",               BSIM3_MOD_LK1,      IF_REAL,
                "Length dependence of k1"),
IO("lkt1",              BSIM3_MOD_LKT1,     IF_REAL,
                "Length dependence of kt1"),
IO("lkt1l",             BSIM3_MOD_LKT1L,    IF_REAL,
                "Length dependence of kt1l"),
IO("lkt2",              BSIM3_MOD_LKT2,     IF_REAL,
                "Length dependence of kt2"),
IO("lk2",               BSIM3_MOD_LK2,      IF_REAL,
                "Length dependence of k2"),
IO("lk3",               BSIM3_MOD_LK3,      IF_REAL,
                "Length dependence of k3"),
IO("lk3b",              BSIM3_MOD_LK3B,     IF_REAL,
                "Length dependence of k3b"),
IO("lw0",               BSIM3_MOD_LW0,      IF_REAL,
                "Length dependence of w0"),
IO("lnlx",              BSIM3_MOD_LNLX,     IF_REAL,
                "Length dependence of nlx"),
IO("ldvt0",             BSIM3_MOD_LDVT0,    IF_REAL,
                "Length dependence of dvt0"),
IO("ldvt1",             BSIM3_MOD_LDVT1,    IF_REAL,
                "Length dependence of dvt1"),
IO("ldvt2",             BSIM3_MOD_LDVT2,    IF_REAL,
                "Length dependence of dvt2"),
IO("ldvt0w",            BSIM3_MOD_LDVT0W,   IF_REAL,
                "Length dependence of dvt0w"),
IO("ldvt1w",            BSIM3_MOD_LDVT1W,   IF_REAL,
                "Length dependence of dvt1w"),
IO("ldvt2w",            BSIM3_MOD_LDVT2W,   IF_REAL,
                "Length dependence of dvt2w"),
IO("ldrout",            BSIM3_MOD_LDROUT,   IF_REAL,
                "Length dependence of drout"),
IO("ldsub",             BSIM3_MOD_LDSUB,    IF_REAL,
                "Length dependence of dsub"),
IO("lvth0",             BSIM3_MOD_LVTH0,    IF_REAL,
                "Length dependence of vto"),
IO("lvtho",             BSIM3_MOD_LVTH0,    IF_REAL,
                "Length dependence of vto"),
IO("lua",               BSIM3_MOD_LUA,      IF_REAL,
                "Length dependence of ua"),
IO("lua1",              BSIM3_MOD_LUA1,     IF_REAL,
                "Length dependence of ua1"),
IO("lub",               BSIM3_MOD_LUB,      IF_REAL,
                "Length dependence of ub"),
IO("lub1",              BSIM3_MOD_LUB1,     IF_REAL,
                "Length dependence of ub1"),
IO("luc",               BSIM3_MOD_LUC,      IF_REAL,
                "Length dependence of uc"),
IO("luc1",              BSIM3_MOD_LUC1,     IF_REAL,
                "Length dependence of uc1"),
IO("lu0",               BSIM3_MOD_LU0,      IF_REAL,
                "Length dependence of u0"),
IO("lute",              BSIM3_MOD_LUTE,     IF_REAL,
                "Length dependence of ute"),
IO("lvoff",             BSIM3_MOD_LVOFF,    IF_REAL,
                "Length dependence of voff"),
IO("lelm",              BSIM3_MOD_LELM,     IF_REAL,
                "Length dependence of elm"),
IO("ldelta",            BSIM3_MOD_LDELTA,   IF_REAL,
                "Length dependence of delta"),
IO("lrdsw",             BSIM3_MOD_LRDSW,    IF_REAL,
                "Length dependence of rdsw"),

IO("lprwg",             BSIM3_MOD_LPRWG,    IF_REAL,
                "Length dependence of prwg"),
IO("lprwb",             BSIM3_MOD_LPRWB,    IF_REAL,
                "Length dependence of prwb"),

IO("lprt",              BSIM3_MOD_LPRT,     IF_REAL,
                "Length dependence of prt"),
IO("leta0",             BSIM3_MOD_LETA0,    IF_REAL,
                "Length dependence of eta0"),
IO("letab",             BSIM3_MOD_LETAB,    IF_REAL,
                "Length dependence of etab"),
IO("lpclm",             BSIM3_MOD_LPCLM,    IF_REAL,
                "Length dependence of pclm"),
IO("lpdiblc1",          BSIM3_MOD_LPDIBL1,  IF_REAL,
                "Length dependence of pdiblc1"),
IO("lpdiblc2",          BSIM3_MOD_LPDIBL2,  IF_REAL,
                "Length dependence of pdiblc2"),
IO("lpdiblcb",          BSIM3_MOD_LPDIBLB,  IF_REAL,
                "Length dependence of pdiblcb"),
IO("lpscbe1",           BSIM3_MOD_LPSCBE1,  IF_REAL,
                "Length dependence of pscbe1"),
IO("lpscbe2",           BSIM3_MOD_LPSCBE2,  IF_REAL,
                "Length dependence of pscbe2"),
IO("lpvag",             BSIM3_MOD_LPVAG,    IF_REAL,
                "Length dependence of pvag"),
IO("lwr",               BSIM3_MOD_LWR,      IF_REAL,
                "Length dependence of wr"),
IO("ldwg",              BSIM3_MOD_LDWG,     IF_REAL,
                "Length dependence of dwg"),
IO("ldwb",              BSIM3_MOD_LDWB,     IF_REAL,
                "Length dependence of dwb"),
IO("lb0",               BSIM3_MOD_LB0,      IF_REAL,
                "Length dependence of b0"),
IO("lb1",               BSIM3_MOD_LB1,      IF_REAL,
                "Length dependence of b1"),
IO("lcgsl",             BSIM3_MOD_LCGSL,    IF_REAL,
                "Length dependence of cgsl"),
IO("lcgdl",             BSIM3_MOD_LCGDL,    IF_REAL,
                "Length dependence of cgdl"),
IO("lckappa",           BSIM3_MOD_LCKAPPA,  IF_REAL,
                "Length dependence of ckappa"),
IO("lcf",               BSIM3_MOD_LCF,      IF_REAL,
                "Length dependence of cf"),
IO("lclc",              BSIM3_MOD_LCLC,     IF_REAL,
                "Length dependence of clc"),
IO("lcle",              BSIM3_MOD_LCLE,     IF_REAL,
                "Length dependence of cle"),
IO("lalpha0",           BSIM3_MOD_LALPHA0,  IF_REAL,
                "Length dependence of alpha0"),
IO("lalpha1",           BSIM3_MOD_LALPHA1,  IF_REAL,
                "Length dependence of alpha1"),
IO("lbeta0",            BSIM3_MOD_LBETA0,   IF_REAL,
                "Length dependence of beta0"),
IO("lvfbcv",            BSIM3_MOD_LVFBCV,   IF_REAL,
                "Length dependence of vfbcv"),
IO("lvfb",              BSIM3_MOD_LVFB,     IF_REAL,
                "Length dependence of vfb"),
IO("lacde",             BSIM3_MOD_LACDE,    IF_REAL,
                "Length dependence of acde"),
IO("lmoin",             BSIM3_MOD_LMOIN,    IF_REAL,
                "Length dependence of moin"),
IO("lnoff",             BSIM3_MOD_LNOFF,    IF_REAL,
                "Length dependence of noff"),
IO("lvoffcv",           BSIM3_MOD_LVOFFCV,  IF_REAL,
                "Length dependence of voffcv"),
IO("wcdsc",             BSIM3_MOD_WCDSC,    IF_REAL,
                "Width dependence of cdsc"),
IO("wcdscb",            BSIM3_MOD_WCDSCB,   IF_REAL,
                "Width dependence of cdscb"),
IO("wcdscd",            BSIM3_MOD_WCDSCD,   IF_REAL,
                "Width dependence of cdscd"),
IO("wcit",              BSIM3_MOD_WCIT,     IF_REAL,
                "Width dependence of cit"),
IO("wnfactor",          BSIM3_MOD_WNFACTOR, IF_REAL,
                "Width dependence of nfactor"),
IO("wxj",               BSIM3_MOD_WXJ,      IF_REAL,
                "Width dependence of xj"),
IO("wvsat",             BSIM3_MOD_WVSAT,    IF_REAL,
                "Width dependence of vsat"),
IO("wat",               BSIM3_MOD_WAT,      IF_REAL,
                "Width dependence of at"),
IO("wa0",               BSIM3_MOD_WA0,      IF_REAL,
                "Width dependence of a0"),
IO("wags",              BSIM3_MOD_WAGS,     IF_REAL,
                "Width dependence of ags"),
IO("wa1",               BSIM3_MOD_WA1,      IF_REAL,
                "Width dependence of a1"),
IO("wa2",               BSIM3_MOD_WA2,      IF_REAL,
                "Width dependence of a2"),
IO("wketa",             BSIM3_MOD_WKETA,    IF_REAL,
                "Width dependence of keta"),
IO("wnsub",             BSIM3_MOD_WNSUB,    IF_REAL,
                "Width dependence of nsub"),
IO("wnch",              BSIM3_MOD_WNPEAK,   IF_REAL,
                "Width dependence of nch"),
IO("wngate",            BSIM3_MOD_WNGATE,   IF_REAL,
                "Width dependence of ngate"),
IO("wgamma1",           BSIM3_MOD_WGAMMA1,  IF_REAL,
                "Width dependence of gamma1"),
IO("wgamma2",           BSIM3_MOD_WGAMMA2,  IF_REAL,
                "Width dependence of gamma2"),
IO("wvbx",              BSIM3_MOD_WVBX,     IF_REAL,
                "Width dependence of vbx"),
IO("wvbm",              BSIM3_MOD_WVBM,     IF_REAL,
                "Width dependence of vbm"),
IO("wxt",               BSIM3_MOD_WXT,      IF_REAL,
                "Width dependence of xt"),
IO("wk1",               BSIM3_MOD_WK1,      IF_REAL,
                "Width dependence of k1"),
IO("wkt1",              BSIM3_MOD_WKT1,     IF_REAL,
                "Width dependence of kt1"),
IO("wkt1l",             BSIM3_MOD_WKT1L,    IF_REAL,
                "Width dependence of kt1l"),
IO("wkt2",              BSIM3_MOD_WKT2,     IF_REAL,
                "Width dependence of kt2"),
IO("wk2",               BSIM3_MOD_WK2,      IF_REAL,
                "Width dependence of k2"),
IO("wk3",               BSIM3_MOD_WK3,      IF_REAL,
                "Width dependence of k3"),
IO("wk3b",              BSIM3_MOD_WK3B,     IF_REAL,
                "Width dependence of k3b"),
IO("ww0",               BSIM3_MOD_WW0,      IF_REAL,
                "Width dependence of w0"),
IO("wnlx",              BSIM3_MOD_WNLX,     IF_REAL,
                "Width dependence of nlx"),
IO("wdvt0",             BSIM3_MOD_WDVT0,    IF_REAL,
                "Width dependence of dvt0"),
IO("wdvt1",             BSIM3_MOD_WDVT1,    IF_REAL,
                "Width dependence of dvt1"),
IO("wdvt2",             BSIM3_MOD_WDVT2,    IF_REAL,
                "Width dependence of dvt2"),
IO("wdvt0w",            BSIM3_MOD_WDVT0W,   IF_REAL,
                "Width dependence of dvt0w"),
IO("wdvt1w",            BSIM3_MOD_WDVT1W,   IF_REAL,
                "Width dependence of dvt1w"),
IO("wdvt2w",            BSIM3_MOD_WDVT2W,   IF_REAL,
                "Width dependence of dvt2w"),
IO("wdrout",            BSIM3_MOD_WDROUT,   IF_REAL,
                "Width dependence of drout"),
IO("wdsub",             BSIM3_MOD_WDSUB,    IF_REAL,
                "Width dependence of dsub"),
IO("wvth0",             BSIM3_MOD_WVTH0,    IF_REAL,
                "Width dependence of vto"),
IO("wvtho",             BSIM3_MOD_WVTH0,    IF_REAL,
                "Width dependence of vto"),
IO("wua",               BSIM3_MOD_WUA,      IF_REAL,
                "Width dependence of ua"),
IO("wua1",              BSIM3_MOD_WUA1,     IF_REAL,
                "Width dependence of ua1"),
IO("wub",               BSIM3_MOD_WUB,      IF_REAL,
                "Width dependence of ub"),
IO("wub1",              BSIM3_MOD_WUB1,     IF_REAL,
                "Width dependence of ub1"),
IO("wuc",               BSIM3_MOD_WUC,      IF_REAL,
                "Width dependence of uc"),
IO("wuc1",              BSIM3_MOD_WUC1,     IF_REAL,
                "Width dependence of uc1"),
IO("wu0",               BSIM3_MOD_WU0,      IF_REAL,
                "Width dependence of u0"),
IO("wute",              BSIM3_MOD_WUTE,     IF_REAL,
                "Width dependence of ute"),
IO("wvoff",             BSIM3_MOD_WVOFF,    IF_REAL,
                "Width dependence of voff"),
IO("welm",              BSIM3_MOD_WELM,     IF_REAL,
                "Width dependence of elm"),
IO("wdelta",            BSIM3_MOD_WDELTA,   IF_REAL,
                "Width dependence of delta"),
IO("wrdsw",             BSIM3_MOD_WRDSW,    IF_REAL,
                "Width dependence of rdsw"),

IO("wprwg",             BSIM3_MOD_WPRWG,    IF_REAL,
                "Width dependence of prwg"),
IO("wprwb",             BSIM3_MOD_WPRWB,    IF_REAL,
                "Width dependence of prwb"),

IO("wprt",              BSIM3_MOD_WPRT,     IF_REAL,
                "Width dependence of prt"),
IO("weta0",             BSIM3_MOD_WETA0,    IF_REAL,
                "Width dependence of eta0"),
IO("wetab",             BSIM3_MOD_WETAB,    IF_REAL,
                "Width dependence of etab"),
IO("wpclm",             BSIM3_MOD_WPCLM,    IF_REAL,
                "Width dependence of pclm"),
IO("wpdiblc1",          BSIM3_MOD_WPDIBL1,  IF_REAL,
                "Width dependence of pdiblc1"),
IO("wpdiblc2",          BSIM3_MOD_WPDIBL2,  IF_REAL,
                "Width dependence of pdiblc2"),
IO("wpdiblcb",          BSIM3_MOD_WPDIBLB,  IF_REAL,
                "Width dependence of pdiblcb"),
IO("wpscbe1",           BSIM3_MOD_WPSCBE1,  IF_REAL,
                "Width dependence of pscbe1"),
IO("wpscbe2",           BSIM3_MOD_WPSCBE2,  IF_REAL,
                "Width dependence of pscbe2"),
IO("wpvag",             BSIM3_MOD_WPVAG,    IF_REAL,
                "Width dependence of pvag"),
IO("wwr",               BSIM3_MOD_WWR,      IF_REAL,
                "Width dependence of wr"),
IO("wdwg",              BSIM3_MOD_WDWG,     IF_REAL,
                "Width dependence of dwg"),
IO("wdwb",              BSIM3_MOD_WDWB,     IF_REAL,
                "Width dependence of dwb"),
IO("wb0",               BSIM3_MOD_WB0,      IF_REAL,
                "Width dependence of b0"),
IO("wb1",               BSIM3_MOD_WB1,      IF_REAL,
                "Width dependence of b1"),
IO("wcgsl",             BSIM3_MOD_WCGSL,    IF_REAL,
                "Width dependence of cgsl"),
IO("wcgdl",             BSIM3_MOD_WCGDL,    IF_REAL,
                "Width dependence of cgdl"),
IO("wckappa",           BSIM3_MOD_WCKAPPA,  IF_REAL,
                "Width dependence of ckappa"),
IO("wcf",               BSIM3_MOD_WCF,      IF_REAL,
                "Width dependence of cf"),
IO("wclc",              BSIM3_MOD_WCLC,     IF_REAL,
                "Width dependence of clc"),
IO("wcle",              BSIM3_MOD_WCLE,     IF_REAL,
                "Width dependence of cle"),
IO("walpha0",           BSIM3_MOD_WALPHA0,  IF_REAL,
                "Width dependence of alpha0"),
IO("walpha1",           BSIM3_MOD_WALPHA1,  IF_REAL,
                "Width dependence of alpha1"),
IO("wbeta0",            BSIM3_MOD_WBETA0,   IF_REAL,
                "Width dependence of beta0"),
IO("wvfbcv",            BSIM3_MOD_WVFBCV,   IF_REAL,
                "Width dependence of vfbcv"),
IO("wvfb",              BSIM3_MOD_WVFB,     IF_REAL,
                "Width dependence of vfb"),
IO("wacde",             BSIM3_MOD_WACDE,    IF_REAL,
                "Width dependence of acde"),
IO("wmoin",             BSIM3_MOD_WMOIN,    IF_REAL,
                "Width dependence of moin"),
IO("wnoff",             BSIM3_MOD_WNOFF,    IF_REAL,
                "Width dependence of noff"),
IO("wvoffcv",           BSIM3_MOD_WVOFFCV,  IF_REAL,
                "Width dependence of voffcv"),

IO("pcdsc",             BSIM3_MOD_PCDSC,    IF_REAL,
                "Cross-term dependence of cdsc"),
IO("pcdscb",            BSIM3_MOD_PCDSCB,   IF_REAL,
                "Cross-term dependence of cdscb"),
IO("pcdscd",            BSIM3_MOD_PCDSCD,   IF_REAL,
                "Cross-term dependence of cdscd"),
IO("pcit",              BSIM3_MOD_PCIT,     IF_REAL,
                "Cross-term dependence of cit"),
IO("pnfactor",          BSIM3_MOD_PNFACTOR, IF_REAL,
                "Cross-term dependence of nfactor"),
IO("pxj",               BSIM3_MOD_PXJ,      IF_REAL,
                "Cross-term dependence of xj"),
IO("pvsat",             BSIM3_MOD_PVSAT,    IF_REAL,
                "Cross-term dependence of vsat"),
IO("pat",               BSIM3_MOD_PAT,      IF_REAL,
                "Cross-term dependence of at"),
IO("pa0",               BSIM3_MOD_PA0,      IF_REAL,
                "Cross-term dependence of a0"),
IO("pags",              BSIM3_MOD_PAGS,     IF_REAL,
                "Cross-term dependence of ags"),
IO("pa1",               BSIM3_MOD_PA1,      IF_REAL,
                "Cross-term dependence of a1"),
IO("pa2",               BSIM3_MOD_PA2,      IF_REAL,
                "Cross-term dependence of a2"),
IO("pketa",             BSIM3_MOD_PKETA,    IF_REAL,
                "Cross-term dependence of keta"),
IO("pnsub",             BSIM3_MOD_PNSUB,    IF_REAL,
                "Cross-term dependence of nsub"),
IO("pnch",              BSIM3_MOD_PNPEAK,   IF_REAL,
                "Cross-term dependence of nch"),
IO("pngate",            BSIM3_MOD_PNGATE,   IF_REAL,
                "Cross-term dependence of ngate"),
IO("pgamma1",           BSIM3_MOD_PGAMMA1,  IF_REAL,
                "Cross-term dependence of gamma1"),
IO("pgamma2",           BSIM3_MOD_PGAMMA2,  IF_REAL,
                "Cross-term dependence of gamma2"),
IO("pvbx",              BSIM3_MOD_PVBX,     IF_REAL,
                "Cross-term dependence of vbx"),
IO("pvbm",              BSIM3_MOD_PVBM,     IF_REAL,
                "Cross-term dependence of vbm"),
IO("pxt",               BSIM3_MOD_PXT,      IF_REAL,
                "Cross-term dependence of xt"),
IO("pk1",               BSIM3_MOD_PK1,      IF_REAL,
                "Cross-term dependence of k1"),
IO("pkt1",              BSIM3_MOD_PKT1,     IF_REAL,
                "Cross-term dependence of kt1"),
IO("pkt1l",             BSIM3_MOD_PKT1L,    IF_REAL,
                "Cross-term dependence of kt1l"),
IO("pkt2",              BSIM3_MOD_PKT2,     IF_REAL,
                "Cross-term dependence of kt2"),
IO("pk2",               BSIM3_MOD_PK2,      IF_REAL,
                "Cross-term dependence of k2"),
IO("pk3",               BSIM3_MOD_PK3,      IF_REAL,
                "Cross-term dependence of k3"),
IO("pk3b",              BSIM3_MOD_PK3B,     IF_REAL,
                "Cross-term dependence of k3b"),
IO("pw0",               BSIM3_MOD_PW0,      IF_REAL,
                "Cross-term dependence of w0"),
IO("pnlx",              BSIM3_MOD_PNLX,     IF_REAL,
                "Cross-term dependence of nlx"),
IO("pdvt0",             BSIM3_MOD_PDVT0,    IF_REAL,
                "Cross-term dependence of dvt0"),
IO("pdvt1",             BSIM3_MOD_PDVT1,    IF_REAL,
                "Cross-term dependence of dvt1"),
IO("pdvt2",             BSIM3_MOD_PDVT2,    IF_REAL,
                "Cross-term dependence of dvt2"),
IO("pdvt0w",            BSIM3_MOD_PDVT0W,   IF_REAL,
                "Cross-term dependence of dvt0w"),
IO("pdvt1w",            BSIM3_MOD_PDVT1W,   IF_REAL,
                "Cross-term dependence of dvt1w"),
IO("pdvt2w",            BSIM3_MOD_PDVT2W,   IF_REAL,
                "Cross-term dependence of dvt2w"),
IO("pdrout",            BSIM3_MOD_PDROUT,   IF_REAL,
                "Cross-term dependence of drout"),
IO("pdsub",             BSIM3_MOD_PDSUB,    IF_REAL,
                "Cross-term dependence of dsub"),
IO("pvth0",             BSIM3_MOD_PVTH0,    IF_REAL,
                "Cross-term dependence of vto"),
IO("pvtho",             BSIM3_MOD_PVTH0,    IF_REAL,
                "Cross-term dependence of vto"),
IO("pua",               BSIM3_MOD_PUA,      IF_REAL,
                "Cross-term dependence of ua"),
IO("pua1",              BSIM3_MOD_PUA1,     IF_REAL,
                "Cross-term dependence of ua1"),
IO("pub",               BSIM3_MOD_PUB,      IF_REAL,
                "Cross-term dependence of ub"),
IO("pub1",              BSIM3_MOD_PUB1,     IF_REAL,
                "Cross-term dependence of ub1"),
IO("puc",               BSIM3_MOD_PUC,      IF_REAL,
                "Cross-term dependence of uc"),
IO("puc1",              BSIM3_MOD_PUC1,     IF_REAL,
                "Cross-term dependence of uc1"),
IO("pu0",               BSIM3_MOD_PU0,      IF_REAL,
                "Cross-term dependence of u0"),
IO("pute",              BSIM3_MOD_PUTE,     IF_REAL,
                "Cross-term dependence of ute"),
IO("pvoff",             BSIM3_MOD_PVOFF,    IF_REAL,
                "Cross-term dependence of voff"),
IO("pelm",              BSIM3_MOD_PELM,     IF_REAL,
                "Cross-term dependence of elm"),
IO("pdelta",            BSIM3_MOD_PDELTA,   IF_REAL,
                "Cross-term dependence of delta"),
IO("prdsw",             BSIM3_MOD_PRDSW,    IF_REAL,
                "Cross-term dependence of rdsw"),

IO("pprwg",             BSIM3_MOD_PPRWG,    IF_REAL,
                "Cross-term dependence of prwg"),
IO("pprwb",             BSIM3_MOD_PPRWB,    IF_REAL,
                "Cross-term dependence of prwb"),

IO("pprt",              BSIM3_MOD_PPRT,     IF_REAL,
                "Cross-term dependence of prt"),
IO("peta0",             BSIM3_MOD_PETA0,    IF_REAL,
                "Cross-term dependence of eta0"),
IO("petab",             BSIM3_MOD_PETAB,    IF_REAL,
                "Cross-term dependence of etab"),
IO("ppclm",             BSIM3_MOD_PPCLM,    IF_REAL,
                "Cross-term dependence of pclm"),
IO("ppdiblc1",          BSIM3_MOD_PPDIBL1,  IF_REAL,
                "Cross-term dependence of pdiblc1"),
IO("ppdiblc2",          BSIM3_MOD_PPDIBL2,  IF_REAL,
                "Cross-term dependence of pdiblc2"),
IO("ppdiblcb",          BSIM3_MOD_PPDIBLB,  IF_REAL,
                "Cross-term dependence of pdiblcb"),
IO("ppscbe1",           BSIM3_MOD_PPSCBE1,  IF_REAL,
                "Cross-term dependence of pscbe1"),
IO("ppscbe2",           BSIM3_MOD_PPSCBE2,  IF_REAL,
                "Cross-term dependence of pscbe2"),
IO("ppvag",             BSIM3_MOD_PPVAG,    IF_REAL,
                "Cross-term dependence of pvag"),
IO("pwr",               BSIM3_MOD_PWR,      IF_REAL,
                "Cross-term dependence of wr"),
IO("pdwg",              BSIM3_MOD_PDWG,     IF_REAL,
                "Cross-term dependence of dwg"),
IO("pdwb",              BSIM3_MOD_PDWB,     IF_REAL,
                "Cross-term dependence of dwb"),
IO("pb0",               BSIM3_MOD_PB0,      IF_REAL,
                "Cross-term dependence of b0"),
IO("pb1",               BSIM3_MOD_PB1,      IF_REAL,
                "Cross-term dependence of b1"),
IO("pcgsl",             BSIM3_MOD_PCGSL,    IF_REAL,
                "Cross-term dependence of cgsl"),
IO("pcgdl",             BSIM3_MOD_PCGDL,    IF_REAL,
                "Cross-term dependence of cgdl"),
IO("pckappa",           BSIM3_MOD_PCKAPPA,  IF_REAL,
                "Cross-term dependence of ckappa"),
IO("pcf",               BSIM3_MOD_PCF,      IF_REAL,
                "Cross-term dependence of cf"),
IO("pclc",              BSIM3_MOD_PCLC,     IF_REAL,
                "Cross-term dependence of clc"),
IO("pcle",              BSIM3_MOD_PCLE,     IF_REAL,
                "Cross-term dependence of cle"),
IO("palpha0",           BSIM3_MOD_PALPHA0,  IF_REAL,
                "Cross-term dependence of alpha0"),
IO("palpha1",           BSIM3_MOD_PALPHA1,  IF_REAL,
                "Cross-term dependence of alpha1"),
IO("pbeta0",            BSIM3_MOD_PBETA0,   IF_REAL,
                "Cross-term dependence of beta0"),
IO("pvfbcv",            BSIM3_MOD_PVFBCV,   IF_REAL,
                "Cross-term dependence of vfbcv"),
IO("pvfb",              BSIM3_MOD_PVFB,     IF_REAL,
                "Cross-term dependence of vfb"),
IO("pacde",             BSIM3_MOD_PACDE,    IF_REAL,
                "Cross-term dependence of acde"),
IO("pmoin",             BSIM3_MOD_PMOIN,    IF_REAL,
                "Cross-term dependence of moin"),
IO("pnoff",             BSIM3_MOD_PNOFF,    IF_REAL,
                "Cross-term dependence of noff"),
IO("pvoffcv",           BSIM3_MOD_PVOFFCV,  IF_REAL,
                "Cross-term dependence of voffcv"),

IO("noia",              BSIM3_MOD_NOIA,     IF_REAL,
                "Flicker noise parameter"),
IO("noib",              BSIM3_MOD_NOIB,     IF_REAL,
                "Flicker noise parameter"),
IO("noic",              BSIM3_MOD_NOIC,     IF_REAL,
                "Flicker noise parameter"),
IO("em",                BSIM3_MOD_EM,       IF_REAL,
                "Flicker noise parameter"),
IO("ef",                BSIM3_MOD_EF,       IF_REAL,
                "Flicker noise frequency exponent"),
IO("af",                BSIM3_MOD_AF,       IF_REAL,
                "Flicker noise exponent"),
IO("kf",                BSIM3_MOD_KF,       IF_REAL,
                "Flicker noise coefficient"),

IP("nmos",              BSIM3_MOD_NMOS,     IF_FLAG,
                "Flag to indicate NMOS"),
IP("pmos",              BSIM3_MOD_PMOS,     IF_FLAG,
                "Flag to indicate PMOS"),

// SRW - Hspice aliases
IO("nqsmod",            BSIM3_MOD_NQSMOD,   IF_INTEGER,
                "Non-quasi-static model selector"),
IO("tref",              BSIM3_MOD_TNOM,     IF_REAL,
                "Parameter measurement temperature"),
IO("cjm",               BSIM3_MOD_CJ,       IF_REAL,
                "Source/drain bottom junction capacitance per unit area"),
IO("mj0",               BSIM3_MOD_MJ,       IF_REAL,
                "Source/drain bottom junction capacitance grading coefficient"),
IO("pj",                BSIM3_MOD_PB,       IF_REAL,
                "Source/drain junction built-in potential"),
IO("php",               BSIM3_MOD_PBSW,     IF_REAL,
                "Source/drain sidewall junction capacitance built in potential"),
IO("n",                 BSIM3_MOD_NJ,       IF_REAL,
                "Source/drain junction emission coefficient"),
// SRW - Hspice additions
IO("xw",                BSIM3_MOD_XW,       IF_REAL,
                "Geometric width shrinkage factor"),
IO("xl",                BSIM3_MOD_XL,       IF_REAL,
                "Geometric length shrinkage factor")
};

const char *BSIM3names[] = {
   "Drain",
   "Gate",
   "Source",
   "Bulk",
   "Charge"
};

const char *BSIM3modNames[] = {
    "nmos",
    "pmos",
    0
};

IFkeys BSIM3keys[] = {
    IFkeys( 'm', BSIM3names, 4, 4, 0 )
};

} // namespace


BSIM3dev::BSIM3dev()
{
    dv_name = "BSIM3.2.4";
    dv_description = "Berkeley Short Channel MOSFET Model BSIM3.2.4";

    dv_numKeys = NUMELEMS(BSIM3keys);
    dv_keys = BSIM3keys;

    dv_levels[0] = 8;
    dv_levels[1] = 47;  // HSPICE compatability
    dv_levels[2] = 0;
    dv_modelKeys = BSIM3modNames;

    dv_numInstanceParms = NUMELEMS(BSIM3pTable);
    dv_instanceParms = BSIM3pTable;

    dv_numModelParms = NUMELEMS(BSIM3mPTable);
    dv_modelParms = BSIM3mPTable;

    dv_flags = DV_TRUNC | DV_NODIST;
};


sGENmodel *
BSIM3dev::newModl()
{
    return (new sBSIM3model);
}


sGENinstance *
BSIM3dev::newInst()
{
    return (new sBSIM3instance);
}


int
BSIM3dev::destroy(sGENmodel **model)
{
    return (IFdevice::destroy<sBSIM3model, sBSIM3instance>(model));
}


int
BSIM3dev::delInst(sGENmodel *model, IFuid dname, sGENinstance *fast)
{
    return (IFdevice::delInst<sBSIM3model, sBSIM3instance>(model, dname,
        fast));
}


int
BSIM3dev::delModl(sGENmodel **model, IFuid modname, sGENmodel *modfast)
{
    return (IFdevice::delModl<sBSIM3model, sBSIM3instance>(model, modname,
        modfast));
}


// mosfet parser
// Mname <node> <node> <node> <node> <model>
//       [L=<val>] [W=<val>] [AD=<val>] [AS=<val>] [PD=<val>]
//       [PS=<val>] [NRD=<val>] [NRS=<val>] [OFF]
//       [IC=<val>,<val>,<val>]
// 
void
BSIM3dev::parse(int type, sCKT *ckt, sLine *current)
{
    DEV.parse(ckt, current, type, dv_keys->minTerms, dv_keys->maxTerms,
        true, 0);
}


void
BSIM3dev::backup(sGENmodel *mp, DEV_BKMODE m)
{
    while (mp) {
        for (sGENinstance *ip = mp->GENinstances; ip; ip = ip->GENnextInstance)
            ((sBSIM3instance*)ip)->backup(m);
        mp = mp->GENnextModel;
    }
}


// Below is hugely GCC-specific.  The __WRMODULE__ and __WRVERSION__
// tokens are defined in the Makefile and passed with -D when
// compiling.

#define STR(x) #x
#define STRINGIFY(x) STR(x)
#define MCAT(x, y) x ## y
#define MODNAME(x, y) MCAT(x, y)

// Module initializer.  Sets locations in the main app to some
// identifying strings.
//
__attribute__((constructor)) static void initializer()
{
    extern const char *WRS_ModuleName, *WRS_ModuleVersion;

    WRS_ModuleName = STRINGIFY(__WRMODULE__);
    WRS_ModuleVersion = STRINGIFY(__WRVERSION__);
}


// Device constructor function.  This should be the only globally
// visible symbol in the module.  The function name expands to the
// module name with trailing _c.
// 
extern "C" {
    void
    MODNAME(__WRMODULE__, _c)(IFdevice **d, int *cnt)
    {
        *d = new BSIM3dev;
        (*cnt)++;
    }
}

