
!!  ---------------------------------------------------------------
!!  Xic/WRspice Help System Database
!!  Copyright (C) Whiteley Research Inc. 2025.  All Rights Reserved
!!  WRspice help file
!!  ---------------------------------------------------------------

!!TAG WRspice

!!KEYWORD
spExamples.hlp
!!TITLE
spExamples.hlp
!!HTML 

!!SUBTOPICS
examples
ex1
ex2
ex3
ex4
ex5
ex6
ex7
ex8
ex9
ex10


!! examples.tex 012309
!!KEYWORD
examples
!!TITLE
Circuit Examples
!!HTML 
    The following circuits are examples.  There are a number of
    example files available with the <i>WRspice</i> distribution. 
    These are normally found in
    <tt>/usr/local/xictools/wrspice/examples</tt>.
!!LATEX examples examples.tex
The following circuits are examples.  There are a number of example
files available with the {\WRspice} distribution.  These are normally
found in {\vt /usr/local/xictools/wrspice/examples}.
 
!!SUBTOPICS
ex1
ex2
ex3
ex4
ex5
ex6
ex7
ex8
ex9
ex10

!! examples.tex 012309
!!KEYWORD
ex1
!!TITLE
Example 1:  Simple Differential Pair
!!HTML 
    The following circuit determines the dc operating point of a
    simple differential pair.  In addition, the ac small signal
    response is computed over the frequency range 1Hz to 100MHz.

    <p>
    <pre>
         Simple differential pair
         vcc 7 0 12
         vee 8 0 -12
         vin 1 0 AC 1
         rs1 1 2 1k
         rs2 6 0 1k
         q1 3 2 4 mod1
         q2 5 6 4 mod1
         rc1 7 3 10k
         rc2 7 5 10k
         re 4 8 10k
         .model mod1 npn bf=50 vaf=50 is=1.e-12 rb=100
         +cjc=.5pf tf=.6ns
         .ac dec 10 1 100meg
         .end
    </pre>
!!LATEX ex1 examples.tex
The following file determines the dc operating point of a simple
differential pair.  In addition, the ac small-signal response is
computed over the frequency range 1Hz to 100MHz.

\begin{verbatim}
    Simple differential pair.
    vcc 7 0 12
    vee 8 0 -12
    vin 1 0 ac 1
    rs1 1 2 1k
    rs2 6 0 1k
    q1 3 2 4 mod1
    q2 5 6 4 mod1
    rc1 7 3 10k
    rc2 7 5 10k
    re 4 8 10k
    .model mod1 npn bf=50 vaf=50 is=1.E-12 rb=100 cjc=.5pf tf=.6ns
    .ac dec 10 1 100meg
    .end
\end{verbatim}
 
!! examples.tex 012309
!!KEYWORD
ex2
!!TITLE
Example 2:  MOS Output Characteristics
!!HTML 
    The following file computes the output characteristics of a MOSFET
    device over the range 0-10V for VDS and 0-5V for VGS.

    <p>
    <pre>
         MOS output characteristics
         vds 3 0
         vgs 2 0
         m1 1 2 0 0 mod1 l=4u w=6u ad=10p as=10p
         .model mod1 nmos vto=-2 nsub=1.0e15 uo=550
         * vids measures id, we could have used vds,
         * but Id would be negative
         vids 3 1
         .dc vds 0 10 .5 vgs 0 5 1
         .end
    </pre>
!!LATEX ex2 examples.tex
The following file computes the output characteristics of a MOSFET
device over the range 0-10V for VDS and 0-5V for VGS.

\begin{verbatim}
    MOS output characteristics
    .options node nopage
    vds 3 0
    vgs 2 0
    m1 1 2 0 0 mod1 l=4u w=6u ad=10p as=10p
    .model mod1 nmos vto=-2 nsub=1.0e15 uo=550
    * vids measures Id, we could have used Vds, but Id would be negative
    vids 3 1
    .dc vds 0 10 .5 vgs 0 5 1
    .end
\end{verbatim}
 
!! examples.tex 012309
!!KEYWORD
ex3
!!TITLE
Example 3:  Simple RTL Inverter
!!HTML 
    The following file determines the dc transfer curve and the
    transient pulse response of a simple RTL inverter.  RTL was an
    early logic family which died out in the early 1970's.  We could
    not think of anything more archaic, as <i>WRspice</i> does not
    contain a vacuum tube model.

    <p>
    The input is a pulse from 0 to 5 Volts with delay, rise, and fall
    times of 2ns and a pulse width of 30ns.  The transient interval is
    0 to 100ns, with printing to be done every nanosecond.

    <p>
    <pre>
         Simple Resistor-Transistor Logic (RTL) inverter
         vcc 4 0 5
         vin 1 0 pulse 0 5 2ns 2ns 2ns 30ns
         rb 1 2 10k
         q1 3 2 0 q1
         rc 3 4 1k
         .model q1 npn bf 20 rb 100 tf .1ns cjc 2pf
         .dc vin 0 5 0.1
         .tran 1ns 100ns
         .end
    </pre>
!!LATEX ex3 examples.tex
The following file determines the dc transfer curve and the transient
pulse response of a simple RTL inverter.  RTL was an early logic
family which died out in the early 1970's.  We could not think of
anything more archaic, as {\WRspice} does not contain a vacuum tube
model.

The input is a pulse from 0 to 5 Volts with delay, rise, and fall
times of 2ns and a pulse width of 30ns.  The transient interval is 0
to 100ns, with printing to be done every nanosecond.

\begin{verbatim}
    Simple Resistor-Transistor Logic (RTL) inverter
    vcc 4 0 5
    vin 1 0 pulse 0 5 2ns 2ns 2ns 30ns
    rb 1 2 10k
    q1 3 2 0 q1
    rc 3 4 1k
    .model q1 npn bf 20 rb 100 tf .1ns cjc 2pf
    .dc vin 0 5 0.1
    .tran 1ns 100ns
    .end
\end{verbatim}

!! examples.tex 012309
!!KEYWORD
ex4
!!TITLE
Example 4:  Four-bit Adder
!!HTML 
    The following file simulates a four-bit binary adder, using
    several subcircuits to describe various pieces of the overall
    circuit.

    <p>
    <pre>
         ADDER - 4 BIT ALL-NAND-GATE BINARY ADDER
         *** SUBCIRCUIT DEFINITIONS
         .SUBCKT NAND 1 2 3 4
         *   NODES:  INPUT(2), OUTPUT, VCC
         Q1 9 5 1 QMOD
         D1CLAMP 0 1 DMOD
         Q2 9 5 2 QMOD
         D2CLAMP 0 2 DMOD
         RB 4 5 4K
         R1 4 6 1.6K
         Q3 6 9 8 QMOD
         R2 8 0 1K
         RC 4 7 130
         Q4 7 6 10 QMOD
         DVBEDROP 10 3 DMOD
         Q5 3 8 0 QMOD
         .ENDS NAND
         .SUBCKT ONEBIT 1 2 3 4 5 6
         *   NODES:  INPUT(2), CARRY-IN, OUTPUT, CARRY-OUT, VCC
         X1 1 2 7 6 NAND
         X2 1 7 8 6 NAND
         X3 2 7 9 6 NAND
         X4 8 9 10 6 NAND
         X5 3 10 11 6 NAND
         X6 3 11 12 6 NAND
         X7 10 11 13 6 NAND
         X8 12 13 4 6 NAND
         X9 11 7 5 6 NAND
         .ENDS ONEBIT
         .SUBCKT TWOBIT 1 2 3 4 5 6 7 8 9
         *   NODES:  INPUT - BIT0(2) / BIT1(2), OUTPUT - BIT0 / BIT1,
         *           CARRY-IN, CARRY-OUT, VCC
         X1 1 2 7 5 10 9 ONEBIT
         X2 3 4 10 6 8 9 ONEBIT
         .ENDS TWOBIT
         .SUBCKT FOURBIT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
         * NODES: INPUT - BIT0(2) / BIT1(2) / BIT2(2) / BIT3(2),
         *        OUTPUT - BIT0 / BIT1 / BIT2 / BIT3, CARRY-IN,
         *                CARRY-OUT,  VCC
         X1 1 2 3 4 9 10 13 16 15 TWOBIT
         X2 5 6 7 8 11 12 16 14 15 TWOBIT
         .ENDS FOURBIT
         *** DEFINE NOMINAL CIRCUIT
         .MODEL DMOD D
         .MODEL QMOD NPN(BF=75 RB=100 CJE=1PF CJC=3PF)
         VCC 99 0 DC 5V
         VIN1A 1 0 PULSE(0 3 0 10NS 10NS   10NS   50NS)
         VIN1B 2 0 PULSE(0 3 0 10NS 10NS   20NS  100NS)
         VIN2A 3 0 PULSE(0 3 0 10NS 10NS   40NS  200NS)


         VIN2B 4 0 PULSE(0 3 0 10NS 10NS   80NS  400NS)
         VIN3A 5 0 PULSE(0 3 0 10NS 10NS  160NS  800NS)
         VIN3B 6 0 PULSE(0 3 0 10NS 10NS  320NS 1600NS)
         VIN4A 7 0 PULSE(0 3 0 10NS 10NS  640NS 3200NS)
         VIN4B 8 0 PULSE(0 3 0 10NS 10NS 1280NS 6400NS)
         X1 1 2 3 4 5 6 7 8 9 10 11 12 0 13 99 FOURBIT
         RBIT0 9 0 1K
         RBIT1 10 0 1K
         RBIT2 11 0 1K
         RBIT3 12 0 1K
         RCOUT 13 0 1K
         *** (FOR THOSE WITH MONEY (AND MEMORY) TO BURN)
         .TRAN 1NS 6400NS
         .END
    </pre>
!!LATEX ex4 examples.tex
The following file simulates a four-bit binary adder, using several
subcircuits to describe various pieces of the overall circuit.

\begin{verbatim}
    ADDER - 4 BIT ALL-NAND-GATE BINARY ADDER
    *
    *** SUBCIRCUIT DEFINITIONS
    .SUBCKT NAND 1 2 3 4
    *NODES: INPUT(2), OUTPUT, VCC
    Q1 9 5 1 QMOD
    D1CLAMP 0 1 DMOD
    Q2 9 5 2 QMOD
    D2CLAMP 0 2 DMOD
    RB 4 5 4K
    R1 4 6 1.6K
    Q3 6 9 8 QMOD
    R2 8 0 1K
    RC 4 7 130
    Q4 7 6 10 QMOD
    DVBEDROP 10 3 DMOD
    Q5 3 8 0 QMOD
    .ENDS NAND
    .SUBCKT ONEBIT 1 2 3 4 5 6
    *NODES: INPUT(2), CARRY-IN, OUTPUT, CARRY-OUT, VCC
    X1 1 2 7 6 NAND
    X2 1 7 8 6 NAND
    X3 2 7 9 6 NAND
    X4 8 9 10 6 NAND
    X5 3 10 11 6 NAND
    X6 3 11 12 6 NAND
    X7 10 11 13 6 NAND
    X8 12 13 4 6 NAND
    X9 11 7 5 6 NAND
    .ENDS ONEBIT
    .SUBCKT TWOBIT 1 2 3 4 5 6 7 8 9
    *NODES: INPUT - BIT0(2) / BIT1(2), OUTPUT - BIT0 / BIT1,
    *       CARRY-IN, CARRY-OUT, VCC
    X1 1 2 7 5 10 9 ONEBIT
    X2 3 4 10 6 8 9 ONEBIT
    .ENDS TWOBIT
    *
    .SUBCKT FOURBIT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
    *NODES: INPUT - BIT0(2) / BIT1(2) / BIT2(2) / BIT3(2),
    *       OUTPUT - BIT0 / BIT1 / BIT2 / BIT3, CARRY-IN, CARRY-OUT, VCC
    X1 1 2 3 4 9 10 13 16 15 TWOBIT
    X2 5 6 7 8 11 12 16 14 15 TWOBIT
    .ENDS FOURBIT
    *
    *** DEFINE NOMINAL CIRCUIT
    *
    .MODEL DMOD D
    .MODEL QMOD NPN(BF=75 RB=100 CJE=1PF CJC=3PF)
    VCC 99 0 DC 5V
    VIN1A 1 0 PULSE(0 3 0 10NS 10NS   10NS   50NS)
    VIN1B 2 0 PULSE(0 3 0 10NS 10NS   20NS  100NS)
    VIN2A 3 0 PULSE(0 3 0 10NS 10NS   40NS  200NS)
    VIN2B 4 0 PULSE(0 3 0 10NS 10NS   80NS  400NS)
    VIN3A 5 0 PULSE(0 3 0 10NS 10NS  160NS  800NS)
    VIN3B 6 0 PULSE(0 3 0 10NS 10NS  320NS 1600NS)
    VIN4A 7 0 PULSE(0 3 0 10NS 10NS  640NS 3200NS)
    VIN4B 8 0 PULSE(0 3 0 10NS 10NS 1280NS 6400NS)
    X1 1 2 3 4 5 6 7 8 9 10 11 12 0 13 99 FOURBIT
    RBIT0 9 0 1K
    RBIT1 10 0 1K
    RBIT2 11 0 1K
    RBIT3 12 0 1K
    RCOUT 13 0 1K
    *
    *** (FOR THOSE WITH MONEY (AND MEMORY) TO BURN)
    * Ah, the good olde days...
    .TRAN 1NS 6400NS
    .END
\end{verbatim}
 
!! examples.tex 012309
!!KEYWORD
ex5
!!TITLE
Example 5:  Transmission Line Inverter
!!HTML 
    The following file simulates a transmission line inverter.  Two
    transmission line elements are required since two propagation
    modes are excited.  In the case of a coaxial line, the first line
    (T1) models the inner conductor with respect to the shield, and
    the second line (T2) models the shield with respect to the outside
    world.

    <p>
    <pre>
         transmission-line inverter
         v1 1 0 pulse(0 1 0 0.1n)
         r1 1 2 50
         x1 2 0 0 4 tline
         r2 4 0 50
         .subckt tline 1 2 3 4
         t1 1 2 3 4 z0=50 td=1.5ns
         t2 2 0 4 0 z0=100 td=1ns
         .ends tline
         .tran 0.1ns 20ns
         .end
    </pre>
!!LATEX ex5 examples.tex
The following file simulates a transmission line inverter.  Two
transmission line elements are required since two propagation modes
are excited.  In the case of a coaxial line, the first line (t1)
models the inner conductor with respect to the shield, and the second
line (t2) models the shield with respect to the outside world.

\begin{verbatim}
    transmission-line inverter
    v1 1 0 pulse(0 1 0 0.1N)
    r1 1 2 50
    x1 2 0 0 4 tline
    r2 4 0 50
    .subckt tline 1 2 3 4
    t1 1 2 3 4 z0=50 td=1.5ns
    t2 2 0 4 0 z0=100 td=1ns
    .ends tline
    .tran 0.1ns 20ns
    .end
\end{verbatim}
 
!! examples.tex 012309
!!KEYWORD
ex6
!!TITLE
Example 6:  Function and Table Demo
!!HTML 
    Below is a file which illustrates some features exclusive to
    <i>WRspice</i> for specifying the output of sources.

    <p>
    <pre>
        WRspice function and table demo
        *
        * WRspice allows arbitrary functional dependence in sources.  This
        * file demonstrates some of the capability.
        *
        * v1 is numerically equal to the exponentiation of
        * 2 times the sine.  "x" is replaced by the time variable.
        v1 1 0 exp(2*sin(6.28e9*x))
        r1 1 0 1
        *
        * v2 obtains values from table t1
        v2 2 0 table(t1, time)
        r2 2 0 1
        .table t1 0 0 100p .1 500p 0 750p .2 1000p 0
        *
        * v3 is a 0-1 ramp
        v3 3 0 pwl(0 0 1n 1)
        r3 3 0 1
        *
        * e1 illustrates use of sub-tables.  x is the voltage from v3
        e1 4 0 3 0 table(t2, x)
        * below is an alternative equivalent form for e1
        *e1 4 0 t2(v(3))
        r4 4 0 1
        .table t2 0 table t3 .5 table t4 .75 .75 1 0
        .table t3 0 0 .25 1 .5 0
        .table t4 0 0 .5 0 .625 1 .75 .75, x)
        *
        * e2 produces the same output as e1, but uses a PWL statement.
        * when the controlling nodes are given, pwl uses the control source,
        * and not time when used in e,f,g,h sources
        e2 5 0 3 0 pwl(0 0 .25 1 .5 0 .625 1 .75 .75 1 0)
        r5 5 0 1
        *
        .tran 1p 1n
        * type "run", then "plot v(1) v(2) v(3) v(4)"
    </pre>
!!LATEX ex6 examples.tex
Below is a file which illustrates some features exclusive to {\WRspice} 
for specifying the output of sources.

\begin{verbatim}
    WRspice function and table demo
    *
    * WRspice allows arbitrary functional dependence in sources.  This
    * file demonstrates some of the capability.
    *
    * v1 is numerically equal to the exponentiation of
    * 2 times the sine.  "x" is replaced by the time variable.
    v1 1 0 exp(2*sin(6.28e9*x))
    r1 1 0 1
    *
    * v2 obtains values from table t1
    v2 2 0 table(t1, time)
    r2 2 0 1
    .table t1 0 0 100p .1 500p 0 750p .2 1000p 0
    *
    * v3 is a 0-1 ramp
    v3 3 0 pwl(0 0 1n 1)
    r3 3 0 1
    *
    * e1 illustrates use of sub-tables.  x is the voltage from v3
    e1 4 0 3 0 table(t2, x)
    * below is an alternative equivalent form for e1
    *e1 4 0 t2(v(3))
    r4 4 0 1
    .table t2 0 table t3 .5 table t4 .75 .75 1 0
    .table t3 0 0 .25 1 .5 0
    .table t4 0 0 .5 0 .625 1 .75 .75, x)
    *
    * e2 produces the same output as e1, but uses a PWL statement.
    * when the controlling nodes are given, pwl uses the control source,
    * and not time when used in e,f,g,h sources
    e2 5 0 3 0 pwl(0 0 .25 1 .5 0 .625 1 .75 .75 1 0)
    r5 5 0 1
    *
    .tran 1p 1n
    * type "run", then "plot v(1) v(2) v(3) v(4)"
    .end
\end{verbatim}

!! examples.tex 012309
!!KEYWORD
ex7
!!TITLE
Example 7:  MOS Convergence Test
!!HTML 
    Below is an example circuit that illustrates some of the new
    features, and some older features perhaps not widely appreciated. 
    This also served as a test for improving MOS convergence.  To run
    a convergence test:
    <ol>
    <li>Source this circuit.
    <li>Press the <b>siminterface</b> button in the Debug tool.
    <li>Type "<tt>set value1 = mult</tt>".
    <li>Type "<tt>loop .5 2.5 .1 op</tt>".
    </ol>

    <p>
    This runs operating point analysis for M values from .5 to 2.5, and
    displays a little plot of the convergence process.  In the display,
    '+' means an increasing gmin step, '.' is a source step, '-' is
    a decreasing gmin step.

    <p>
    Note that 100 nS is too coarse to get a decent looking plot with
    BSIM devices.  Use "<tt>tran 1n 10u</tt>" in that case, since the
    circuit seems to be oscillating at very high frequency.

    <p>
    <pre>
        mosamp2 - mos amplifier - transient
        .options abstol=10n vntol=10n noopiter mult=2 nqs=1 reltol=1e-4
        *.op
        .tran 0.1us 10us
        .plot  tran v(20) v(66)
        * set below to 0 for old MOS model
        .param bsim = 1
        .if bsim = 1
        m1  15 15  1 32 n1 w=88.9u  l=25.4u m=$mult nqsmod=$nqs
        m2   1  1  2 32 n1 w=12.7u  l=266.7u m=$mult nqsmod=$nqs
        m3   2  2 30 32 n1 w=88.9u  l=25.4u m=$mult nqsmod=$nqs
        m4  15  5  4 32 n1 w=12.7u  l=106.7u m=$mult nqsmod=$nqs
        m5   4  4 30 32 n1 w=88.9u  l=12.7u m=$mult nqsmod=$nqs
        m6  15 15  5 32 n1 w=44.5u  l=25.4u m=$mult nqsmod=$nqs
        m7   5 20  8 32 n1 w=482.6u l=12.7u m=$mult nqsmod=$nqs
        m8   8  2 30 32 n1 w=88.9u  l=25.4u m=$mult nqsmod=$nqs
        m9  15 15  6 32 n1 w=44.5u  l=25.4u m=$mult nqsmod=$nqs
        m10  6 21  8 32 n1 w=482.6u l=12.7u m=$mult nqsmod=$nqs
        m11 15  6  7 32 n1 w=12.7u  l=106.7u m=$mult nqsmod=$nqs
        m12  7  4 30 32 n1 w=88.9u  l=12.7u m=$mult nqsmod=$nqs
        m13 15 10  9 32 n1 w=139.7u l=12.7u m=$mult nqsmod=$nqs
        m14  9 11 30 32 n1 w=139.7u l=12.7u m=$mult nqsmod=$nqs
        m15 15 15 12 32 n1 w=12.7u  l=207.8u m=$mult nqsmod=$nqs
        m16 12 12 11 32 n1 w=54.1u  l=12.7u m=$mult nqsmod=$nqs
        m17 11 11 30 32 n1 w=54.1u  l=12.7u m=$mult nqsmod=$nqs
        m18 15 15 10 32 n1 w=12.7u  l=45.2u m=$mult nqsmod=$nqs
        m19 10 12 13 32 n1 w=270.5u l=12.7u m=$mult nqsmod=$nqs
        m20 13  7 30 32 n1 w=270.5u l=12.7u m=$mult nqsmod=$nqs
        m21 15 10 14 32 n1 w=254u   l=12.7u m=$mult nqsmod=$nqs
        m22 14 11 30 32 n1 w=241.3u l=12.7u m=$mult nqsmod=$nqs
        m23 15 20 16 32 n1 w=19u    l=38.1u m=$mult nqsmod=$nqs
        m24 16 14 30 32 n1 w=406.4u l=12.7u m=$mult nqsmod=$nqs
        m25 15 15 20 32 n1 w=38.1u  l=42.7u m=$mult nqsmod=$nqs
        m26 20 16 30 32 n1 w=381u   l=25.4u m=$mult nqsmod=$nqs
        m27 20 15 66 32 n1 w=22.9u  l=7.6u m=$mult nqsmod=$nqs
        .else
        m1  15 15  1 32 n1 w=88.9u  l=25.4u m=$mult
        m2   1  1  2 32 n1 w=12.7u  l=266.7u m=$mult
        m3   2  2 30 32 n1 w=88.9u  l=25.4u m=$mult
        m4  15  5  4 32 n1 w=12.7u  l=106.7u m=$mult
        m5   4  4 30 32 n1 w=88.9u  l=12.7u m=$mult
        m6  15 15  5 32 n1 w=44.5u  l=25.4u m=$mult
        m7   5 20  8 32 n1 w=482.6u l=12.7u m=$mult
        m8   8  2 30 32 n1 w=88.9u  l=25.4u m=$mult
        m9  15 15  6 32 n1 w=44.5u  l=25.4u m=$mult
        m10  6 21  8 32 n1 w=482.6u l=12.7u m=$mult
        m11 15  6  7 32 n1 w=12.7u  l=106.7u m=$mult
        m12  7  4 30 32 n1 w=88.9u  l=12.7u m=$mult
        m13 15 10  9 32 n1 w=139.7u l=12.7u m=$mult
        m14  9 11 30 32 n1 w=139.7u l=12.7u m=$mult
        m15 15 15 12 32 n1 w=12.7u  l=207.8u m=$mult
        m16 12 12 11 32 n1 w=54.1u  l=12.7u m=$mult
        m17 11 11 30 32 n1 w=54.1u  l=12.7u m=$mult
        m18 15 15 10 32 n1 w=12.7u  l=45.2u m=$mult
        m19 10 12 13 32 n1 w=270.5u l=12.7u m=$mult
        m20 13  7 30 32 n1 w=270.5u l=12.7u m=$mult
        m21 15 10 14 32 n1 w=254u   l=12.7u m=$mult
        m22 14 11 30 32 n1 w=241.3u l=12.7u m=$mult
        m23 15 20 16 32 n1 w=19u    l=38.1u m=$mult
        m24 16 14 30 32 n1 w=406.4u l=12.7u m=$mult
        m25 15 15 20 32 n1 w=38.1u  l=42.7u m=$mult
        m26 20 16 30 32 n1 w=381u   l=25.4u m=$mult
        m27 20 15 66 32 n1 w=22.9u  l=7.6u m=$mult
        .endif
        cc 7 9 40pf
        cl 66 0 70pf
        vin 21 0 AC pulse(0 5 1ns 1ns 1ns 5us 10us)
        vccp 15 0 dc +15
        vddn 30 0 dc -15
        vb 32 0 dc -20
        .if bsim
        .model n1 nmos(level=8 capmod=3)
        .else
        .model n1 nmos(nsub=2.2e15 uo=575 ucrit=49k uexp=0.1 tox=0.11u xj=2.95u
        +   level=2 cgso=1.5n cgdo=1.5n cbd=4.5f cbs=4.5f ld=2.4485u nss=3.2e10
        +   kp=2e-5 phi=0.6 )
        .endif
    </pre>
!!LATEX ex7 examples.tex
Below is an example circuit that illustrates some of the new features,
and some older features perhaps not widely appreciated.  This also
served as a test for improving MOS convergence.  To run a convergence
test:
\begin{enumerate}
\item{Source this circuit.}
\item{Press the {\cb siminterface} button in the Debug tool.}
\item{Type ``{\vt set value1 = mult}''.}
\item{Type ``{\vt loop .5 2.5 .1 op}''.}
\end{enumerate}

This runs operating point analysis for M values from .5 to 2.5, and
displays a little plot of the convergence process.  In the display,
`{\vt +}' means an increasing gmin step, `.' is a source step, `{\vt
-}' is a decreasing gmin step.

Note that 100 nS is too coarse to get a decent looking plot with BSIM
devices.  Use ``{\vt tran 1n 10u}'' in that case, since the circuit
seems to be oscillating at very high frequency.

\begin{verbatim}
    mosamp2 - mos amplifier - transient
    .options abstol=10n vntol=10n noopiter mult=2 nqs=1 reltol=1e-4
    *.op
    .tran 0.1us 10us
    .plot  tran v(20) v(66)
    * set below to 0 for old MOS model
    .param bsim = 1
    .if bsim = 1
    m1  15 15  1 32 n1 w=88.9u  l=25.4u  m=$mult nqsmod=$nqs
    m2   1  1  2 32 n1 w=12.7u  l=266.7u m=$mult nqsmod=$nqs
    m3   2  2 30 32 n1 w=88.9u  l=25.4u  m=$mult nqsmod=$nqs
    m4  15  5  4 32 n1 w=12.7u  l=106.7u m=$mult nqsmod=$nqs
    m5   4  4 30 32 n1 w=88.9u  l=12.7u  m=$mult nqsmod=$nqs
    m6  15 15  5 32 n1 w=44.5u  l=25.4u  m=$mult nqsmod=$nqs
    m7   5 20  8 32 n1 w=482.6u l=12.7u  m=$mult nqsmod=$nqs
    m8   8  2 30 32 n1 w=88.9u  l=25.4u  m=$mult nqsmod=$nqs
    m9  15 15  6 32 n1 w=44.5u  l=25.4u  m=$mult nqsmod=$nqs
    m10  6 21  8 32 n1 w=482.6u l=12.7u  m=$mult nqsmod=$nqs
    m11 15  6  7 32 n1 w=12.7u  l=106.7u m=$mult nqsmod=$nqs
    m12  7  4 30 32 n1 w=88.9u  l=12.7u  m=$mult nqsmod=$nqs
    m13 15 10  9 32 n1 w=139.7u l=12.7u  m=$mult nqsmod=$nqs
    m14  9 11 30 32 n1 w=139.7u l=12.7u  m=$mult nqsmod=$nqs
    m15 15 15 12 32 n1 w=12.7u  l=207.8u m=$mult nqsmod=$nqs
    m16 12 12 11 32 n1 w=54.1u  l=12.7u  m=$mult nqsmod=$nqs
    m17 11 11 30 32 n1 w=54.1u  l=12.7u  m=$mult nqsmod=$nqs
    m18 15 15 10 32 n1 w=12.7u  l=45.2u  m=$mult nqsmod=$nqs
    m19 10 12 13 32 n1 w=270.5u l=12.7u  m=$mult nqsmod=$nqs
    m20 13  7 30 32 n1 w=270.5u l=12.7u  m=$mult nqsmod=$nqs
    m21 15 10 14 32 n1 w=254u   l=12.7u  m=$mult nqsmod=$nqs
    m22 14 11 30 32 n1 w=241.3u l=12.7u  m=$mult nqsmod=$nqs
    m23 15 20 16 32 n1 w=19u    l=38.1u  m=$mult nqsmod=$nqs
    m24 16 14 30 32 n1 w=406.4u l=12.7u  m=$mult nqsmod=$nqs
    m25 15 15 20 32 n1 w=38.1u  l=42.7u  m=$mult nqsmod=$nqs
    m26 20 16 30 32 n1 w=381u   l=25.4u  m=$mult nqsmod=$nqs
    m27 20 15 66 32 n1 w=22.9u  l=7.6u   m=$mult nqsmod=$nqs
    .else
    m1  15 15  1 32 n1 w=88.9u  l=25.4u  m=$mult
    m2   1  1  2 32 n1 w=12.7u  l=266.7u m=$mult
    m3   2  2 30 32 n1 w=88.9u  l=25.4u  m=$mult
    m4  15  5  4 32 n1 w=12.7u  l=106.7u m=$mult
    m5   4  4 30 32 n1 w=88.9u  l=12.7u  m=$mult
    m6  15 15  5 32 n1 w=44.5u  l=25.4u  m=$mult
    m7   5 20  8 32 n1 w=482.6u l=12.7u  m=$mult
    m8   8  2 30 32 n1 w=88.9u  l=25.4u  m=$mult
    m9  15 15  6 32 n1 w=44.5u  l=25.4u  m=$mult
    m10  6 21  8 32 n1 w=482.6u l=12.7u  m=$mult
    m11 15  6  7 32 n1 w=12.7u  l=106.7u m=$mult
    m12  7  4 30 32 n1 w=88.9u  l=12.7u  m=$mult
    m13 15 10  9 32 n1 w=139.7u l=12.7u  m=$mult
    m14  9 11 30 32 n1 w=139.7u l=12.7u  m=$mult
    m15 15 15 12 32 n1 w=12.7u  l=207.8u m=$mult
    m16 12 12 11 32 n1 w=54.1u  l=12.7u  m=$mult
    m17 11 11 30 32 n1 w=54.1u  l=12.7u  m=$mult
    m18 15 15 10 32 n1 w=12.7u  l=45.2u  m=$mult
    m19 10 12 13 32 n1 w=270.5u l=12.7u  m=$mult
    m20 13  7 30 32 n1 w=270.5u l=12.7u  m=$mult
    m21 15 10 14 32 n1 w=254u   l=12.7u  m=$mult
    m22 14 11 30 32 n1 w=241.3u l=12.7u  m=$mult
    m23 15 20 16 32 n1 w=19u    l=38.1u  m=$mult
    m24 16 14 30 32 n1 w=406.4u l=12.7u  m=$mult
    m25 15 15 20 32 n1 w=38.1u  l=42.7u  m=$mult
    m26 20 16 30 32 n1 w=381u   l=25.4u  m=$mult
    m27 20 15 66 32 n1 w=22.9u  l=7.6u   m=$mult
    .endif
    cc 7 9 40pf
    cl 66 0 70pf
    vin 21 0 AC pulse(0 5 1ns 1ns 1ns 5us 10us)
    vccp 15 0 dc +15
    vddn 30 0 dc -15
    vb 32 0 dc -20
    .if bsim
    .model n1 nmos(level=8 capmod=3)
    .else
    .model n1 nmos(nsub=2.2e15 uo=575 ucrit=49k uexp=0.1 tox=0.11u xj=2.95u
    +   level=2 cgso=1.5n cgdo=1.5n cbd=4.5f cbs=4.5f ld=2.4485u nss=3.2e10
    +   kp=2e-5 phi=0.6 )
    .endif
\end{verbatim}

!! examples.tex 012309
!!KEYWORD
ex8
!!TITLE
Example 8:  Verilog Pseudo-Random Sequence
!!HTML 
    This example illustrates use of a <tt>.verilog</tt> block to
    generate a digital signal, that is then interfaced to and
    processed by a conventional SPICE circuit.  The digital signal is
    a 511 step pseudo-random sequence, which is converted to a voltage
    and filtered.

    <p>
    <pre>
        * WRspice pseudo-random bit sequence demo
        v1 1 0 a/255-1
        r1 1 2 100
        c1 2 0 10p
        .tran 1p 10n
        .plot tran v(1) v(2)

        .verilog
        module  prbs;
        reg [8:0] a, b;
        reg clk;
        integer cnt;

        initial
        &#32   begin
        &#32   a = 9'hff;
        &#32   clk = 0;
        &#32   cnt = 0;
        &#32   $monitor("%d", cnt, "%b", a, a[0]);
        &#32   end

        always
        &#32   #5 clk = ~clk;

        always
        &#32   @(posedge clk)
        &#32   begin
        &#32   a = { a[4]^a[0], a[8:1] };
        &#32   if (a ==  9'hff)
        &#32       $stop;
        &#32   cnt = cnt + 1;
        &#32   end

        endmodule
        .endv
    </pre>
!!LATEX ex8 examples.tex
This example illustrates use of a {\vt .verilog} block to generate a
digital signal, that is then interfaced to and processed by a
conventional SPICE circuit.  The digital signal is a 511 step
pseudo-random sequence, which is converted to a voltage and filtered.

\begin{verbatim}
    * WRspice pseudo-random bit sequence demo
    v1 1 0 a/255-1
    r1  1 2 100
    c1 2 0 10p
    .tran 1p 10n
    .plot tran v(1) v(2)

    .verilog
    module  prbs;
    reg [8:0] a, b;
    reg clk;
    integer cnt;

    initial
        begin
        a = 9'hff;
        clk = 0;
        cnt = 0;
        $monitor("%d", cnt, "%b", a, a[0]);
        end

    always
        #5 clk = ~clk;

    always
        @(posedge clk)
        begin
        a = { a[4]^a[0], a[8:1] };
        if (a ==  9'hff)
            $stop;
        cnt = cnt + 1;
        end

    endmodule
    .endv
\end{verbatim}

!! examples.tex 012309
!!KEYWORD
ex9
!!TITLE
Example 9:  Josephson Junction I-V Curve
!!HTML 
    <pre>
        WRspice jj I-V curve demo
        *
        * One can plot a pretty decent iv curve using transient analysis.
        * This will show the differences between the various model options.
        *
        b1 1 0 jj1 control=v2
        v1 2 0 pwl(0 0 2n 70m 4n 0 5n 0)
        r1 2 1 100
        *
        * for rtype=4, vary v2 between 0 and 1 for no gap to full gap
        v2 3 0 .5
        *
        r2 3 0 1
        *
        * It is interesting to set rtype and delv to different values,
        * and note the changes.
        *
        *Nb 1000 A/cm2   area = 30 square microns
        .model jj1 jj(rtype=4,cct=1,icon=10m,vg=2.8m,delv=.1m,
        + icrit=0.3m,r0=100,rn=5.4902,cap=1.14195p)
        .tran 5p 5n
        * type "run", then "plot -b v(1) (-v1#branch)"
        .end
    </pre>
!!LATEX ex9 examples.tex
\begin{verbatim}
    WRspice jj I-V curve demo
    *
    * One can plot a pretty decent iv curve using transient analysis.
    * This will show the differences between the various model options.
    *
    b1 1 0 jj1 control=v2
    v1 2 0 pwl(0 0 2n 70m 4n 0 5n 0)
    r1 2 1 100
    *
    * for rtype=4, vary v2 between 0 and 1 for no gap to full gap
    v2 3 0 .5
    *
    r2 3 0 1
    *
    * It is interesting to set rtype and delv to different values, and note
    * the changes.
    *
    *Nb 1000 A/cm2   area = 30 square microns
    .model jj1 jj(rtype=4,cct=1,icon=10m,vg=2.8m,delv=.1m,
    + icrit=0.3m,r0=100,rn=5.4902,cap=1.14195p)
    .tran 5p 5n
    * type "run", then "plot -b v(1) (-v1#branch)"
    .end
\end{verbatim}

!! examples.tex 012309
!!KEYWORD
ex10
!!TITLE
Example 10:  Josephson Gap Potential Modulation
!!HTML 
    <pre>
    WRspice jj qp modulation demo
    *
    * The rtype=4 option of the Josephson model causes the gap potential
    * to scale with the external "control current" absolute value.  For
    * unit control current (1 Amp) or larger, the full potential is used,
    * otherwise it scales linearly to zero.  The transfer function is defined
    * externally with controlled sources, as below.  The approximation
    * Vg = Vg0*(1-t**4) is pretty good, except near t = 1 (T = Tc, t = T/Tc).
    * The actual transfer function is left to the user - in the example below,
    * the ambient temperature is 7K, Tc=9.2K, and 1mv of "input" causes 1K
    * temperature shift.
    *
    * For amusement, change cct=1 to cct=0 below.  This runs much more quickly
    * as critical current is set to zero.
    *
    b1 1 0 jj1 control=v2
    v1 2 0 pulse(0 35m 10p 10p)
    r1 2 1 100
    *
    v2 3 0
    g1 3 0 4 0 function 1 - (1000*x+7)/9.2)^4
    v4 4 0 pulse(-1m 1m 10p 10p 10p 20p 60p)
    *
    *Nb 1000 A/cm2   area = 30 square microns
    .model jj1 jj(rtype=4,cct=1,icon=10m,vg=2.8m,delv=.1m,
    + icrit=0.3m,r0=100,rn=5.4902,cap=1.14195p)
    .tran 1p 500p uic
    * type "run", then plot v(1) and v(4) to see the gap shift and input
    .end
    </pre>
!!LATEX ex10 examples.tex
\begin{verbatim}
    WRspice jj qp modulation demo
    *
    * The rtype=4 option of the Josephson model causes the gap potential
    * to scale with the external "control current" absolute value.  For
    * unit control current (1 Amp) or larger, the full potential is used,
    * otherwise it scales linearly to zero.  The transfer function is defined
    * externally with controlled sources, as below.  The approximation
    * Vg = Vg0*(1-t**4) is pretty good, except near t = 1 (T = Tc, t = T/Tc).
    * The actual transfer function is left to the user - in the example below,
    * the ambient temperature is 7K, Tc=9.2K, and 1mv of "input" causes 1K
    * temperature shift.
    *
    * For amusement, change cct=1 to cct=0 below.  This runs much more quickly
    * as critical current is set to zero.
    *
    b1 1 0 jj1 control=v2
    v1 2 0 pulse(0 35m 10p 10p)
    r1 2 1 100
    *
    v2 3 0
    g1 3 0 4 0 function 1 - (1000*x+7)/9.2)^4
    v4 4 0 pulse(-1m 1m 10p 10p 10p 20p 60p)
    *
    *Nb 1000 A/cm2   area = 30 square microns
    .model jj1 jj(rtype=4,cct=1,icon=10m,vg=2.8m,delv=.1m,
    + icrit=0.3m,r0=100,rn=5.4902,cap=1.14195p)
    .tran 1p 500p uic
    * type "run", then plot v(1) and v(4) to see the gap shift and input
    .end
\end{verbatim}

